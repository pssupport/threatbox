function DescriptionPopup(e){this.element=$(e),this.content=this.element.find(".js-description-scroller"),this.initContentHeight(),this.initBindings()}!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t="length"in e&&e.length,n=Z.type(e);return"function"===n||Z.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function r(e,t,n){if(Z.isFunction(t))return Z.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return Z.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(ae.test(t))return Z.filter(t,e,n);t=Z.filter(t,e)}return Z.grep(e,function(e){return U.call(t,e)>=0!==n})}function i(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function o(e){var t=he[e]={};return Z.each(e.match(de)||[],function(e,n){t[n]=!0}),t}function s(){J.removeEventListener("DOMContentLoaded",s,!1),e.removeEventListener("load",s,!1),Z.ready()}function a(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=Z.expando+a.uid++}function l(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(be,"-$1").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:xe.test(n)?Z.parseJSON(n):n}catch(i){}ye.set(e,t,n)}else n=void 0;return n}function u(){return!0}function c(){return!1}function f(){try{return J.activeElement}catch(e){}}function p(e,t){return Z.nodeName(e,"table")&&Z.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function d(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function h(e){var t=Pe.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function g(e,t){for(var n=0,r=e.length;r>n;n++)ve.set(e[n],"globalEval",!t||ve.get(t[n],"globalEval"))}function m(e,t){var n,r,i,o,s,a,l,u;if(1===t.nodeType){if(ve.hasData(e)&&(o=ve.access(e),s=ve.set(t,o),u=o.events)){delete s.handle,s.events={};for(i in u)for(n=0,r=u[i].length;r>n;n++)Z.event.add(t,i,u[i][n])}ye.hasData(e)&&(a=ye.access(e),l=Z.extend({},a),ye.set(t,l))}}function v(e,t){var n=e.getElementsByTagName?e.getElementsByTagName(t||"*"):e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&Z.nodeName(e,t)?Z.merge([e],n):n}function y(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ke.test(e.type)?t.checked=e.checked:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}function x(t,n){var r,i=Z(n.createElement(t)).appendTo(n.body),o=e.getDefaultComputedStyle&&(r=e.getDefaultComputedStyle(i[0]))?r.display:Z.css(i[0],"display");return i.detach(),o}function b(e){var t=J,n=Re[e];return n||(n=x(e,t),"none"!==n&&n||(We=(We||Z("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=We[0].contentDocument,t.write(),t.close(),n=x(e,t),We.detach()),Re[e]=n),n}function w(e,t,n){var r,i,o,s,a=e.style;return n=n||Ie(e),n&&(s=n.getPropertyValue(t)||n[t]),n&&(""!==s||Z.contains(e.ownerDocument,e)||(s=Z.style(e,t)),_e.test(s)&&ze.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function C(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function T(e,t){if(t in e)return t;for(var n=t[0].toUpperCase()+t.slice(1),r=t,i=Ge.length;i--;)if(t=Ge[i]+n,t in e)return t;return r}function k(e,t,n){var r=Xe.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function N(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=Z.css(e,n+Ce[o],!0,i)),r?("content"===n&&(s-=Z.css(e,"padding"+Ce[o],!0,i)),"margin"!==n&&(s-=Z.css(e,"border"+Ce[o]+"Width",!0,i))):(s+=Z.css(e,"padding"+Ce[o],!0,i),"padding"!==n&&(s+=Z.css(e,"border"+Ce[o]+"Width",!0,i)));return s}function E(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=Ie(e),s="border-box"===Z.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=w(e,t,o),(0>i||null==i)&&(i=e.style[t]),_e.test(i))return i;r=s&&(Q.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+N(e,t,n||(s?"border":"content"),r,o)+"px"}function S(e,t){for(var n,r,i,o=[],s=0,a=e.length;a>s;s++)r=e[s],r.style&&(o[s]=ve.get(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&Te(r)&&(o[s]=ve.access(r,"olddisplay",b(r.nodeName)))):(i=Te(r),"none"===n&&i||ve.set(r,"olddisplay",i?n:Z.css(r,"display"))));for(s=0;a>s;s++)r=e[s],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}function D(e,t,n,r,i){return new D.prototype.init(e,t,n,r,i)}function j(){return setTimeout(function(){Qe=void 0}),Qe=Z.now()}function A(e,t){var n,r=0,i={height:e};for(t=t?1:0;4>r;r+=2-t)n=Ce[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function L(e,t,n){for(var r,i=(nt[t]||[]).concat(nt["*"]),o=0,s=i.length;s>o;o++)if(r=i[o].call(n,t,e))return r}function H(e,t,n){var r,i,o,s,a,l,u,c,f=this,p={},d=e.style,h=e.nodeType&&Te(e),g=ve.get(e,"fxshow");n.queue||(a=Z._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,Z.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],u=Z.css(e,"display"),c="none"===u?ve.get(e,"olddisplay")||b(e.nodeName):u,"inline"===c&&"none"===Z.css(e,"float")&&(d.display="inline-block")),n.overflow&&(d.overflow="hidden",f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],Ke.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;h=!0}p[r]=g&&g[r]||Z.style(e,r)}else u=void 0;if(Z.isEmptyObject(p))"inline"===("none"===u?b(e.nodeName):u)&&(d.display=u);else{g?"hidden"in g&&(h=g.hidden):g=ve.access(e,"fxshow",{}),o&&(g.hidden=!h),h?Z(e).show():f.done(function(){Z(e).hide()}),f.done(function(){var t;ve.remove(e,"fxshow");for(t in p)Z.style(e,t,p[t])});for(r in p)s=L(h?g[r]:0,r,f),r in g||(g[r]=s.start,h&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function q(e,t){var n,r,i,o,s;for(n in e)if(r=Z.camelCase(n),i=t[r],o=e[n],Z.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=Z.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function O(e,t,n){var r,i,o=0,s=tt.length,a=Z.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=Qe||j(),n=Math.max(0,u.startTime+u.duration-t),r=n/u.duration||0,o=1-r,s=0,l=u.tweens.length;l>s;s++)u.tweens[s].run(o);return a.notifyWith(e,[u,o,n]),1>o&&l?n:(a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:Z.extend({},t),opts:Z.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Qe||j(),duration:n.duration,tweens:[],createTween:function(t,n){var r=Z.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)u.tweens[n].run(1);return t?a.resolveWith(e,[u,t]):a.rejectWith(e,[u,t]),this}}),c=u.props;for(q(c,u.opts.specialEasing);s>o;o++)if(r=tt[o].call(u,e,c,u.opts))return r;return Z.map(c,L,u),Z.isFunction(u.opts.start)&&u.opts.start.call(e,u),Z.fx.timer(Z.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function $(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(de)||[];if(Z.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function P(e,t,n,r){function i(a){var l;return o[a]=!0,Z.each(e[a]||[],function(e,a){var u=a(t,n,r);return"string"!=typeof u||s||o[u]?s?!(l=u):void 0:(t.dataTypes.unshift(u),i(u),!1)}),l}var o={},s=e===xt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function F(e,t){var n,r,i=Z.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&Z.extend(!0,e,r),e}function M(e,t,n){for(var r,i,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}s||(s=i)}o=o||s}return o?(o!==l[0]&&l.unshift(o),n[o]):void 0}function W(e,t,n,r){var i,o,s,a,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(s=u[l+" "+o]||u["* "+o],!s)for(i in u)if(a=i.split(" "),a[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){s===!0?s=u[i]:u[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(f){return{state:"parsererror",error:s?f:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}function R(e,t,n,r){var i;if(Z.isArray(t))Z.each(t,function(t,i){n||kt.test(e)?r(e,i):R(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==Z.type(t))r(e,t);else for(i in t)R(e+"["+i+"]",t[i],n,r)}function z(e){return Z.isWindow(e)?e:9===e.nodeType&&e.defaultView}var _=[],I=_.slice,B=_.concat,X=_.push,U=_.indexOf,V={},Y=V.toString,G=V.hasOwnProperty,Q={},J=e.document,K="2.1.4",Z=function(e,t){return new Z.fn.init(e,t)},ee=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,te=/^-ms-/,ne=/-([\da-z])/gi,re=function(e,t){return t.toUpperCase()};Z.fn=Z.prototype={jquery:K,constructor:Z,selector:"",length:0,toArray:function(){return I.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:I.call(this)},pushStack:function(e){var t=Z.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return Z.each(this,e,t)},map:function(e){return this.pushStack(Z.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(I.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:X,sort:_.sort,splice:_.splice},Z.extend=Z.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||Z.isFunction(s)||(s={}),a===l&&(s=this,a--);l>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(u&&r&&(Z.isPlainObject(r)||(i=Z.isArray(r)))?(i?(i=!1,o=n&&Z.isArray(n)?n:[]):o=n&&Z.isPlainObject(n)?n:{},s[t]=Z.extend(u,o,r)):void 0!==r&&(s[t]=r));return s},Z.extend({expando:"jQuery"+(K+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===Z.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!Z.isArray(e)&&e-parseFloat(e)+1>=0},isPlainObject:function(e){return"object"!==Z.type(e)||e.nodeType||Z.isWindow(e)?!1:e.constructor&&!G.call(e.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?V[Y.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;e=Z.trim(e),e&&(1===e.indexOf("use strict")?(t=J.createElement("script"),t.text=e,J.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(te,"ms-").replace(ne,re)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,r){var i,o=0,s=e.length,a=n(e);if(r){if(a)for(;s>o&&(i=t.apply(e[o],r),i!==!1);o++);else for(o in e)if(i=t.apply(e[o],r),i===!1)break}else if(a)for(;s>o&&(i=t.call(e[o],o,e[o]),i!==!1);o++);else for(o in e)if(i=t.call(e[o],o,e[o]),i===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(ee,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?Z.merge(r,"string"==typeof e?[e]:e):X.call(r,e)),r},inArray:function(e,t,n){return null==t?-1:U.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,s=e.length,a=!n;s>o;o++)r=!t(e[o],o),r!==a&&i.push(e[o]);return i},map:function(e,t,r){var i,o=0,s=e.length,a=n(e),l=[];if(a)for(;s>o;o++)i=t(e[o],o,r),null!=i&&l.push(i);else for(o in e)i=t(e[o],o,r),null!=i&&l.push(i);return B.apply([],l)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(n=e[t],t=e,e=n),Z.isFunction(e)?(r=I.call(arguments,2),i=function(){return e.apply(t||this,r.concat(I.call(arguments)))},i.guid=e.guid=e.guid||Z.guid++,i):void 0},now:Date.now,support:Q}),Z.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){V["[object "+t+"]"]=t.toLowerCase()});var ie=function(e){function t(e,t,n,r){var i,o,s,a,l,u,f,d,h,g;if((t?t.ownerDocument||t:R)!==H&&L(t),t=t||H,n=n||[],a=t.nodeType,"string"!=typeof e||!e||1!==a&&9!==a&&11!==a)return n;if(!r&&O){if(11!==a&&(i=ye.exec(e)))if(s=i[1]){if(9===a){if(o=t.getElementById(s),!o||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(s))&&M(t,o)&&o.id===s)return n.push(o),n}else{if(i[2])return K.apply(n,t.getElementsByTagName(e)),n;if((s=i[3])&&w.getElementsByClassName)return K.apply(n,t.getElementsByClassName(s)),n}if(w.qsa&&(!$||!$.test(e))){if(d=f=W,h=t,g=1!==a&&e,1===a&&"object"!==t.nodeName.toLowerCase()){for(u=N(e),(f=t.getAttribute("id"))?d=f.replace(be,"\\$&"):t.setAttribute("id",d),d="[id='"+d+"'] ",l=u.length;l--;)u[l]=d+p(u[l]);h=xe.test(e)&&c(t.parentNode)||t,g=u.join(",")}if(g)try{return K.apply(n,h.querySelectorAll(g)),n}catch(m){}finally{f||t.removeAttribute("id")}}}return S(e.replace(le,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>C.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[W]=!0,e}function i(e){var t=H.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=e.length;r--;)C.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||V)-(~e.sourceIndex||V);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function u(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function f(){}function p(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function d(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=_++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,s){var a,l,u=[z,o];if(s){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(l=t[W]||(t[W]={}),(a=l[r])&&a[0]===z&&a[1]===o)return u[2]=a[2];if(l[r]=u,u[2]=e(t,n,s))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function g(e,n,r){for(var i=0,o=n.length;o>i;i++)t(e,n[i],r);return r}function m(e,t,n,r,i){for(var o,s=[],a=0,l=e.length,u=null!=t;l>a;a++)(o=e[a])&&(!n||n(o,r,i))&&(s.push(o),u&&t.push(a));return s}function v(e,t,n,i,o,s){return i&&!i[W]&&(i=v(i)),o&&!o[W]&&(o=v(o,s)),r(function(r,s,a,l){var u,c,f,p=[],d=[],h=s.length,v=r||g(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?v:m(v,p,e,a,l),x=n?o||(r?e:h||i)?[]:s:y;if(n&&n(y,x,a,l),i)for(u=m(x,d),i(u,[],a,l),c=u.length;c--;)(f=u[c])&&(x[d[c]]=!(y[d[c]]=f));if(r){if(o||e){if(o){for(u=[],c=x.length;c--;)(f=x[c])&&u.push(y[c]=f);o(null,x=[],u,l)}for(c=x.length;c--;)(f=x[c])&&(u=o?ee(r,f):p[c])>-1&&(r[u]=!(s[u]=f))}}else x=m(x===s?x.splice(h,x.length):x),o?o(null,s,x,l):K.apply(s,x)})}function y(e){for(var t,n,r,i=e.length,o=C.relative[e[0].type],s=o||C.relative[" "],a=o?1:0,l=d(function(e){return e===t},s,!0),u=d(function(e){return ee(t,e)>-1},s,!0),c=[function(e,n,r){var i=!o&&(r||n!==D)||((t=n).nodeType?l(e,n,r):u(e,n,r));return t=null,i}];i>a;a++)if(n=C.relative[e[a].type])c=[d(h(c),n)];else{if(n=C.filter[e[a].type].apply(null,e[a].matches),n[W]){for(r=++a;i>r&&!C.relative[e[r].type];r++);return v(a>1&&h(c),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(le,"$1"),n,r>a&&y(e.slice(a,r)),i>r&&y(e=e.slice(r)),i>r&&p(e))}c.push(n)}return h(c)}function x(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,l,u){var c,f,p,d=0,h="0",g=r&&[],v=[],y=D,x=r||o&&C.find.TAG("*",u),b=z+=null==y?1:Math.random()||.1,w=x.length;for(u&&(D=s!==H&&s);h!==w&&null!=(c=x[h]);h++){if(o&&c){for(f=0;p=e[f++];)if(p(c,s,a)){l.push(c);break}u&&(z=b)}i&&((c=!p&&c)&&d--,r&&g.push(c))}if(d+=h,i&&h!==d){for(f=0;p=n[f++];)p(g,v,s,a);if(r){if(d>0)for(;h--;)g[h]||v[h]||(v[h]=Q.call(l));v=m(v)}K.apply(l,v),u&&!r&&v.length>0&&d+n.length>1&&t.uniqueSort(l)}return u&&(z=b,D=y),g};return i?r(s):s}var b,w,C,T,k,N,E,S,D,j,A,L,H,q,O,$,P,F,M,W="sizzle"+1*new Date,R=e.document,z=0,_=0,I=n(),B=n(),X=n(),U=function(e,t){return e===t&&(A=!0),0},V=1<<31,Y={}.hasOwnProperty,G=[],Q=G.pop,J=G.push,K=G.push,Z=G.slice,ee=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie=re.replace("w","w#"),oe="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ie+"))|)"+ne+"*\\]",se=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+oe+")*)|.*)\\)|)",ae=new RegExp(ne+"+","g"),le=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ue=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),fe=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),pe=new RegExp(se),de=new RegExp("^"+ie+"$"),he={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re.replace("w","w*")+")"),ATTR:new RegExp("^"+oe),PSEUDO:new RegExp("^"+se),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},ge=/^(?:input|select|textarea|button)$/i,me=/^h\d$/i,ve=/^[^{]+\{\s*\[native \w/,ye=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,xe=/[+~]/,be=/'|\\/g,we=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),Ce=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},Te=function(){L()};try{K.apply(G=Z.call(R.childNodes),R.childNodes),G[R.childNodes.length].nodeType}catch(ke){K={apply:G.length?function(e,t){J.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}w=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},L=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:R;return r!==H&&9===r.nodeType&&r.documentElement?(H=r,q=r.documentElement,n=r.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",Te,!1):n.attachEvent&&n.attachEvent("onunload",Te)),O=!k(r),w.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=i(function(e){return e.appendChild(r.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=ve.test(r.getElementsByClassName),w.getById=i(function(e){return q.appendChild(e).id=W,!r.getElementsByName||!r.getElementsByName(W).length}),w.getById?(C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&O){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},C.filter.ID=function(e){var t=e.replace(we,Ce);return function(e){return e.getAttribute("id")===t}}):(delete C.find.ID,C.filter.ID=function(e){var t=e.replace(we,Ce);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),C.find.TAG=w.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},C.find.CLASS=w.getElementsByClassName&&function(e,t){return O?t.getElementsByClassName(e):void 0},P=[],$=[],(w.qsa=ve.test(r.querySelectorAll))&&(i(function(e){q.appendChild(e).innerHTML="<a id='"+W+"'></a><select id='"+W+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&$.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||$.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+W+"-]").length||$.push("~="),e.querySelectorAll(":checked").length||$.push(":checked"),e.querySelectorAll("a#"+W+"+*").length||$.push(".#.+[+~]")}),i(function(e){var t=r.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&$.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||$.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),$.push(",.*:")})),(w.matchesSelector=ve.test(F=q.matches||q.webkitMatchesSelector||q.mozMatchesSelector||q.oMatchesSelector||q.msMatchesSelector))&&i(function(e){w.disconnectedMatch=F.call(e,"div"),F.call(e,"[s!='']:x"),P.push("!=",se)}),$=$.length&&new RegExp($.join("|")),P=P.length&&new RegExp(P.join("|")),t=ve.test(q.compareDocumentPosition),M=t||ve.test(q.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return A=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===r||e.ownerDocument===R&&M(R,e)?-1:t===r||t.ownerDocument===R&&M(R,t)?1:j?ee(j,e)-ee(j,t):0:4&n?-1:1)}:function(e,t){if(e===t)return A=!0,0;var n,i=0,o=e.parentNode,a=t.parentNode,l=[e],u=[t];if(!o||!a)return e===r?-1:t===r?1:o?-1:a?1:j?ee(j,e)-ee(j,t):0;if(o===a)return s(e,t);for(n=e;n=n.parentNode;)l.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;l[i]===u[i];)i++;return i?s(l[i],u[i]):l[i]===R?-1:u[i]===R?1:0},r):H},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==H&&L(e),n=n.replace(fe,"='$1']"),w.matchesSelector&&O&&(!P||!P.test(n))&&(!$||!$.test(n)))try{var r=F.call(e,n);if(r||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,H,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==H&&L(e),M(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==H&&L(e);var n=C.attrHandle[t.toLowerCase()],r=n&&Y.call(C.attrHandle,t.toLowerCase())?n(e,t,!O):void 0;return void 0!==r?r:w.attributes||!O?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(A=!w.detectDuplicates,j=!w.sortStable&&e.slice(0),e.sort(U),A){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return j=null,e},T=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=T(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=T(t);return n},C=t.selectors={cacheLength:50,createPseudo:r,match:he,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(we,Ce),e[3]=(e[3]||e[4]||e[5]||"").replace(we,Ce),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return he.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&pe.test(n)&&(t=N(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(we,Ce).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=I[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&I(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ae," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,f,p,d,h,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a;if(m){if(o){for(;g;){for(f=t;f=f[g];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(c=m[W]||(m[W]={}),u=c[e]||[],d=u[0]===z&&u[1],p=u[0]===z&&u[2],f=d&&m.childNodes[d];f=++d&&f&&f[g]||(p=d=0)||h.pop();)if(1===f.nodeType&&++p&&f===t){c[e]=[z,d,p];break}}else if(y&&(u=(t[W]||(t[W]={}))[e])&&u[0]===z)p=u[1];else for(;(f=++d&&f&&f[g]||(p=d=0)||h.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++p||(y&&((f[W]||(f[W]={}))[e]=[z,p]),f!==t)););return p-=i,p===r||p%r===0&&p/r>=0}}},PSEUDO:function(e,n){var i,o=C.pseudos[e]||C.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[W]?o(n):o.length>1?(i=[e,e,"",n],C.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)r=ee(e,i[s]),e[r]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=E(e.replace(le,"$1"));return i[W]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(we,Ce),function(t){return(t.textContent||t.innerText||T(t)).indexOf(e)>-1}}),lang:r(function(e){return de.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(we,Ce).toLowerCase(),function(t){var n;do if(n=O?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===q},focus:function(e){return e===H.activeElement&&(!H.hasFocus||H.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!C.pseudos.empty(e)},header:function(e){return me.test(e.nodeName)},input:function(e){return ge.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[0>n?n+t:n]}),even:u(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:u(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},C.pseudos.nth=C.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})C.pseudos[b]=l(b);return f.prototype=C.filters=C.pseudos,C.setFilters=new f,N=t.tokenize=function(e,n){var r,i,o,s,a,l,u,c=B[e+" "];if(c)return n?0:c.slice(0);for(a=e,l=[],u=C.preFilter;a;){(!r||(i=ue.exec(a)))&&(i&&(a=a.slice(i[0].length)||a),l.push(o=[])),r=!1,(i=ce.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(le," ")}),a=a.slice(r.length));for(s in C.filter)!(i=he[s].exec(a))||u[s]&&!(i=u[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):B(e,l).slice(0)},E=t.compile=function(e,t){var n,r=[],i=[],o=X[e+" "];if(!o){for(t||(t=N(e)),n=t.length;n--;)o=y(t[n]),o[W]?r.push(o):i.push(o);o=X(e,x(i,r)),o.selector=e}return o},S=t.select=function(e,t,n,r){var i,o,s,a,l,u="function"==typeof e&&e,f=!r&&N(e=u.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&w.getById&&9===t.nodeType&&O&&C.relative[o[1].type]){if(t=(C.find.ID(s.matches[0].replace(we,Ce),t)||[])[0],!t)return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=he.needsContext.test(e)?0:o.length;i--&&(s=o[i],!C.relative[a=s.type]);)if((l=C.find[a])&&(r=l(s.matches[0].replace(we,Ce),xe.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&p(o),!e)return K.apply(n,r),n;break}}return(u||E(e,f))(r,t,!O,n,xe.test(e)&&c(t.parentNode)||t),n},w.sortStable=W.split("").sort(U).join("")===W,w.detectDuplicates=!!A,L(),w.sortDetached=i(function(e){return 1&e.compareDocumentPosition(H.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);Z.find=ie,Z.expr=ie.selectors,Z.expr[":"]=Z.expr.pseudos,Z.unique=ie.uniqueSort,Z.text=ie.getText,Z.isXMLDoc=ie.isXML,Z.contains=ie.contains;var oe=Z.expr.match.needsContext,se=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,ae=/^.[^:#\[\.,]*$/;Z.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?Z.find.matchesSelector(r,e)?[r]:[]:Z.find.matches(e,Z.grep(t,function(e){
return 1===e.nodeType}))},Z.fn.extend({find:function(e){var t,n=this.length,r=[],i=this;if("string"!=typeof e)return this.pushStack(Z(e).filter(function(){for(t=0;n>t;t++)if(Z.contains(i[t],this))return!0}));for(t=0;n>t;t++)Z.find(e,i[t],r);return r=this.pushStack(n>1?Z.unique(r):r),r.selector=this.selector?this.selector+" "+e:e,r},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&oe.test(e)?Z(e):e||[],!1).length}});var le,ue=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ce=Z.fn.init=function(e,t){var n,r;if(!e)return this;if("string"==typeof e){if(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:ue.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||le).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof Z?t[0]:t,Z.merge(this,Z.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:J,!0)),se.test(n[1])&&Z.isPlainObject(t))for(n in t)Z.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return r=J.getElementById(n[2]),r&&r.parentNode&&(this.length=1,this[0]=r),this.context=J,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):Z.isFunction(e)?"undefined"!=typeof le.ready?le.ready(e):e(Z):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),Z.makeArray(e,this))};ce.prototype=Z.fn,le=Z(J);var fe=/^(?:parents|prev(?:Until|All))/,pe={children:!0,contents:!0,next:!0,prev:!0};Z.extend({dir:function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&Z(e).is(n))break;r.push(e)}return r},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),Z.fn.extend({has:function(e){var t=Z(e,this),n=t.length;return this.filter(function(){for(var e=0;n>e;e++)if(Z.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],s=oe.test(e)||"string"!=typeof e?Z(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&Z.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?Z.unique(o):o)},index:function(e){return e?"string"==typeof e?U.call(Z(e),this[0]):U.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(Z.unique(Z.merge(this.get(),Z(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),Z.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return Z.dir(e,"parentNode")},parentsUntil:function(e,t,n){return Z.dir(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return Z.dir(e,"nextSibling")},prevAll:function(e){return Z.dir(e,"previousSibling")},nextUntil:function(e,t,n){return Z.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return Z.dir(e,"previousSibling",n)},siblings:function(e){return Z.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return Z.sibling(e.firstChild)},contents:function(e){return e.contentDocument||Z.merge([],e.childNodes)}},function(e,t){Z.fn[e]=function(n,r){var i=Z.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=Z.filter(r,i)),this.length>1&&(pe[e]||Z.unique(i),fe.test(e)&&i.reverse()),this.pushStack(i)}});var de=/\S+/g,he={};Z.Callbacks=function(e){e="string"==typeof e?he[e]||o(e):Z.extend({},e);var t,n,r,i,s,a,l=[],u=!e.once&&[],c=function(o){for(t=e.memory&&o,n=!0,a=i||0,i=0,s=l.length,r=!0;l&&s>a;a++)if(l[a].apply(o[0],o[1])===!1&&e.stopOnFalse){t=!1;break}r=!1,l&&(u?u.length&&c(u.shift()):t?l=[]:f.disable())},f={add:function(){if(l){var n=l.length;!function o(t){Z.each(t,function(t,n){var r=Z.type(n);"function"===r?e.unique&&f.has(n)||l.push(n):n&&n.length&&"string"!==r&&o(n)})}(arguments),r?s=l.length:t&&(i=n,c(t))}return this},remove:function(){return l&&Z.each(arguments,function(e,t){for(var n;(n=Z.inArray(t,l,n))>-1;)l.splice(n,1),r&&(s>=n&&s--,a>=n&&a--)}),this},has:function(e){return e?Z.inArray(e,l)>-1:!(!l||!l.length)},empty:function(){return l=[],s=0,this},disable:function(){return l=u=t=void 0,this},disabled:function(){return!l},lock:function(){return u=void 0,t||f.disable(),this},locked:function(){return!u},fireWith:function(e,t){return!l||n&&!u||(t=t||[],t=[e,t.slice?t.slice():t],r?u.push(t):c(t)),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!n}};return f},Z.extend({Deferred:function(e){var t=[["resolve","done",Z.Callbacks("once memory"),"resolved"],["reject","fail",Z.Callbacks("once memory"),"rejected"],["notify","progress",Z.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return Z.Deferred(function(n){Z.each(t,function(t,o){var s=Z.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&Z.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?Z.extend(e,r):r}},i={};return r.pipe=r.then,Z.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=I.call(arguments),s=o.length,a=1!==s||e&&Z.isFunction(e.promise)?s:0,l=1===a?e:Z.Deferred(),u=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?I.call(arguments):i,r===t?l.notifyWith(n,r):--a||l.resolveWith(n,r)}};if(s>1)for(t=new Array(s),n=new Array(s),r=new Array(s);s>i;i++)o[i]&&Z.isFunction(o[i].promise)?o[i].promise().done(u(i,r,o)).fail(l.reject).progress(u(i,n,t)):--a;return a||l.resolveWith(r,o),l.promise()}});var ge;Z.fn.ready=function(e){return Z.ready.promise().done(e),this},Z.extend({isReady:!1,readyWait:1,holdReady:function(e){e?Z.readyWait++:Z.ready(!0)},ready:function(e){(e===!0?--Z.readyWait:Z.isReady)||(Z.isReady=!0,e!==!0&&--Z.readyWait>0||(ge.resolveWith(J,[Z]),Z.fn.triggerHandler&&(Z(J).triggerHandler("ready"),Z(J).off("ready"))))}}),Z.ready.promise=function(t){return ge||(ge=Z.Deferred(),"complete"===J.readyState?setTimeout(Z.ready):(J.addEventListener("DOMContentLoaded",s,!1),e.addEventListener("load",s,!1))),ge.promise(t)},Z.ready.promise();var me=Z.access=function(e,t,n,r,i,o,s){var a=0,l=e.length,u=null==n;if("object"===Z.type(n)){i=!0;for(a in n)Z.access(e,t,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,Z.isFunction(r)||(s=!0),u&&(s?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(Z(e),n)})),t))for(;l>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:u?t.call(e):l?t(e[0],n):o};Z.acceptData=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType},a.uid=1,a.accepts=Z.acceptData,a.prototype={key:function(e){if(!a.accepts(e))return 0;var t={},n=e[this.expando];if(!n){n=a.uid++;try{t[this.expando]={value:n},Object.defineProperties(e,t)}catch(r){t[this.expando]=n,Z.extend(e,t)}}return this.cache[n]||(this.cache[n]={}),n},set:function(e,t,n){var r,i=this.key(e),o=this.cache[i];if("string"==typeof t)o[t]=n;else if(Z.isEmptyObject(o))Z.extend(this.cache[i],t);else for(r in t)o[r]=t[r];return o},get:function(e,t){var n=this.cache[this.key(e)];return void 0===t?n:n[t]},access:function(e,t,n){var r;return void 0===t||t&&"string"==typeof t&&void 0===n?(r=this.get(e,t),void 0!==r?r:this.get(e,Z.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r,i,o=this.key(e),s=this.cache[o];if(void 0===t)this.cache[o]={};else{Z.isArray(t)?r=t.concat(t.map(Z.camelCase)):(i=Z.camelCase(t),t in s?r=[t,i]:(r=i,r=r in s?[r]:r.match(de)||[])),n=r.length;for(;n--;)delete s[r[n]]}},hasData:function(e){return!Z.isEmptyObject(this.cache[e[this.expando]]||{})},discard:function(e){e[this.expando]&&delete this.cache[e[this.expando]]}};var ve=new a,ye=new a,xe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,be=/([A-Z])/g;Z.extend({hasData:function(e){return ye.hasData(e)||ve.hasData(e)},data:function(e,t,n){return ye.access(e,t,n)},removeData:function(e,t){ye.remove(e,t)},_data:function(e,t,n){return ve.access(e,t,n)},_removeData:function(e,t){ve.remove(e,t)}}),Z.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=ye.get(o),1===o.nodeType&&!ve.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=Z.camelCase(r.slice(5)),l(o,r,i[r])));ve.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){ye.set(this,e)}):me(this,function(t){var n,r=Z.camelCase(e);if(o&&void 0===t){if(n=ye.get(o,e),void 0!==n)return n;if(n=ye.get(o,r),void 0!==n)return n;if(n=l(o,r,void 0),void 0!==n)return n}else this.each(function(){var n=ye.get(this,r);ye.set(this,r,t),-1!==e.indexOf("-")&&void 0!==n&&ye.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){ye.remove(this,e)})}}),Z.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=ve.get(e,t),n&&(!r||Z.isArray(n)?r=ve.access(e,t,Z.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=Z.queue(e,t),r=n.length,i=n.shift(),o=Z._queueHooks(e,t),s=function(){Z.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ve.get(e,n)||ve.access(e,n,{empty:Z.Callbacks("once memory").add(function(){ve.remove(e,[t+"queue",n])})})}}),Z.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?Z.queue(this[0],e):void 0===t?this:this.each(function(){var n=Z.queue(this,e,t);Z._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&Z.dequeue(this,e)})},dequeue:function(e){return this.each(function(){Z.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=Z.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)n=ve.get(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var we=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ce=["Top","Right","Bottom","Left"],Te=function(e,t){return e=t||e,"none"===Z.css(e,"display")||!Z.contains(e.ownerDocument,e)},ke=/^(?:checkbox|radio)$/i;!function(){var e=J.createDocumentFragment(),t=e.appendChild(J.createElement("div")),n=J.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),Q.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",Q.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Ne="undefined";Q.focusinBubbles="onfocusin"in e;var Ee=/^key/,Se=/^(?:mouse|pointer|contextmenu)|click/,De=/^(?:focusinfocus|focusoutblur)$/,je=/^([^.]*)(?:\.(.+)|)$/;Z.event={global:{},add:function(e,t,n,r,i){var o,s,a,l,u,c,f,p,d,h,g,m=ve.get(e);if(m)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=Z.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(t){return typeof Z!==Ne&&Z.event.triggered!==t.type?Z.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(de)||[""],u=t.length;u--;)a=je.exec(t[u])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d&&(f=Z.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=Z.event.special[d]||{},c=Z.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&Z.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=l[d])||(p=l[d]=[],p.delegateCount=0,f.setup&&f.setup.call(e,r,h,s)!==!1||e.addEventListener&&e.addEventListener(d,s,!1)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),Z.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,s,a,l,u,c,f,p,d,h,g,m=ve.hasData(e)&&ve.get(e);if(m&&(l=m.events)){for(t=(t||"").match(de)||[""],u=t.length;u--;)if(a=je.exec(t[u])||[],d=g=a[1],h=(a[2]||"").split(".").sort(),d){for(f=Z.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,p=l[d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));s&&!p.length&&(f.teardown&&f.teardown.call(e,h,m.handle)!==!1||Z.removeEvent(e,d,m.handle),delete l[d])}else for(d in l)Z.event.remove(e,d+t[u],n,r,!0);Z.isEmptyObject(l)&&(delete m.handle,ve.remove(e,"events"))}},trigger:function(t,n,r,i){var o,s,a,l,u,c,f,p=[r||J],d=G.call(t,"type")?t.type:t,h=G.call(t,"namespace")?t.namespace.split("."):[];if(s=a=r=r||J,3!==r.nodeType&&8!==r.nodeType&&!De.test(d+Z.event.triggered)&&(d.indexOf(".")>=0&&(h=d.split("."),d=h.shift(),h.sort()),u=d.indexOf(":")<0&&"on"+d,t=t[Z.expando]?t:new Z.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:Z.makeArray(n,[t]),f=Z.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!Z.isWindow(r)){for(l=f.delegateType||d,De.test(l+d)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(r.ownerDocument||J)&&p.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=p[o++])&&!t.isPropagationStopped();)t.type=o>1?l:f.bindType||d,c=(ve.get(s,"events")||{})[t.type]&&ve.get(s,"handle"),c&&c.apply(s,n),c=u&&s[u],c&&c.apply&&Z.acceptData(s)&&(t.result=c.apply(s,n),t.result===!1&&t.preventDefault());return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(p.pop(),n)!==!1||!Z.acceptData(r)||u&&Z.isFunction(r[d])&&!Z.isWindow(r)&&(a=r[u],a&&(r[u]=null),Z.event.triggered=d,r[d](),Z.event.triggered=void 0,a&&(r[u]=a)),t.result}},dispatch:function(e){e=Z.event.fix(e);var t,n,r,i,o,s=[],a=I.call(arguments),l=(ve.get(this,"events")||{})[e.type]||[],u=Z.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,e)!==!1){for(s=Z.event.handlers.call(this,e,l),t=0;(i=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!e.isImmediatePropagationStopped();)(!e.namespace_re||e.namespace_re.test(o.namespace))&&(e.handleObj=o,e.data=o.data,r=((Z.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,l=e.target;if(a&&l.nodeType&&(!e.button||"click"!==e.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==e.type){for(r=[],n=0;a>n;n++)o=t[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?Z(i,this).index(l)>=0:Z.find(i,this,null,[l]).length),r[i]&&r.push(o);r.length&&s.push({elem:l,handlers:r})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||J,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},fix:function(e){if(e[Z.expando])return e;var t,n,r,i=e.type,o=e,s=this.fixHooks[i];for(s||(this.fixHooks[i]=s=Se.test(i)?this.mouseHooks:Ee.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new Z.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=J),3===e.target.nodeType&&(e.target=e.target.parentNode),s.filter?s.filter(e,o):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==f()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===f()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&Z.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(e){return Z.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=Z.extend(new Z.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?Z.event.trigger(i,null,t):Z.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},Z.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)},Z.Event=function(e,t){return this instanceof Z.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?u:c):this.type=e,t&&Z.extend(this,t),this.timeStamp=e&&e.timeStamp||Z.now(),void(this[Z.expando]=!0)):new Z.Event(e,t)},Z.Event.prototype={isDefaultPrevented:c,isPropagationStopped:c,isImmediatePropagationStopped:c,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=u,e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=u,e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=u,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},Z.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){Z.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!Z.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),Q.focusinBubbles||Z.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){Z.event.simulate(t,e.target,Z.event.fix(e),!0)};Z.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=ve.access(r,t);i||r.addEventListener(e,n,!0),ve.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=ve.access(r,t)-1;i?ve.access(r,t,i):(r.removeEventListener(e,n,!0),ve.remove(r,t))}}}),Z.fn.extend({on:function(e,t,n,r,i){var o,s;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=void 0);for(s in e)this.on(s,t,n,e[s],i);return this}if(null==n&&null==r?(r=t,n=t=void 0):null==r&&("string"==typeof t?(r=n,n=void 0):(r=n,n=t,t=void 0)),r===!1)r=c;else if(!r)return this;return 1===i&&(o=r,r=function(e){return Z().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=Z.guid++)),this.each(function(){Z.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,Z(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=c),this.each(function(){Z.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){Z.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?Z.event.trigger(e,t,n,!0):void 0}});var Ae=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Le=/<([\w:]+)/,He=/<|&#?\w+;/,qe=/<(?:script|style|link)/i,Oe=/checked\s*(?:[^=]|=\s*.checked.)/i,$e=/^$|\/(?:java|ecma)script/i,Pe=/^true\/(.*)/,Fe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Me.optgroup=Me.option,Me.tbody=Me.tfoot=Me.colgroup=Me.caption=Me.thead,Me.th=Me.td,Z.extend({clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),l=Z.contains(e.ownerDocument,e);if(!(Q.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||Z.isXMLDoc(e)))for(s=v(a),o=v(e),r=0,i=o.length;i>r;r++)y(o[r],s[r]);if(t)if(n)for(o=o||v(e),s=s||v(a),r=0,i=o.length;i>r;r++)m(o[r],s[r]);else m(e,a);return s=v(a,"script"),s.length>0&&g(s,!l&&v(e,"script")),a},buildFragment:function(e,t,n,r){for(var i,o,s,a,l,u,c=t.createDocumentFragment(),f=[],p=0,d=e.length;d>p;p++)if(i=e[p],i||0===i)if("object"===Z.type(i))Z.merge(f,i.nodeType?[i]:i);else if(He.test(i)){for(o=o||c.appendChild(t.createElement("div")),s=(Le.exec(i)||["",""])[1].toLowerCase(),a=Me[s]||Me._default,o.innerHTML=a[1]+i.replace(Ae,"<$1></$2>")+a[2],u=a[0];u--;)o=o.lastChild;Z.merge(f,o.childNodes),o=c.firstChild,o.textContent=""}else f.push(t.createTextNode(i));for(c.textContent="",p=0;i=f[p++];)if((!r||-1===Z.inArray(i,r))&&(l=Z.contains(i.ownerDocument,i),o=v(c.appendChild(i),"script"),l&&g(o),n))for(u=0;i=o[u++];)$e.test(i.type||"")&&n.push(i);return c},cleanData:function(e){for(var t,n,r,i,o=Z.event.special,s=0;void 0!==(n=e[s]);s++){if(Z.acceptData(n)&&(i=n[ve.expando],i&&(t=ve.cache[i]))){if(t.events)for(r in t.events)o[r]?Z.event.remove(n,r):Z.removeEvent(n,r,t.handle);ve.cache[i]&&delete ve.cache[i]}delete ye.cache[n[ye.expando]]}}}),Z.fn.extend({text:function(e){return me(this,function(e){return void 0===e?Z.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=e)})},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=p(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=p(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,r=e?Z.filter(e,this):this,i=0;null!=(n=r[i]);i++)t||1!==n.nodeType||Z.cleanData(v(n)),n.parentNode&&(t&&Z.contains(n.ownerDocument,n)&&g(v(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(Z.cleanData(v(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return Z.clone(this,e,t)})},html:function(e){return me(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!qe.test(e)&&!Me[(Le.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(Ae,"<$1></$2>");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(Z.cleanData(v(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,Z.cleanData(v(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t){e=B.apply([],e);var n,r,i,o,s,a,l=0,u=this.length,c=this,f=u-1,p=e[0],g=Z.isFunction(p);if(g||u>1&&"string"==typeof p&&!Q.checkClone&&Oe.test(p))return this.each(function(n){var r=c.eq(n);g&&(e[0]=p.call(this,n,r.html())),r.domManip(e,t)});if(u&&(n=Z.buildFragment(e,this[0].ownerDocument,!1,this),r=n.firstChild,1===n.childNodes.length&&(n=r),r)){for(i=Z.map(v(n,"script"),d),o=i.length;u>l;l++)s=n,l!==f&&(s=Z.clone(s,!0,!0),o&&Z.merge(i,v(s,"script"))),t.call(this[l],s,l);if(o)for(a=i[i.length-1].ownerDocument,Z.map(i,h),l=0;o>l;l++)s=i[l],$e.test(s.type||"")&&!ve.access(s,"globalEval")&&Z.contains(a,s)&&(s.src?Z._evalUrl&&Z._evalUrl(s.src):Z.globalEval(s.textContent.replace(Fe,"")))}return this}}),Z.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){Z.fn[e]=function(e){for(var n,r=[],i=Z(e),o=i.length-1,s=0;o>=s;s++)n=s===o?this:this.clone(!0),Z(i[s])[t](n),X.apply(r,n.get());return this.pushStack(r)}});var We,Re={},ze=/^margin/,_e=new RegExp("^("+we+")(?!px)[a-z%]+$","i"),Ie=function(t){return t.ownerDocument.defaultView.opener?t.ownerDocument.defaultView.getComputedStyle(t,null):e.getComputedStyle(t,null)};!function(){function t(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",s.innerHTML="",i.appendChild(o);var t=e.getComputedStyle(s,null);n="1%"!==t.top,r="4px"===t.width,i.removeChild(o)}var n,r,i=J.documentElement,o=J.createElement("div"),s=J.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",Q.clearCloneStyle="content-box"===s.style.backgroundClip,o.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",o.appendChild(s),e.getComputedStyle&&Z.extend(Q,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==r&&t(),r},reliableMarginRight:function(){var t,n=s.appendChild(J.createElement("div"));return n.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",s.style.width="1px",i.appendChild(o),t=!parseFloat(e.getComputedStyle(n,null).marginRight),i.removeChild(o),s.removeChild(n),t}}))}(),Z.swap=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i};var Be=/^(none|table(?!-c[ea]).+)/,Xe=new RegExp("^("+we+")(.*)$","i"),Ue=new RegExp("^([+-])=("+we+")","i"),Ve={position:"absolute",visibility:"hidden",display:"block"},Ye={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","O","Moz","ms"];Z.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=w(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=Z.camelCase(t),l=e.style;return t=Z.cssProps[a]||(Z.cssProps[a]=T(l,a)),s=Z.cssHooks[t]||Z.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:l[t]:(o=typeof n,"string"===o&&(i=Ue.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(Z.css(e,t)),o="number"),null!=n&&n===n&&("number"!==o||Z.cssNumber[a]||(n+="px"),Q.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(l[t]=n)),void 0)}},css:function(e,t,n,r){var i,o,s,a=Z.camelCase(t);return t=Z.cssProps[a]||(Z.cssProps[a]=T(e.style,a)),s=Z.cssHooks[t]||Z.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=w(e,t,r)),"normal"===i&&t in Ye&&(i=Ye[t]),""===n||n?(o=parseFloat(i),n===!0||Z.isNumeric(o)?o||0:i):i}}),Z.each(["height","width"],function(e,t){Z.cssHooks[t]={get:function(e,n,r){return n?Be.test(Z.css(e,"display"))&&0===e.offsetWidth?Z.swap(e,Ve,function(){return E(e,t,r)}):E(e,t,r):void 0},set:function(e,n,r){var i=r&&Ie(e);return k(e,n,r?N(e,t,r,"border-box"===Z.css(e,"boxSizing",!1,i),i):0)}}}),Z.cssHooks.marginRight=C(Q.reliableMarginRight,function(e,t){return t?Z.swap(e,{display:"inline-block"},w,[e,"marginRight"]):void 0}),Z.each({margin:"",padding:"",border:"Width"},function(e,t){Z.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+Ce[r]+t]=o[r]||o[r-2]||o[0];return i}},ze.test(e)||(Z.cssHooks[e+t].set=k)}),Z.fn.extend({css:function(e,t){return me(this,function(e,t,n){var r,i,o={},s=0;if(Z.isArray(t)){for(r=Ie(e),i=t.length;i>s;s++)o[t[s]]=Z.css(e,t[s],!1,r);return o}return void 0!==n?Z.style(e,t,n):Z.css(e,t)},e,t,arguments.length>1)},show:function(){return S(this,!0)},hide:function(){return S(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Te(this)?Z(this).show():Z(this).hide()})}}),Z.Tween=D,D.prototype={constructor:D,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(Z.cssNumber[n]?"":"px")},cur:function(){var e=D.propHooks[this.prop];return e&&e.get?e.get(this):D.propHooks._default.get(this)},run:function(e){var t,n=D.propHooks[this.prop];return this.options.duration?this.pos=t=Z.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):D.propHooks._default.set(this),this}},D.prototype.init.prototype=D.prototype,D.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=Z.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){Z.fx.step[e.prop]?Z.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[Z.cssProps[e.prop]]||Z.cssHooks[e.prop])?Z.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},D.propHooks.scrollTop=D.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},Z.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},Z.fx=D.prototype.init,Z.fx.step={};var Qe,Je,Ke=/^(?:toggle|show|hide)$/,Ze=new RegExp("^(?:([+-])=|)("+we+")([a-z%]*)$","i"),et=/queueHooks$/,tt=[H],nt={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=Ze.exec(t),o=i&&i[3]||(Z.cssNumber[e]?"":"px"),s=(Z.cssNumber[e]||"px"!==o&&+r)&&Ze.exec(Z.css(n.elem,e)),a=1,l=20;if(s&&s[3]!==o){o=o||s[3],i=i||[],s=+r||1;do a=a||".5",s/=a,Z.style(n.elem,e,s+o);while(a!==(a=n.cur()/r)&&1!==a&&--l)}return i&&(s=n.start=+s||+r||0,n.unit=o,n.end=i[1]?s+(i[1]+1)*i[2]:+i[2]),n}]};Z.Animation=Z.extend(O,{tweener:function(e,t){Z.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,r=0,i=e.length;i>r;r++)n=e[r],nt[n]=nt[n]||[],nt[n].unshift(t)},prefilter:function(e,t){t?tt.unshift(e):tt.push(e)}}),Z.speed=function(e,t,n){var r=e&&"object"==typeof e?Z.extend({},e):{complete:n||!n&&t||Z.isFunction(e)&&e,duration:e,easing:n&&t||t&&!Z.isFunction(t)&&t};return r.duration=Z.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in Z.fx.speeds?Z.fx.speeds[r.duration]:Z.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){Z.isFunction(r.old)&&r.old.call(this),r.queue&&Z.dequeue(this,r.queue)},r},Z.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Te).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=Z.isEmptyObject(e),o=Z.speed(t,n,r),s=function(){var t=O(this,Z.extend({},e),o);(i||ve.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=Z.timers,s=ve.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&et.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&Z.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=ve.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=Z.timers,s=r?r.length:0;
for(n.finish=!0,Z.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),Z.each(["toggle","show","hide"],function(e,t){var n=Z.fn[t];Z.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(A(t,!0),e,r,i)}}),Z.each({slideDown:A("show"),slideUp:A("hide"),slideToggle:A("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){Z.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),Z.timers=[],Z.fx.tick=function(){var e,t=0,n=Z.timers;for(Qe=Z.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||Z.fx.stop(),Qe=void 0},Z.fx.timer=function(e){Z.timers.push(e),e()?Z.fx.start():Z.timers.pop()},Z.fx.interval=13,Z.fx.start=function(){Je||(Je=setInterval(Z.fx.tick,Z.fx.interval))},Z.fx.stop=function(){clearInterval(Je),Je=null},Z.fx.speeds={slow:600,fast:200,_default:400},Z.fn.delay=function(e,t){return e=Z.fx?Z.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},function(){var e=J.createElement("input"),t=J.createElement("select"),n=t.appendChild(J.createElement("option"));e.type="checkbox",Q.checkOn=""!==e.value,Q.optSelected=n.selected,t.disabled=!0,Q.optDisabled=!n.disabled,e=J.createElement("input"),e.value="t",e.type="radio",Q.radioValue="t"===e.value}();var rt,it,ot=Z.expr.attrHandle;Z.fn.extend({attr:function(e,t){return me(this,Z.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){Z.removeAttr(this,e)})}}),Z.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(e&&3!==o&&8!==o&&2!==o)return typeof e.getAttribute===Ne?Z.prop(e,t,n):(1===o&&Z.isXMLDoc(e)||(t=t.toLowerCase(),r=Z.attrHooks[t]||(Z.expr.match.bool.test(t)?it:rt)),void 0===n?r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=Z.find.attr(e,t),null==i?void 0:i):null!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):void Z.removeAttr(e,t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(de);if(o&&1===e.nodeType)for(;n=o[i++];)r=Z.propFix[n]||n,Z.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)},attrHooks:{type:{set:function(e,t){if(!Q.radioValue&&"radio"===t&&Z.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),it={set:function(e,t,n){return t===!1?Z.removeAttr(e,n):e.setAttribute(n,n),n}},Z.each(Z.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ot[t]||Z.find.attr;ot[t]=function(e,t,r){var i,o;return r||(o=ot[t],ot[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,ot[t]=o),i}});var st=/^(?:input|select|textarea|button)$/i;Z.fn.extend({prop:function(e,t){return me(this,Z.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[Z.propFix[e]||e]})}}),Z.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var r,i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return o=1!==s||!Z.isXMLDoc(e),o&&(t=Z.propFix[t]||t,i=Z.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){return e.hasAttribute("tabindex")||st.test(e.nodeName)||e.href?e.tabIndex:-1}}}}),Q.optSelected||(Z.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),Z.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){Z.propFix[this.toLowerCase()]=this});var at=/[\t\r\n\f]/g;Z.fn.extend({addClass:function(e){var t,n,r,i,o,s,a="string"==typeof e&&e,l=0,u=this.length;if(Z.isFunction(e))return this.each(function(t){Z(this).addClass(e.call(this,t,this.className))});if(a)for(t=(e||"").match(de)||[];u>l;l++)if(n=this[l],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(at," "):" ")){for(o=0;i=t[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");s=Z.trim(r),n.className!==s&&(n.className=s)}return this},removeClass:function(e){var t,n,r,i,o,s,a=0===arguments.length||"string"==typeof e&&e,l=0,u=this.length;if(Z.isFunction(e))return this.each(function(t){Z(this).removeClass(e.call(this,t,this.className))});if(a)for(t=(e||"").match(de)||[];u>l;l++)if(n=this[l],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(at," "):"")){for(o=0;i=t[o++];)for(;r.indexOf(" "+i+" ")>=0;)r=r.replace(" "+i+" "," ");s=e?Z.trim(r):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):Z.isFunction(e)?this.each(function(n){Z(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n)for(var t,r=0,i=Z(this),o=e.match(de)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else(n===Ne||"boolean"===n)&&(this.className&&ve.set(this,"__className__",this.className),this.className=this.className||e===!1?"":ve.get(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,r=this.length;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(at," ").indexOf(t)>=0)return!0;return!1}});var lt=/\r/g;Z.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=Z.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,Z(this).val()):e,null==i?i="":"number"==typeof i?i+="":Z.isArray(i)&&(i=Z.map(i,function(e){return null==e?"":e+""})),t=Z.valHooks[this.type]||Z.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=Z.valHooks[i.type]||Z.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(lt,""):null==n?"":n)}}}),Z.extend({valHooks:{option:{get:function(e){var t=Z.find.attr(e,"value");return null!=t?t:Z.trim(Z.text(e))}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,s=o?null:[],a=o?i+1:r.length,l=0>i?a:o?i:0;a>l;l++)if(n=r[l],(n.selected||l===i)&&(Q.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!Z.nodeName(n.parentNode,"optgroup"))){if(t=Z(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=Z.makeArray(t),s=i.length;s--;)r=i[s],(r.selected=Z.inArray(r.value,o)>=0)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),Z.each(["radio","checkbox"],function(){Z.valHooks[this]={set:function(e,t){return Z.isArray(t)?e.checked=Z.inArray(Z(e).val(),t)>=0:void 0}},Q.checkOn||(Z.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),Z.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){Z.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),Z.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var ut=Z.now(),ct=/\?/;Z.parseJSON=function(e){return JSON.parse(e+"")},Z.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,"text/xml")}catch(r){t=void 0}return(!t||t.getElementsByTagName("parsererror").length)&&Z.error("Invalid XML: "+e),t};var ft=/#.*$/,pt=/([?&])_=[^&]*/,dt=/^(.*?):[ \t]*([^\r\n]*)$/gm,ht=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,gt=/^(?:GET|HEAD)$/,mt=/^\/\//,vt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,yt={},xt={},bt="*/".concat("*"),wt=e.location.href,Ct=vt.exec(wt.toLowerCase())||[];Z.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt,type:"GET",isLocal:ht.test(Ct[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":Z.parseJSON,"text xml":Z.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?F(F(e,Z.ajaxSettings),t):F(Z.ajaxSettings,e)},ajaxPrefilter:$(yt),ajaxTransport:$(xt),ajax:function(e,t){function n(e,t,n,s){var l,c,v,y,b,C=t;2!==x&&(x=2,a&&clearTimeout(a),r=void 0,o=s||"",w.readyState=e>0?4:0,l=e>=200&&300>e||304===e,n&&(y=M(f,w,n)),y=W(f,y,w,l),l?(f.ifModified&&(b=w.getResponseHeader("Last-Modified"),b&&(Z.lastModified[i]=b),b=w.getResponseHeader("etag"),b&&(Z.etag[i]=b)),204===e||"HEAD"===f.type?C="nocontent":304===e?C="notmodified":(C=y.state,c=y.data,v=y.error,l=!v)):(v=C,(e||!C)&&(C="error",0>e&&(e=0))),w.status=e,w.statusText=(t||C)+"",l?h.resolveWith(p,[c,C,w]):h.rejectWith(p,[w,C,v]),w.statusCode(m),m=void 0,u&&d.trigger(l?"ajaxSuccess":"ajaxError",[w,f,l?c:v]),g.fireWith(p,[w,C]),u&&(d.trigger("ajaxComplete",[w,f]),--Z.active||Z.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,s,a,l,u,c,f=Z.ajaxSetup({},t),p=f.context||f,d=f.context&&(p.nodeType||p.jquery)?Z(p):Z.event,h=Z.Deferred(),g=Z.Callbacks("once memory"),m=f.statusCode||{},v={},y={},x=0,b="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!s)for(s={};t=dt.exec(o);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?o:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=y[n]=y[n]||e,v[e]=t),this},overrideMimeType:function(e){return x||(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>x)for(t in e)m[t]=[m[t],e[t]];else w.always(e[w.status]);return this},abort:function(e){var t=e||b;return r&&r.abort(t),n(0,t),this}};if(h.promise(w).complete=g.add,w.success=w.done,w.error=w.fail,f.url=((e||f.url||wt)+"").replace(ft,"").replace(mt,Ct[1]+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=Z.trim(f.dataType||"*").toLowerCase().match(de)||[""],null==f.crossDomain&&(l=vt.exec(f.url.toLowerCase()),f.crossDomain=!(!l||l[1]===Ct[1]&&l[2]===Ct[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(Ct[3]||("http:"===Ct[1]?"80":"443")))),f.data&&f.processData&&"string"!=typeof f.data&&(f.data=Z.param(f.data,f.traditional)),P(yt,f,t,w),2===x)return w;u=Z.event&&f.global,u&&0===Z.active++&&Z.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!gt.test(f.type),i=f.url,f.hasContent||(f.data&&(i=f.url+=(ct.test(i)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=pt.test(i)?i.replace(pt,"$1_="+ut++):i+(ct.test(i)?"&":"?")+"_="+ut++)),f.ifModified&&(Z.lastModified[i]&&w.setRequestHeader("If-Modified-Since",Z.lastModified[i]),Z.etag[i]&&w.setRequestHeader("If-None-Match",Z.etag[i])),(f.data&&f.hasContent&&f.contentType!==!1||t.contentType)&&w.setRequestHeader("Content-Type",f.contentType),w.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+bt+"; q=0.01":""):f.accepts["*"]);for(c in f.headers)w.setRequestHeader(c,f.headers[c]);if(f.beforeSend&&(f.beforeSend.call(p,w,f)===!1||2===x))return w.abort();b="abort";for(c in{success:1,error:1,complete:1})w[c](f[c]);if(r=P(xt,f,t,w)){w.readyState=1,u&&d.trigger("ajaxSend",[w,f]),f.async&&f.timeout>0&&(a=setTimeout(function(){w.abort("timeout")},f.timeout));try{x=1,r.send(v,n)}catch(C){if(!(2>x))throw C;n(-1,C)}}else n(-1,"No Transport");return w},getJSON:function(e,t,n){return Z.get(e,t,n,"json")},getScript:function(e,t){return Z.get(e,void 0,t,"script")}}),Z.each(["get","post"],function(e,t){Z[t]=function(e,n,r,i){return Z.isFunction(n)&&(i=i||r,r=n,n=void 0),Z.ajax({url:e,type:t,dataType:i,data:n,success:r})}}),Z._evalUrl=function(e){return Z.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},Z.fn.extend({wrapAll:function(e){var t;return Z.isFunction(e)?this.each(function(t){Z(this).wrapAll(e.call(this,t))}):(this[0]&&(t=Z(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return Z.isFunction(e)?this.each(function(t){Z(this).wrapInner(e.call(this,t))}):this.each(function(){var t=Z(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=Z.isFunction(e);return this.each(function(n){Z(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){Z.nodeName(this,"body")||Z(this).replaceWith(this.childNodes)}).end()}}),Z.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0},Z.expr.filters.visible=function(e){return!Z.expr.filters.hidden(e)};var Tt=/%20/g,kt=/\[\]$/,Nt=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,St=/^(?:input|select|textarea|keygen)/i;Z.param=function(e,t){var n,r=[],i=function(e,t){t=Z.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=Z.ajaxSettings&&Z.ajaxSettings.traditional),Z.isArray(e)||e.jquery&&!Z.isPlainObject(e))Z.each(e,function(){i(this.name,this.value)});else for(n in e)R(n,e[n],t,i);return r.join("&").replace(Tt,"+")},Z.fn.extend({serialize:function(){return Z.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=Z.prop(this,"elements");return e?Z.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!Z(this).is(":disabled")&&St.test(this.nodeName)&&!Et.test(e)&&(this.checked||!ke.test(e))}).map(function(e,t){var n=Z(this).val();return null==n?null:Z.isArray(n)?Z.map(n,function(e){return{name:t.name,value:e.replace(Nt,"\r\n")}}):{name:t.name,value:n.replace(Nt,"\r\n")}}).get()}}),Z.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(e){}};var Dt=0,jt={},At={0:200,1223:204},Lt=Z.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in jt)jt[e]()}),Q.cors=!!Lt&&"withCredentials"in Lt,Q.ajax=Lt=!!Lt,Z.ajaxTransport(function(e){var t;return Q.cors||Lt&&!e.crossDomain?{send:function(n,r){var i,o=e.xhr(),s=++Dt;if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)o[i]=e.xhrFields[i];e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(i in n)o.setRequestHeader(i,n[i]);t=function(e){return function(){t&&(delete jt[s],t=o.onload=o.onerror=null,"abort"===e?o.abort():"error"===e?r(o.status,o.statusText):r(At[o.status]||o.status,o.statusText,"string"==typeof o.responseText?{text:o.responseText}:void 0,o.getAllResponseHeaders()))}},o.onload=t(),o.onerror=t("error"),t=jt[s]=t("abort");try{o.send(e.hasContent&&e.data||null)}catch(a){if(t)throw a}},abort:function(){t&&t()}}:void 0}),Z.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return Z.globalEval(e),e}}}),Z.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),Z.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=Z("<script>").prop({async:!0,charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),J.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Ht=[],qt=/(=)\?(?=&|$)|\?\?/;Z.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ht.pop()||Z.expando+"_"+ut++;return this[e]=!0,e}}),Z.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(qt.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&qt.test(t.data)&&"data");return a||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=Z.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(qt,"$1"+i):t.jsonp!==!1&&(t.url+=(ct.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||Z.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Ht.push(i)),s&&Z.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),Z.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||J;var r=se.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=Z.buildFragment([e],t,i),i&&i.length&&Z(i).remove(),Z.merge([],r.childNodes))};var Ot=Z.fn.load;Z.fn.load=function(e,t,n){if("string"!=typeof e&&Ot)return Ot.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>=0&&(r=Z.trim(e.slice(a)),e=e.slice(0,a)),Z.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&Z.ajax({url:e,type:i,dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?Z("<div>").append(Z.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){s.each(n,o||[e.responseText,t,e])}),this},Z.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){Z.fn[t]=function(e){return this.on(t,e)}}),Z.expr.filters.animated=function(e){return Z.grep(Z.timers,function(t){return e===t.elem}).length};var $t=e.document.documentElement;Z.offset={setOffset:function(e,t,n){var r,i,o,s,a,l,u,c=Z.css(e,"position"),f=Z(e),p={};"static"===c&&(e.style.position="relative"),a=f.offset(),o=Z.css(e,"top"),l=Z.css(e,"left"),u=("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1,u?(r=f.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(l)||0),Z.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+i),"using"in t?t.using.call(e,p):f.css(p)}},Z.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){Z.offset.setOffset(this,e,t)});var t,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;if(o)return t=o.documentElement,Z.contains(t,r)?(typeof r.getBoundingClientRect!==Ne&&(i=r.getBoundingClientRect()),n=z(o),{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}):i},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===Z.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),Z.nodeName(e[0],"html")||(r=e.offset()),r.top+=Z.css(e[0],"borderTopWidth",!0),r.left+=Z.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-Z.css(n,"marginTop",!0),left:t.left-r.left-Z.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||$t;e&&!Z.nodeName(e,"html")&&"static"===Z.css(e,"position");)e=e.offsetParent;return e||$t})}}),Z.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,n){var r="pageYOffset"===n;Z.fn[t]=function(i){return me(this,function(t,i,o){var s=z(t);return void 0===o?s?s[n]:t[i]:void(s?s.scrollTo(r?e.pageXOffset:o,r?o:e.pageYOffset):t[i]=o)},t,i,arguments.length,null)}}),Z.each(["top","left"],function(e,t){Z.cssHooks[t]=C(Q.pixelPosition,function(e,n){return n?(n=w(e,t),_e.test(n)?Z(e).position()[t]+"px":n):void 0})}),Z.each({Height:"height",Width:"width"},function(e,t){Z.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){Z.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return me(this,function(t,n,r){var i;return Z.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?Z.css(t,n,s):Z.style(t,n,r,s)},t,o?r:void 0,o,null)}})}),Z.fn.size=function(){return this.length},Z.fn.andSelf=Z.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return Z});var Pt=e.jQuery,Ft=e.$;return Z.noConflict=function(t){return e.$===Z&&(e.$=Ft),t&&e.jQuery===Z&&(e.jQuery=Pt),Z},typeof t===Ne&&(e.jQuery=e.$=Z),Z}),function(e,t,n){"use strict";function r(t,r){var i=0;for((t.length===n||t===e)&&(t=[t]);t[i];)r.call(this,t[i],i),i++}function i(t){var n,r,o;t=t||{},o=t.$||o||e.jQuery,n=this instanceof o,n?t.root=r=this:r=o(t.root||t.scroller);var s=new i.fn.constructor(r,t,o);return s.autoUpdate&&s.autoUpdate(),s}function o(){return(new Date).getTime()}function s(n,i,o){n._eventHandlers=n._eventHandlers||[{element:n.scroller,handler:function(e){n.scroll(e)},type:"scroll"},{element:n.root,handler:function(){n.update()},type:"transitionend animationend"},{element:n.scroller,handler:function(){n.update()},type:"keyup"},{element:n.bar,handler:function(e){e.preventDefault(),n.selection(),n.drag.now=1,n.draggingCls&&t(n.bar).addClass(n.draggingCls)},type:"touchstart mousedown"},{element:document,handler:function(){n.selection(1),n.drag.now=0,n.draggingCls&&t(n.bar).removeClass(n.draggingCls)},type:"mouseup blur touchend"},{element:document,handler:function(e){2!=e.button&&n._pos0(e)},type:"touchstart mousedown"},{element:document,handler:function(e){n.drag.now&&n.drag(e)},type:"mousemove touchmove"},{element:e,handler:function(){n.update()},type:"resize"},{element:n.root,handler:function(){n.update()},type:"sizeChange"}],r(n._eventHandlers,function(e){e.element&&i(e.element,e.type,e.handler,o)})}function a(e,t,n,r){var i="data-baron-"+t+"-id";if("on"==n)e.setAttribute(i,r);else{if("off"!=n)return e.getAttribute(i);e.removeAttribute(i)}}function l(e){a(e.root,e.direction)&&console.log("Error! Baron for this node already initialized",e.root);var t=new m.prototype.constructor(e);return s(t,e.event,"on"),a(t.root,e.direction,"on",h.length),h.push(t),t.update(),t}function u(e){var t={};e=e||{};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}function c(e){var t=u(e);t.direction=t.direction||"v";var n=e.event||function(e,n,r,i){t.$(e)[i||"on"](n,r)};return t.event=function(e,t,i,o){r(e,function(e){n(e,t,i,o)})},t}function f(e){if(this.events&&this.events[e])for(var t=0;t<this.events[e].length;t++){var n=Array.prototype.slice.call(arguments,1);this.events[e][t].apply(this,n)}}if(e){var p=i,d=["left","top","right","bottom","width","height"],h=[],g={v:{x:"Y",pos:d[1],oppos:d[3],crossPos:d[0],crossOpPos:d[2],size:d[5],crossSize:d[4],client:"clientHeight",crossClient:"clientWidth",crossScroll:"scrollWidth",offset:"offsetHeight",crossOffset:"offsetWidth",offsetPos:"offsetTop",scroll:"scrollTop",scrollSize:"scrollHeight"},h:{x:"X",pos:d[0],oppos:d[2],crossPos:d[1],crossOpPos:d[3],size:d[4],crossSize:d[5],client:"clientWidth",crossClient:"clientHeight",crossScroll:"scrollHeight",offset:"offsetWidth",crossOffset:"offsetHeight",offsetPos:"offsetLeft",scroll:"scrollLeft",scrollSize:"scrollWidth"}};i._instances=h,i.fn={constructor:function(e,t,n){var i=c(t);i.$=n,this.length=0,r.call(this,e,function(e,n){var r=+a(e,i.direction);if(r==r&&h[r]&&!t)this[n]=h[r];else{var o=u(i);i.root&&i.scroller?(o.scroller=i.$(i.scroller,e),o.scroller.length||(o.scroller=e)):o.scroller=e,o.root=e,this[n]=l(o)}this.length=n+1}),this.params=i},dispose:function(){var e=this.params;r(this,function(t){t.dispose(e)}),this.params=null},update:function(){for(var e=0;this[e];)this[e].update.apply(this[e],arguments),e++},baron:function(e){return e.root=[],e.scroller=this.params.scroller,r.call(this,this,function(t){e.root.push(t.root)}),e.direction="v"==this.params.direction?"h":"v",e._chain=!0,i(e)}};var m={};m.prototype={_debounce:function(e,t){var n,r,i=this,s=function(){if(i._disposed)return clearTimeout(n),void(n=i=null);var a=o()-r;t>a&&a>=0?n=setTimeout(s,t-a):(n=null,e())};return function(){r=o(),n||(n=setTimeout(s,t))}},constructor:function(e){function t(e,t){return c(e,t)[0]}function r(e){var t=this.barMinSize||20;e>0&&t>e&&(e=t),this.bar&&c(this.bar).css(this.origin.size,parseInt(e,10)+"px")}function i(e){if(this.bar){var t=c(this.bar).css(this.origin.pos),n=+e+"px";n&&n!=t&&c(this.bar).css(this.origin.pos,n)}}function s(){return h[this.origin.client]-this.barTopLimit-this.bar[this.origin.offset]}function a(e){return e*s.call(this)+this.barTopLimit}function l(e){return(e-this.barTopLimit)/s.call(this)}function u(){return!1}var c,p,d,h,m,v,y,x,b,w,C;return w=b=o(),c=this.$=e.$,this.event=e.event,this.events={},this.root=e.root,this.scroller=t(e.scroller),this.bar=t(e.bar,this.root),h=this.track=t(e.track,this.root),!this.track&&this.bar&&(h=this.bar.parentNode),this.clipper=this.scroller.parentNode,this.direction=e.direction,this.origin=g[this.direction],this.barOnCls=e.barOnCls||"_baron",this.scrollingCls=e.scrollingCls,this.draggingCls=e.draggingCls,this.barTopLimit=0,x=1e3*e.pause||0,this.cursor=function(e){return e["client"+this.origin.x]||(((e.originalEvent||e).touches||{})[0]||{})["page"+this.origin.x]},this.pos=function(e){var t="page"+this.origin.x+"Offset",r=this.scroller[t]?t:this.origin.scroll;return e!==n&&(this.scroller[r]=e),this.scroller[r]},this.rpos=function(e){var t,n=this.scroller[this.origin.scrollSize]-this.scroller[this.origin.client];return t=e?this.pos(e*n):this.pos(),t/(n||1)},this.barOn=function(e){this.barOnCls&&(e||this.scroller[this.origin.client]>=this.scroller[this.origin.scrollSize]?c(this.root).hasClass(this.barOnCls)&&c(this.root).removeClass(this.barOnCls):c(this.root).hasClass(this.barOnCls)||c(this.root).addClass(this.barOnCls))},this._pos0=function(e){d=this.cursor(e)-p},this.drag=function(e){var t=l.call(this,this.cursor(e)-d),n=this.scroller[this.origin.scrollSize]-this.scroller[this.origin.client];this.scroller[this.origin.scroll]=t*n},this.selection=function(e){this.event(document,"selectpos selectstart",u,e?"off":"on")},this.resize=function(){function e(){var e,n,r,i;if(n=t.scroller[t.origin.crossOffset])if(t.barOn(),e=t.scroller[t.origin.crossClient],"v"==t.direction){var s=n-e;r=c(t.clipper).css(t.origin.crossSize),i=t.clipper[t.origin.crossClient]+s+"px",r!=i&&c(t.scroller).css(t.origin.crossSize,i)}else r=c(t.clipper).css(t.origin.crossSize),i=t.scroller[t.origin.crossClient]+"px",r!=i&&c(t.clipper).css(t.origin.crossSize,i);Array.prototype.unshift.call(arguments,"resize"),f.apply(t,arguments),w=o()}var t=this,n=0;o()-w<x&&(clearTimeout(m),n=x),n?m=setTimeout(e,n):e()},this.updatePositions=function(){var e,t=this;t.bar&&(e=(h[t.origin.client]-t.barTopLimit)*t.scroller[t.origin.client]/t.scroller[t.origin.scrollSize],parseInt(C,10)!=parseInt(e,10)&&(r.call(t,e),C=e),p=a.call(t,t.rpos()),i.call(t,p)),Array.prototype.unshift.call(arguments,"scroll"),f.apply(t,arguments),b=o()},this.scroll=function(){var e=0,t=this;o()-b<x&&(clearTimeout(v),e=x),e?v=setTimeout(function(){t.updatePositions()},e):t.updatePositions(),t.scrollingCls&&(y||this.$(this.scroller).addClass(this.scrollingCls),clearTimeout(y),y=setTimeout(function(){t.$(t.scroller).removeClass(t.scrollingCls),y=n},300))},this},update:function(e){return f.call(this,"upd",e),this.resize(1),this.updatePositions(),this},dispose:function(e){s(this,this.event,"off"),a(this.root,e.direction,"off"),this.$(this.scroller).css(this.origin.crossSize,""),this.barOn(!0),f.call(this,"dispose"),this._disposed=!0},on:function(e,t,n){for(var r=e.split(" "),i=0;i<r.length;i++)"init"==r[i]?t.call(this,n):(this.events[r[i]]=this.events[r[i]]||[],this.events[r[i]].push(function(e){t.call(this,e||n)}))}},i.fn.constructor.prototype=i.fn,m.prototype.constructor.prototype=m.prototype,i.noConflict=function(){return e.baron=p,i},i.version="0.7.10",t&&t.fn&&(t.fn.baron=i),e.baron=i,e.module&&module.exports&&(module.exports=i.noConflict())}}(window,window.$),function(e,t){var n=function(e){function n(e,n,r){var i=1==r?"pos":"oppos";a<(l.minView||0)&&(n=t),this.$(s[e]).css(this.origin.pos,"").css(this.origin.oppos,"").removeClass(l.outside),n!==t&&(n+="px",this.$(s[e]).css(this.origin[i],n).addClass(l.outside))}function r(e){try{i=document.createEvent("WheelEvent"),i.initWebKitWheelEvent(e.originalEvent.wheelDeltaX,e.originalEvent.wheelDeltaY),p.dispatchEvent(i),e.preventDefault()}catch(e){}}function o(e){var t;for(var n in e)l[n]=e[n];if(s=this.$(l.elements,this.scroller)){a=this.scroller[this.origin.client];for(var i=0;i<s.length;i++)t={},t[this.origin.size]=s[i][this.origin.offset],s[i].parentNode!==this.scroller&&this.$(s[i].parentNode).css(t),t={},t[this.origin.crossSize]=s[i].parentNode[this.origin.crossClient],this.$(s[i]).css(t),a-=s[i][this.origin.offset],f[i]=s[i].parentNode[this.origin.offsetPos],u[i]=u[i-1]||0,c[i]=c[i-1]||Math.min(f[i],0),s[i-1]&&(u[i]+=s[i-1][this.origin.offset],c[i]+=s[i-1][this.origin.offset]),(0!=i||0!=f[i])&&(this.event(s[i],"mousewheel",r,"off"),this.event(s[i],"mousewheel",r));l.limiter&&s[0]&&(this.track&&this.track!=this.scroller?(t={},t[this.origin.pos]=s[0].parentNode[this.origin.offset],this.$(this.track).css(t)):this.barTopLimit=s[0].parentNode[this.origin.offset],this.scroll()),l.limiter===!1&&(this.barTopLimit=0)}var o={element:s,handler:function(){for(var e,t=h(this)[0].parentNode,n=t.offsetTop,r=0;r<s.length;r++)s[r]===this&&(e=r);var i=n-u[e];l.scroll?l.scroll({x1:g.scroller.scrollTop,x2:i}):g.scroller.scrollTop=i},type:"click"};l.clickable&&(this._eventHandlers.push(o),d(o.element,o.type,o.handler,"on"))}var s,a,l={outside:"",inside:"",before:"",after:"",past:"",future:"",radius:0,minView:0},u=[],c=[],f=[],p=this.scroller,d=this.event,h=this.$,g=this;this.on("init",o,e);var m=[],v=[];this.on("init scroll",function(){var e,r,i;if(s){for(var o,p=0;p<s.length;p++)e=0,f[p]-this.pos()<c[p]+l.radius?(e=1,r=u[p]):f[p]-this.pos()>c[p]+a-l.radius?(e=2,r=this.scroller[this.origin.client]-s[p][this.origin.offset]-u[p]-a):(e=3,r=t),i=!1,(f[p]-this.pos()<c[p]||f[p]-this.pos()>c[p]+a)&&(i=!0),(e!=m[p]||i!=v[p])&&(n.call(this,p,r,e),m[p]=e,v[p]=i,o=!0);if(o)for(p=0;p<s.length;p++)1==m[p]&&l.past&&this.$(s[p]).addClass(l.past).removeClass(l.future),2==m[p]&&l.future&&this.$(s[p]).addClass(l.future).removeClass(l.past),3==m[p]?((l.future||l.past)&&this.$(s[p]).removeClass(l.past).removeClass(l.future),l.inside&&this.$(s[p]).addClass(l.inside)):l.inside&&this.$(s[p]).removeClass(l.inside),m[p]!=m[p+1]&&1==m[p]&&l.before?this.$(s[p]).addClass(l.before).removeClass(l.after):m[p]!=m[p-1]&&2==m[p]&&l.after?this.$(s[p]).addClass(l.after).removeClass(l.before):this.$(s[p]).removeClass(l.before).removeClass(l.after),l.grad&&(v[p]?this.$(s[p]).addClass(l.grad):this.$(s[p]).removeClass(l.grad))}}),this.on("resize upd",function(e){o.call(this,e&&e.fix)})};baron.fn.fix=function(e){for(var t=0;this[t];)n.call(this[t],e),t++;return this}}(window),function(e){var t=e.MutationObserver||e.WebKitMutationObserver||e.MozMutationObserver||null,n=function(){function e(){o.root[o.origin.offset]?r():n()}function n(){i||(i=setInterval(function(){o.root[o.origin.offset]&&(r(),o.update())},300))}function r(){clearInterval(i),i=null}var i,o=this,s=o._debounce(function(){o.update()},300);this._observer=new t(function(){e(),o.update(),s()}),this.on("init",function(){o._observer.observe(o.root,{childList:!0,subtree:!0,characterData:!0}),e()}),this.on("dispose",function(){o._observer.disconnect(),r(),delete o._observer})};baron.fn.autoUpdate=function(e){if(!t)return this;for(var r=0;this[r];)n.call(this[r],e),r++;return this}}(window),function(e,t){var n=function(e){var t,n,r,i,o,s=this;i=e.screen||.9,e.forward&&(t=this.$(e.forward,this.clipper),o={element:t,handler:function(){var t=s.pos()-e.delta||30;s.pos(t)},type:"click"},this._eventHandlers.push(o),this.event(o.element,o.type,o.handler,"on")),e.backward&&(n=this.$(e.backward,this.clipper),o={element:n,handler:function(){var t=s.pos()+e.delta||30;s.pos(t)},type:"click"},this._eventHandlers.push(o),this.event(o.element,o.type,o.handler,"on")),e.track&&(r=e.track===!0?this.track:this.$(e.track,this.clipper)[0],r&&(o={element:r,handler:function(e){
var t=e["offset"+s.origin.x],n=s.bar[s.origin.offsetPos],r=0;n>t?r=-1:t>n+s.bar[s.origin.offset]&&(r=1);var o=s.pos()+r*i*s.scroller[s.origin.client];s.pos(o)},type:"mousedown"},this._eventHandlers.push(o),this.event(o.element,o.type,o.handler,"on")))};baron.fn.controls=function(e){for(var t=0;this[t];)n.call(this[t],e),t++;return this}}(window),function(e,t){var n=function(e){function t(){return v.scroller[v.origin.scroll]+v.scroller[v.origin.offset]}function n(){return v.scroller[v.origin.scrollSize]}function r(){return v.scroller[v.origin.client]}function i(e,t){var n=5e-4*e;return Math.floor(t-n*(e+550))}function o(e){c=e,e?(s(),a=setInterval(s,200)):clearInterval(a)}function s(){var s,a,c={},C=t(),T=n(),k=1==y;if(a=0,y>0&&(a=40),s=i(b,a),C>=T-b&&y>-1?k&&(b+=s):b=0,0>b&&(b=0),c[p]=b+"px",r()<=n()){v.$(f).css(c);for(var N=0;N<g.length;N++)v.$(g[N].self).css(g[N].property,Math.min(b/d*100,100)+"%")}m&&b&&v.$(v.root).addClass(m),0==b&&e.onCollapse&&e.onCollapse(),y=0,l=setTimeout(function(){y=-1},w),h&&b>d&&!u&&(h(),u=!0),0==b?x++:x=0,x>1&&(o(!1),u=!1,m&&v.$(v.root).removeClass(m))}var a,l,u,c,f=this.$(e.block),p=e.size||this.origin.size,d=e.limit||80,h=e.onExpand,g=e.elements||[],m=e.inProgress||"",v=this,y=0,x=0,b=0,w=e.waiting||500;this.on("init",function(){o(!0)}),this.on("dispose",function(){o(!1)}),this.event(this.scroller,"mousewheel DOMMouseScroll",function(e){var r=e.wheelDelta<0||e.originalEvent&&e.originalEvent.wheelDelta<0||e.detail>0;r&&(y=1,clearTimeout(l),!c&&t()>=n()&&o(!0))})};baron.fn.pull=function(e){for(var t=0;this[t];)n.call(this[t],e),t++;return this}}(window),$(function(){$(".js-main").on("click",function(){$(this).empty().addClass("btn_circle"),$(".main").toggleClass("processing"),$(".main__info").html("Processing<span>This may take few minutes. Please wait.</span>")}),$(".js-scroller").baron({scroller:".scroller",barOnCls:"baron-show-scroll",bar:".scroller__bar"}),$(".js-description-popup").each(function(e,t){new DescriptionPopup(t)})}),DescriptionPopup.prototype.proxy=function(e){return"string"==typeof e&&(e=this[e]),$.proxy(e,this)},DescriptionPopup.prototype.initContentHeight=function(){this.content.height(this.element.height()-this.content.position().top+parseInt(this.element.css("padding-top"))),setTimeout(this.proxy(function(){this.content.trigger("sizeChange")}),1)},DescriptionPopup.prototype.initBindings=function(){$(window).on("resize",this.proxy("initContentHeight")),$(".js-description-caller").off("descriptionPopup.click").on("click",this.proxy(function(e){e.preventDefault(),e.stopImmediatePropagation(),this.element.toggleClass("show")})),this.element.on("click",".js-description-close",this.proxy(function(e){e.preventDefault(),this.element.removeClass("show")})),this.element.on("click",function(e){e.stopImmediatePropagation()}),$(window).on("click",this.proxy(function(){this.element.removeClass("show")}))};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiRGVzY3JpcHRpb25Qb3B1cCIsImVsZW1lbnQiLCJ0aGlzIiwiJCIsImNvbnRlbnQiLCJmaW5kIiwiaW5pdENvbnRlbnRIZWlnaHQiLCJpbml0QmluZGluZ3MiLCJnbG9iYWwiLCJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsImRvY3VtZW50IiwidyIsIkVycm9yIiwid2luZG93Iiwibm9HbG9iYWwiLCJpc0FycmF5bGlrZSIsIm9iaiIsImxlbmd0aCIsInR5cGUiLCJqUXVlcnkiLCJpc1dpbmRvdyIsIm5vZGVUeXBlIiwid2lubm93IiwiZWxlbWVudHMiLCJxdWFsaWZpZXIiLCJub3QiLCJpc0Z1bmN0aW9uIiwiZ3JlcCIsImVsZW0iLCJpIiwiY2FsbCIsInJpc1NpbXBsZSIsInRlc3QiLCJmaWx0ZXIiLCJpbmRleE9mIiwic2libGluZyIsImN1ciIsImRpciIsImNyZWF0ZU9wdGlvbnMiLCJvcHRpb25zIiwib2JqZWN0Iiwib3B0aW9uc0NhY2hlIiwiZWFjaCIsIm1hdGNoIiwicm5vdHdoaXRlIiwiXyIsImZsYWciLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHkiLCJEYXRhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjYWNoZSIsImdldCIsImV4cGFuZG8iLCJ1aWQiLCJkYXRhQXR0ciIsImtleSIsImRhdGEiLCJuYW1lIiwidW5kZWZpbmVkIiwicmVwbGFjZSIsInJtdWx0aURhc2giLCJ0b0xvd2VyQ2FzZSIsImdldEF0dHJpYnV0ZSIsInJicmFjZSIsInBhcnNlSlNPTiIsImUiLCJkYXRhX3VzZXIiLCJzZXQiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJub2RlTmFtZSIsImZpcnN0Q2hpbGQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFwcGVuZENoaWxkIiwib3duZXJEb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsInJzY3JpcHRUeXBlTWFza2VkIiwiZXhlYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEdsb2JhbEV2YWwiLCJlbGVtcyIsInJlZkVsZW1lbnRzIiwibCIsImRhdGFfcHJpdiIsImNsb25lQ29weUV2ZW50Iiwic3JjIiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZXZlbnRzIiwiaGFzRGF0YSIsImFjY2VzcyIsImhhbmRsZSIsImV2ZW50IiwiYWRkIiwiZXh0ZW5kIiwiZ2V0QWxsIiwiY29udGV4dCIsInRhZyIsInJldCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtZXJnZSIsImZpeElucHV0IiwicmNoZWNrYWJsZVR5cGUiLCJjaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiYWN0dWFsRGlzcGxheSIsImRvYyIsInN0eWxlIiwiYXBwZW5kVG8iLCJib2R5IiwiZGlzcGxheSIsImdldERlZmF1bHRDb21wdXRlZFN0eWxlIiwiY3NzIiwiZGV0YWNoIiwiZGVmYXVsdERpc3BsYXkiLCJlbGVtZGlzcGxheSIsImlmcmFtZSIsImRvY3VtZW50RWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsIndyaXRlIiwiY2xvc2UiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFN0eWxlcyIsImdldFByb3BlcnR5VmFsdWUiLCJjb250YWlucyIsInJudW1ub25weCIsInJtYXJnaW4iLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImFwcGx5IiwiYXJndW1lbnRzIiwidmVuZG9yUHJvcE5hbWUiLCJjYXBOYW1lIiwidG9VcHBlckNhc2UiLCJzbGljZSIsIm9yaWdOYW1lIiwiY3NzUHJlZml4ZXMiLCJzZXRQb3NpdGl2ZU51bWJlciIsInZhbHVlIiwic3VidHJhY3QiLCJtYXRjaGVzIiwicm51bXNwbGl0IiwiTWF0aCIsIm1heCIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiZXh0cmEiLCJpc0JvcmRlckJveCIsInN0eWxlcyIsInZhbCIsImNzc0V4cGFuZCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzdXBwb3J0IiwiYm94U2l6aW5nUmVsaWFibGUiLCJwYXJzZUZsb2F0Iiwic2hvd0hpZGUiLCJzaG93IiwiaGlkZGVuIiwidmFsdWVzIiwiaW5kZXgiLCJpc0hpZGRlbiIsIlR3ZWVuIiwicHJvcCIsImVuZCIsImVhc2luZyIsInByb3RvdHlwZSIsImluaXQiLCJjcmVhdGVGeE5vdyIsInNldFRpbWVvdXQiLCJmeE5vdyIsIm5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwid2hpY2giLCJhdHRycyIsImhlaWdodCIsIm9wYWNpdHkiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsInR3ZWVuIiwiY29sbGVjdGlvbiIsInR3ZWVuZXJzIiwiY29uY2F0IiwiZGVmYXVsdFByZWZpbHRlciIsInByb3BzIiwib3B0cyIsInRvZ2dsZSIsImhvb2tzIiwib2xkZmlyZSIsImNoZWNrRGlzcGxheSIsImFuaW0iLCJvcmlnIiwiZGF0YVNob3ciLCJxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJlbXB0eSIsImZpcmUiLCJhbHdheXMiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInJmeHR5cGVzIiwiaXNFbXB0eU9iamVjdCIsImRvbmUiLCJoaWRlIiwicmVtb3ZlIiwic3RhcnQiLCJwcm9wRmlsdGVyIiwic3BlY2lhbEVhc2luZyIsImNhbWVsQ2FzZSIsImlzQXJyYXkiLCJjc3NIb29rcyIsImV4cGFuZCIsIkFuaW1hdGlvbiIsInByb3BlcnRpZXMiLCJyZXN1bHQiLCJzdG9wcGVkIiwiYW5pbWF0aW9uUHJlZmlsdGVycyIsImRlZmVycmVkIiwiRGVmZXJyZWQiLCJ0aWNrIiwiY3VycmVudFRpbWUiLCJyZW1haW5pbmciLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInRlbXAiLCJwZXJjZW50IiwidHdlZW5zIiwicnVuIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvbWlzZSIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsInB1c2giLCJzdG9wIiwiZ290b0VuZCIsInJlamVjdFdpdGgiLCJtYXAiLCJmeCIsInRpbWVyIiwicHJvZ3Jlc3MiLCJjb21wbGV0ZSIsImZhaWwiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJmdW5jIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJ1bnNoaWZ0IiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3QiLCJzZWxlY3RlZCIsImluc3BlY3RlZCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJzZWVraW5nVHJhbnNwb3J0IiwidHJhbnNwb3J0cyIsImFqYXhFeHRlbmQiLCJ0YXJnZXQiLCJkZWVwIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwicyIsInJlc3BvbnNlcyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJjb250ZW50cyIsInNoaWZ0IiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsInJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsInRtcCIsInByZXYiLCJyZXNwb25zZUZpZWxkcyIsImRhdGFGaWx0ZXIiLCJzcGxpdCIsInN0YXRlIiwiZXJyb3IiLCJidWlsZFBhcmFtcyIsInByZWZpeCIsInRyYWRpdGlvbmFsIiwidiIsInJicmFja2V0IiwiZ2V0V2luZG93IiwiZGVmYXVsdFZpZXciLCJhcnIiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsInZlcnNpb24iLCJzZWxlY3RvciIsImZuIiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJjYWxsYmFjayIsImFyZ3MiLCJmaXJzdCIsImVxIiwibGFzdCIsImxlbiIsImoiLCJzb3J0Iiwic3BsaWNlIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJpc1BsYWluT2JqZWN0IiwicmFuZG9tIiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJBcnJheSIsImlzTnVtZXJpYyIsImdsb2JhbEV2YWwiLCJjb2RlIiwic2NyaXB0IiwiaW5kaXJlY3QiLCJldmFsIiwidHJpbSIsInRleHQiLCJoZWFkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwic3RyaW5nIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJwcm94eSIsIkRhdGUiLCJTaXp6bGUiLCJzZWVkIiwibSIsImdyb3VwcyIsIm9sZCIsIm5pZCIsIm5ld0NvbnRleHQiLCJuZXdTZWxlY3RvciIsInByZWZlcnJlZERvYyIsInNldERvY3VtZW50IiwiZG9jdW1lbnRJc0hUTUwiLCJycXVpY2tFeHByIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJyYnVnZ3lRU0EiLCJ0b2tlbml6ZSIsInJlc2NhcGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b1NlbGVjdG9yIiwicnNpYmxpbmciLCJ0ZXN0Q29udGV4dCIsImpvaW4iLCJxc2FFcnJvciIsInNlbGVjdCIsImNyZWF0ZUNhY2hlIiwia2V5cyIsIkV4cHIiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImRpdiIsImFkZEhhbmRsZSIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiYSIsImIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJNQVhfTkVHQVRJVkUiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwic2V0RmlsdGVycyIsInRva2VucyIsImFkZENvbWJpbmF0b3IiLCJtYXRjaGVyIiwiY29tYmluYXRvciIsImJhc2UiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJ4bWwiLCJvbGRDYWNoZSIsIm91dGVyQ2FjaGUiLCJuZXdDYWNoZSIsImRpcnJ1bnMiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwibXVsdGlwbGVDb250ZXh0cyIsImNvbnRleHRzIiwiY29uZGVuc2UiLCJ1bm1hdGNoZWQiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicHJlRmlsdGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJyZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJvdXRlcm1vc3RDb250ZXh0IiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsInBvcCIsInVuaXF1ZVNvcnQiLCJnZXRUZXh0IiwiaXNYTUwiLCJjb21waWxlIiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwiZG9jRWxlbSIsInJidWdneU1hdGNoZXMiLCJjbGFzc0NhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJzb3J0T3JkZXIiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJjaGFyYWN0ZXJFbmNvZGluZyIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJjaGlsZE5vZGVzIiwiZWxzIiwibm9kZSIsImhhc0NvbXBhcmUiLCJwYXJlbnQiLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsImlubmVySFRNTCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJleHByIiwiYXR0ciIsInNwZWNpZmllZCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50Iiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIiAiLCIrIiwifiIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJub2RlSW5kZXgiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInBzZXVkbyIsImlkeCIsIm1hdGNoZWQiLCJoYXMiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJyb290IiwiZm9jdXMiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJkaXNhYmxlZCIsInNlbGVjdGVkSW5kZXgiLCJoZWFkZXIiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInRva2VuIiwiY29tcGlsZWQiLCJkaXYxIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInNlbGYiLCJpcyIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJuZXh0IiwidW50aWwiLCJ0cnVuY2F0ZSIsIm4iLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInBvcyIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJzaWJsaW5ncyIsInJldmVyc2UiLCJDYWxsYmFja3MiLCJtZW1vcnkiLCJmaXJlZCIsImZpcmluZyIsImZpcmluZ1N0YXJ0IiwiZmlyaW5nTGVuZ3RoIiwiZmlyaW5nSW5kZXgiLCJzdGFjayIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImRpc2FibGUiLCJsb2NrIiwibG9ja2VkIiwiZmlyZVdpdGgiLCJ0dXBsZXMiLCJ0aGVuIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vdGlmeSIsInBpcGUiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzdWJvcmRpbmF0ZSIsInByb2dyZXNzVmFsdWVzIiwicHJvZ3Jlc3NDb250ZXh0cyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJ1cGRhdGVGdW5jIiwicmVhZHlMaXN0IiwicmVhZHlXYWl0IiwiaG9sZFJlYWR5IiwiaG9sZCIsIndhaXQiLCJ0cmlnZ2VySGFuZGxlciIsIm9mZiIsInJlYWR5U3RhdGUiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJhY2NlcHREYXRhIiwib3duZXIiLCJhY2NlcHRzIiwiZGVzY3JpcHRvciIsInVubG9jayIsImRlZmluZVByb3BlcnRpZXMiLCJzdG9yZWQiLCJjYW1lbCIsImRpc2NhcmQiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImNhbWVsS2V5IiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwiZWwiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJzdHJ1bmRlZmluZWQiLCJmb2N1c2luQnViYmxlcyIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicmZvY3VzTW9ycGgiLCJydHlwZW5hbWVzcGFjZSIsInR5cGVzIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsInQiLCJoYW5kbGVPYmoiLCJzcGVjaWFsIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJ0cmlnZ2VyIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImV2ZW50UGF0aCIsIkV2ZW50IiwiaXNUcmlnZ2VyIiwibmFtZXNwYWNlX3JlIiwibm9CdWJibGUiLCJwYXJlbnRXaW5kb3ciLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiX2RlZmF1bHQiLCJmaXgiLCJoYW5kbGVyUXVldWUiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwic2VsIiwiZml4SG9va3MiLCJrZXlIb29rcyIsIm9yaWdpbmFsIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwibW91c2VIb29rcyIsImV2ZW50RG9jIiwicGFnZVgiLCJjbGllbnRYIiwic2Nyb2xsTGVmdCIsImNsaWVudExlZnQiLCJwYWdlWSIsImNsaWVudFkiLCJzY3JvbGxUb3AiLCJjbGllbnRUb3AiLCJvcmlnaW5hbEV2ZW50IiwiZml4SG9vayIsImxvYWQiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInNpbXVsYXRlIiwiYnViYmxlIiwiaXNTaW11bGF0ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwidGltZVN0YW1wIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsImF0dGFjaGVzIiwib24iLCJvbmUiLCJvcmlnRm4iLCJyeGh0bWxUYWciLCJydGFnTmFtZSIsInJodG1sIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyc2NyaXB0VHlwZSIsInJjbGVhblNjcmlwdCIsIndyYXBNYXAiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJ3cmFwIiwibm9kZXMiLCJjcmVhdGVUZXh0Tm9kZSIsImNsZWFuRGF0YSIsImFwcGVuZCIsImRvbU1hbmlwIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwia2VlcERhdGEiLCJodG1sIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJfZXZhbFVybCIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsImluc2VydCIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlIiwiY3NzVGV4dCIsImNvbnRhaW5lciIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5SaWdodCIsIm1hcmdpbkRpdiIsIm1hcmdpblJpZ2h0Iiwic3dhcCIsInJkaXNwbGF5c3dhcCIsInJyZWxOdW0iLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJjc3NOdW1iZXIiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJjc3NQcm9wcyIsImZsb2F0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInN1ZmZpeCIsImV4cGFuZGVkIiwicGFydHMiLCJ1bml0IiwicHJvcEhvb2tzIiwiZWFzZWQiLCJzdGVwIiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJ0aW1lcklkIiwicmZ4bnVtIiwicnJ1biIsIioiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsIm9wdERpc2FibGVkIiwicmFkaW9WYWx1ZSIsIm5vZGVIb29rIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJwcm9wTmFtZSIsImF0dHJOYW1lcyIsInByb3BGaXgiLCJnZXR0ZXIiLCJyZm9jdXNhYmxlIiwicmVtb3ZlUHJvcCIsImZvciIsImNsYXNzIiwibm90eG1sIiwiaGFzQXR0cmlidXRlIiwicmNsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicHJvY2VlZCIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwibm9uY2UiLCJycXVlcnkiLCJKU09OIiwicGFyc2UiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJoYXNoIiwicnRzIiwicmhlYWRlcnMiLCJybG9jYWxQcm90b2NvbCIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJydXJsIiwicHJlZmlsdGVycyIsImFsbFR5cGVzIiwiYWpheExvY2F0aW9uIiwiYWpheExvY1BhcnRzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJqc29uIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1cyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJoZWFkZXJzIiwic3VjY2VzcyIsIm1vZGlmaWVkIiwic3RhdHVzVGV4dCIsInRpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJmaXJlR2xvYmFscyIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJyZXNwb25zZUhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJsbmFtZSIsIm92ZXJyaWRlTWltZVR5cGUiLCJhYm9ydCIsImZpbmFsVGV4dCIsIm1ldGhvZCIsImNyb3NzRG9tYWluIiwicGFyYW0iLCJoYXNDb250ZW50IiwiYmVmb3JlU2VuZCIsInNlbmQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGhyb3dzIiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsInIyMCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhocklkIiwieGhyQ2FsbGJhY2tzIiwieGhyU3VjY2Vzc1N0YXR1cyIsMTIyMywieGhyU3VwcG9ydGVkIiwiY29ycyIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJyZXNwb25zZVRleHQiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwiX2xvYWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsImN1ckVsZW0iLCJsZWZ0IiwidXNpbmciLCJ3aW4iLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwic2l6ZSIsImFuZFNlbGYiLCJkZWZpbmUiLCJhbWQiLCJfalF1ZXJ5IiwiXyQiLCJub0NvbmZsaWN0IiwiaXRlcmF0b3IiLCJiYXJvbiIsImpRdWVyeU1vZGUiLCJyb290cyIsInNjcm9sbGVyIiwiaW5zdGFuY2UiLCJhdXRvVXBkYXRlIiwiZ2V0VGltZSIsIm1hbmFnZUV2ZW50cyIsIml0ZW0iLCJldmVudE1hbmFnZXIiLCJtb2RlIiwiX2V2ZW50SGFuZGxlcnMiLCJzY3JvbGwiLCJ1cGRhdGUiLCJiYXIiLCJkcmFnIiwiZHJhZ2dpbmdDbHMiLCJfcG9zMCIsIm1hbmFnZUF0dHIiLCJkaXJlY3Rpb24iLCJhdHRyTmFtZSIsImNvbnNvbGUiLCJsb2ciLCJvdXQiLCJpbnN0YW5jZXMiLCJvdXRwdXQiLCJ2YWxpZGF0ZSIsImV2ZW50TmFtZSIsIl9iYXJvbiIsIm9yaWdpbiIsIngiLCJvcHBvcyIsImNyb3NzUG9zIiwiY3Jvc3NPcFBvcyIsImNyb3NzU2l6ZSIsImNsaWVudCIsImNyb3NzQ2xpZW50IiwiY3Jvc3NTY3JvbGwiLCJjcm9zc09mZnNldCIsIm9mZnNldFBvcyIsInNjcm9sbFNpemUiLCJoIiwiX2luc3RhbmNlcyIsImxvY2FsUGFyYW1zIiwiZGlzcG9zZSIsIl9jaGFpbiIsIl9kZWJvdW5jZSIsInRpbWVzdGFtcCIsImxhdGVyIiwiX2Rpc3Bvc2VkIiwiZ2V0Tm9kZSIsInNldEJhclNpemUiLCJiYXJNaW5TaXplIiwicGFyc2VJbnQiLCJwb3NCYXIiLCJ3YXMiLCJ3aWxsIiwiayIsInRyYWNrIiwiYmFyVG9wTGltaXQiLCJyZWxUb1BvcyIsInIiLCJwb3NUb1JlbCIsImRvbnRQb3NTZWxlY3QiLCJiYXJQb3MiLCJzY3JvbGxlclBvczAiLCJyZXNpemVQYXVzZVRpbWVyIiwic2Nyb2xsUGF1c2VUaW1lciIsInNjcm9sbGluZ1RpbWVyIiwicGF1c2UiLCJzY3JvbGxMYXN0RmlyZSIsInJlc2l6ZUxhc3RGaXJlIiwib2xkQmFyU2l6ZSIsImNsaXBwZXIiLCJiYXJPbkNscyIsInNjcm9sbGluZ0NscyIsImN1cnNvciIsInRvdWNoZXMiLCJpZSIsInJwb3MiLCJmcmVlIiwiYmFyT24iLCJyZWwiLCJlbmFibGUiLCJyZXNpemUiLCJ1cGQiLCJkZWx0YSIsInVwZGF0ZVBvc2l0aW9ucyIsIm5ld0JhclNpemUiLCJuYW1lcyIsInVzZXJBcmciLCJ1c2VyUGFyYW1zIiwiZml4RWxlbWVudCIsIm9yaSIsInZpZXdQb3J0U2l6ZSIsIm1pblZpZXciLCJvdXRzaWRlIiwiYnViYmxlV2hlZWwiLCJjcmVhdGVFdmVudCIsImluaXRXZWJLaXRXaGVlbEV2ZW50Iiwid2hlZWxEZWx0YVgiLCJ3aGVlbERlbHRhWSIsImRpc3BhdGNoRXZlbnQiLCJfcGFyYW1zIiwiaGVhZGVyVG9wcyIsInRvcEZpeEhlaWdodHMiLCJ0b3BSZWFsSGVpZ2h0cyIsIm1pbiIsImxpbWl0ZXIiLCJvZmZzZXRUb3AiLCJ4MSIsIngyIiwiY2xpY2thYmxlIiwiaW5zaWRlIiwicGFzdCIsImZ1dHVyZSIsInJhZGl1cyIsImZpeEZsYWciLCJncmFkRmxhZyIsImZpeFN0YXRlIiwiaFRvcCIsImdyYWRTdGF0ZSIsImNoYW5nZSIsImdyYWQiLCJ1cGRQYXJhbXMiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIk1vek11dGF0aW9uT2JzZXJ2ZXIiLCJhY3R1YWxpemVXYXRjaGVyIiwic3RvcFdhdGNoIiwic3RhcnRXYXRjaCIsIndhdGNoZXIiLCJkZWJvdW5jZWRVcGRhdGVyIiwiX29ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJjaGFyYWN0ZXJEYXRhIiwiZGlzY29ubmVjdCIsImNvbnRyb2xzIiwiYmFja3dhcmQiLCJzY3JlZW4iLCJ5IiwieEJhciIsInNpZ24iLCJwdWxsIiwiZ2V0U2l6ZSIsImdldENvbnRlbnRTaXplIiwiZ2V0U2Nyb2xsZXJTaXplIiwiZm9yY2UiLCJmbG9vciIsIl9vbiIsIl9pbnRlcnZhbCIsImR4Iiwib3A0Iiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsSW5Qcm9ncmVzcyIsIl9pbnNpc3RlbmNlIiwiX3giLCJibG9jayIsInByb3BlcnR5IiwibGltaXQiLCJpblByb2dyZXNzIiwib25Db2xsYXBzZSIsIl90aW1lciIsIl93YWl0aW5nIiwib25FeHBhbmQiLCJfb25FeHBhbmRDYWxsZWQiLCJfemVyb1hDb3VudCIsIndhaXRpbmciLCJkb3duIiwid2hlZWxEZWx0YSIsImRldGFpbCJdLCJtYXBwaW5ncyI6IkFBa3dVQSxRQUFTQSxrQkFBaUJDLEdBQ3RCQyxLQUFLRCxRQUFVRSxFQUFFRixHQUNqQkMsS0FBS0UsUUFBVUYsS0FBS0QsUUFBUUksS0FBSyw0QkFFakNILEtBQUtJLG9CQUNMSixLQUFLSyxnQkF6dlVSLFNBQVVDLEVBQVFDLEdBRUssZ0JBQVhDLFNBQWlELGdCQUFuQkEsUUFBT0MsUUFRaERELE9BQU9DLFFBQVVILEVBQU9JLFNBQ3ZCSCxFQUFTRCxHQUFRLEdBQ2pCLFNBQVVLLEdBQ1QsSUFBTUEsRUFBRUQsU0FDUCxLQUFNLElBQUlFLE9BQU8sMkNBRWxCLE9BQU9MLEdBQVNJLElBR2xCSixFQUFTRCxJQUlTLG1CQUFYTyxRQUF5QkEsT0FBU2IsS0FBTSxTQUFVYSxFQUFRQyxHQStlbkUsUUFBU0MsR0FBYUMsR0FNckIsR0FBSUMsR0FBUyxVQUFZRCxJQUFPQSxFQUFJQyxPQUNuQ0MsRUFBT0MsRUFBT0QsS0FBTUYsRUFFckIsT0FBYyxhQUFURSxHQUF1QkMsRUFBT0MsU0FBVUosSUFDckMsRUFHYyxJQUFqQkEsRUFBSUssVUFBa0JKLEdBQ25CLEVBR1EsVUFBVEMsR0FBK0IsSUFBWEQsR0FD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UUFBU2p5QixLQUFLdVgsTUFBTSxXQUM3QnZYLEtBQUtELFFBQVFvOEIsWUFBWSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjIuMS40XHJcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xyXG4gKlxyXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcclxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cclxuICpcclxuICogQ29weXJpZ2h0IDIwMDUsIDIwMTQgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcclxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxyXG4gKlxyXG4gKiBEYXRlOiAyMDE1LTA0LTI4VDE2OjAxWlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xyXG5cclxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxyXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cclxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXHJcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cclxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXHJcblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XHJcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxyXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xyXG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XHJcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xyXG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XHJcblx0XHRcdH07XHJcblx0fSBlbHNlIHtcclxuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xyXG5cdH1cclxuXHJcbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XHJcbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xyXG5cclxuLy8gU3VwcG9ydDogRmlyZWZveCAxOCtcclxuLy8gQ2FuJ3QgYmUgaW4gc3RyaWN0IG1vZGUsIHNldmVyYWwgbGlicyBpbmNsdWRpbmcgQVNQLk5FVCB0cmFjZVxyXG4vLyB0aGUgc3RhY2sgdmlhIGFyZ3VtZW50cy5jYWxsZXIuY2FsbGVlIGFuZCBGaXJlZm94IGRpZXMgaWZcclxuLy8geW91IHRyeSB0byB0cmFjZSB0aHJvdWdoIFwidXNlIHN0cmljdFwiIGNhbGwgY2hhaW5zLiAoIzEzMzM1KVxyXG4vL1xyXG5cclxudmFyIGFyciA9IFtdO1xyXG5cclxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xyXG5cclxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XHJcblxyXG52YXIgcHVzaCA9IGFyci5wdXNoO1xyXG5cclxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcclxuXHJcbnZhciBjbGFzczJ0eXBlID0ge307XHJcblxyXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xyXG5cclxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XHJcblxyXG52YXIgc3VwcG9ydCA9IHt9O1xyXG5cclxuXHJcblxyXG52YXJcclxuXHQvLyBVc2UgdGhlIGNvcnJlY3QgZG9jdW1lbnQgYWNjb3JkaW5nbHkgd2l0aCB3aW5kb3cgYXJndW1lbnQgKHNhbmRib3gpXHJcblx0ZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQsXHJcblxyXG5cdHZlcnNpb24gPSBcIjIuMS40XCIsXHJcblxyXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XHJcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xyXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXHJcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxyXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMVxyXG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxyXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxyXG5cclxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcclxuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxyXG5cdHJkYXNoQWxwaGEgPSAvLShbXFxkYS16XSkvZ2ksXHJcblxyXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcclxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xyXG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xyXG5cdH07XHJcblxyXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xyXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcclxuXHRqcXVlcnk6IHZlcnNpb24sXHJcblxyXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXHJcblxyXG5cdC8vIFN0YXJ0IHdpdGggYW4gZW1wdHkgc2VsZWN0b3JcclxuXHRzZWxlY3RvcjogXCJcIixcclxuXHJcblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXHJcblx0bGVuZ3RoOiAwLFxyXG5cclxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XHJcblx0fSxcclxuXHJcblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxyXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XHJcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xyXG5cdFx0cmV0dXJuIG51bSAhPSBudWxsID9cclxuXHJcblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcclxuXHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxyXG5cclxuXHRcdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxyXG5cdFx0XHRzbGljZS5jYWxsKCB0aGlzICk7XHJcblx0fSxcclxuXHJcblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xyXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxyXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xyXG5cclxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XHJcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XHJcblxyXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcclxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcclxuXHRcdHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xyXG5cclxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0sXHJcblxyXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXHJcblx0Ly8gKFlvdSBjYW4gc2VlZCB0aGUgYXJndW1lbnRzIHdpdGggYW4gYXJyYXkgb2YgYXJncywgYnV0IHRoaXMgaXNcclxuXHQvLyBvbmx5IHVzZWQgaW50ZXJuYWxseS4pXHJcblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrLCBhcmdzICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjaywgYXJncyApO1xyXG5cdH0sXHJcblxyXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xyXG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xyXG5cdFx0fSkpO1xyXG5cdH0sXHJcblxyXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XHJcblx0fSxcclxuXHJcblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcclxuXHR9LFxyXG5cclxuXHRsYXN0OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xyXG5cdH0sXHJcblxyXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcclxuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbal0gXSA6IFtdICk7XHJcblx0fSxcclxuXHJcblx0ZW5kOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcihudWxsKTtcclxuXHR9LFxyXG5cclxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXHJcblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXHJcblx0cHVzaDogcHVzaCxcclxuXHRzb3J0OiBhcnIuc29ydCxcclxuXHRzcGxpY2U6IGFyci5zcGxpY2VcclxufTtcclxuXHJcbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxyXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzBdIHx8IHt9LFxyXG5cdFx0aSA9IDEsXHJcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxyXG5cdFx0ZGVlcCA9IGZhbHNlO1xyXG5cclxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXHJcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdGRlZXAgPSB0YXJnZXQ7XHJcblxyXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxyXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XHJcblx0XHRpKys7XHJcblx0fVxyXG5cclxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcclxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKHRhcmdldCkgKSB7XHJcblx0XHR0YXJnZXQgPSB7fTtcclxuXHR9XHJcblxyXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxyXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xyXG5cdFx0dGFyZ2V0ID0gdGhpcztcclxuXHRcdGktLTtcclxuXHR9XHJcblxyXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xyXG5cdFx0aWYgKCAob3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdKSAhPSBudWxsICkge1xyXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XHJcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcclxuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcclxuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xyXG5cclxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXHJcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xyXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoY29weSkpICkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xyXG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNBcnJheShzcmMpID8gc3JjIDogW107XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxyXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xyXG5cclxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXHJcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3RcclxuXHRyZXR1cm4gdGFyZ2V0O1xyXG59O1xyXG5cclxualF1ZXJ5LmV4dGVuZCh7XHJcblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXHJcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcclxuXHJcblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcclxuXHRpc1JlYWR5OiB0cnVlLFxyXG5cclxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcclxuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XHJcblx0fSxcclxuXHJcblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcclxuXHJcblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdHJldHVybiBqUXVlcnkudHlwZShvYmopID09PSBcImZ1bmN0aW9uXCI7XHJcblx0fSxcclxuXHJcblx0aXNBcnJheTogQXJyYXkuaXNBcnJheSxcclxuXHJcblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xyXG5cdH0sXHJcblxyXG5cdGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8XCJcIilcclxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcclxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxyXG5cdFx0Ly8gYWRkaW5nIDEgY29ycmVjdHMgbG9zcyBvZiBwcmVjaXNpb24gZnJvbSBwYXJzZUZsb2F0ICgjMTUxMDApXHJcblx0XHRyZXR1cm4gIWpRdWVyeS5pc0FycmF5KCBvYmogKSAmJiAob2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKyAxKSA+PSAwO1xyXG5cdH0sXHJcblxyXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHQvLyBOb3QgcGxhaW4gb2JqZWN0czpcclxuXHRcdC8vIC0gQW55IG9iamVjdCBvciB2YWx1ZSB3aG9zZSBpbnRlcm5hbCBbW0NsYXNzXV0gcHJvcGVydHkgaXMgbm90IFwiW29iamVjdCBPYmplY3RdXCJcclxuXHRcdC8vIC0gRE9NIG5vZGVzXHJcblx0XHQvLyAtIHdpbmRvd1xyXG5cdFx0aWYgKCBqUXVlcnkudHlwZSggb2JqICkgIT09IFwib2JqZWN0XCIgfHwgb2JqLm5vZGVUeXBlIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxyXG5cdFx0XHRcdCFoYXNPd24uY2FsbCggb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgXCJpc1Byb3RvdHlwZU9mXCIgKSApIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElmIHRoZSBmdW5jdGlvbiBoYXNuJ3QgcmV0dXJuZWQgYWxyZWFkeSwgd2UncmUgY29uZmlkZW50IHRoYXRcclxuXHRcdC8vIHxvYmp8IGlzIGEgcGxhaW4gb2JqZWN0LCBjcmVhdGVkIGJ5IHt9IG9yIGNvbnN0cnVjdGVkIHdpdGggbmV3IE9iamVjdFxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSxcclxuXHJcblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdHZhciBuYW1lO1xyXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sXHJcblxyXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRpZiAoIG9iaiA9PSBudWxsICkge1xyXG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcclxuXHRcdH1cclxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wLCBpT1M8NiAoZnVuY3Rpb25pc2ggUmVnRXhwKVxyXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cclxuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgXCJvYmplY3RcIiA6XHJcblx0XHRcdHR5cGVvZiBvYmo7XHJcblx0fSxcclxuXHJcblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcclxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcclxuXHRcdHZhciBzY3JpcHQsXHJcblx0XHRcdGluZGlyZWN0ID0gZXZhbDtcclxuXHJcblx0XHRjb2RlID0galF1ZXJ5LnRyaW0oIGNvZGUgKTtcclxuXHJcblx0XHRpZiAoIGNvZGUgKSB7XHJcblx0XHRcdC8vIElmIHRoZSBjb2RlIGluY2x1ZGVzIGEgdmFsaWQsIHByb2xvZ3VlIHBvc2l0aW9uXHJcblx0XHRcdC8vIHN0cmljdCBtb2RlIHByYWdtYSwgZXhlY3V0ZSBjb2RlIGJ5IGluamVjdGluZyBhXHJcblx0XHRcdC8vIHNjcmlwdCB0YWcgaW50byB0aGUgZG9jdW1lbnQuXHJcblx0XHRcdGlmICggY29kZS5pbmRleE9mKFwidXNlIHN0cmljdFwiKSA9PT0gMSApIHtcclxuXHRcdFx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xyXG5cdFx0XHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcclxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBhdm9pZCB0aGUgRE9NIG5vZGUgY3JlYXRpb24sIGluc2VydGlvblxyXG5cdFx0XHQvLyBhbmQgcmVtb3ZhbCBieSB1c2luZyBhbiBpbmRpcmVjdCBnbG9iYWwgZXZhbFxyXG5cdFx0XHRcdGluZGlyZWN0KCBjb2RlICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXHJcblx0Ly8gU3VwcG9ydDogSUU5LTExK1xyXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcclxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XHJcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcclxuXHR9LFxyXG5cclxuXHRub2RlTmFtZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHR9LFxyXG5cclxuXHQvLyBhcmdzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XHJcblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2ssIGFyZ3MgKSB7XHJcblx0XHR2YXIgdmFsdWUsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoLFxyXG5cdFx0XHRpc0FycmF5ID0gaXNBcnJheWxpa2UoIG9iaiApO1xyXG5cclxuXHRcdGlmICggYXJncyApIHtcclxuXHRcdFx0aWYgKCBpc0FycmF5ICkge1xyXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xyXG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gQSBzcGVjaWFsLCBmYXN0LCBjYXNlIGZvciB0aGUgbW9zdCBjb21tb24gdXNlIG9mIGVhY2hcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmICggaXNBcnJheSApIHtcclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcclxuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBvYmo7XHJcblx0fSxcclxuXHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcclxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcclxuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xyXG5cdFx0XHRcIlwiIDpcclxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XHJcblx0fSxcclxuXHJcblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxyXG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcclxuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xyXG5cclxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XHJcblx0XHRcdGlmICggaXNBcnJheWxpa2UoIE9iamVjdChhcnIpICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXHJcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cclxuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXQ7XHJcblx0fSxcclxuXHJcblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcclxuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcclxuXHR9LFxyXG5cclxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XHJcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXHJcblx0XHRcdGogPSAwLFxyXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xyXG5cclxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xyXG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcclxuXHRcdH1cclxuXHJcblx0XHRmaXJzdC5sZW5ndGggPSBpO1xyXG5cclxuXHRcdHJldHVybiBmaXJzdDtcclxuXHR9LFxyXG5cclxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XHJcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxyXG5cdFx0XHRtYXRjaGVzID0gW10sXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXHJcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcclxuXHJcblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXHJcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxyXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xyXG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XHJcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbWF0Y2hlcztcclxuXHR9LFxyXG5cclxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcclxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcclxuXHRcdHZhciB2YWx1ZSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcclxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBlbGVtcyApLFxyXG5cdFx0XHRyZXQgPSBbXTtcclxuXHJcblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xyXG5cdFx0aWYgKCBpc0FycmF5ICkge1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcclxuXHJcblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xyXG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XHJcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XHJcblxyXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcclxuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcclxuXHRndWlkOiAxLFxyXG5cclxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcclxuXHQvLyBhcmd1bWVudHMuXHJcblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcclxuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xyXG5cclxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XHJcblx0XHRcdGNvbnRleHQgPSBmbjtcclxuXHRcdFx0Zm4gPSB0bXA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcclxuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXHJcblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTaW11bGF0ZWQgYmluZFxyXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xyXG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxyXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XHJcblxyXG5cdFx0cmV0dXJuIHByb3h5O1xyXG5cdH0sXHJcblxyXG5cdG5vdzogRGF0ZS5ub3csXHJcblxyXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXHJcblx0c3VwcG9ydDogc3VwcG9ydFxyXG59KTtcclxuXHJcbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxyXG5qUXVlcnkuZWFjaChcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3JcIi5zcGxpdChcIiBcIiksIGZ1bmN0aW9uKGksIG5hbWUpIHtcclxuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBpc0FycmF5bGlrZSggb2JqICkge1xyXG5cclxuXHQvLyBTdXBwb3J0OiBpT1MgOC4yIChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcclxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXHJcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXHJcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxyXG5cdHZhciBsZW5ndGggPSBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxyXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcclxuXHJcblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGlmICggb2JqLm5vZGVUeXBlID09PSAxICYmIGxlbmd0aCApIHtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcclxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XHJcbn1cclxudmFyIFNpenpsZSA9XHJcbi8qIVxyXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4yLjAtcHJlXHJcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXHJcbiAqXHJcbiAqIENvcHlyaWdodCAyMDA4LCAyMDE0IGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcclxuICpcclxuICogRGF0ZTogMjAxNC0xMi0xNlxyXG4gKi9cclxuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XHJcblxyXG52YXIgaSxcclxuXHRzdXBwb3J0LFxyXG5cdEV4cHIsXHJcblx0Z2V0VGV4dCxcclxuXHRpc1hNTCxcclxuXHR0b2tlbml6ZSxcclxuXHRjb21waWxlLFxyXG5cdHNlbGVjdCxcclxuXHRvdXRlcm1vc3RDb250ZXh0LFxyXG5cdHNvcnRJbnB1dCxcclxuXHRoYXNEdXBsaWNhdGUsXHJcblxyXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcclxuXHRzZXREb2N1bWVudCxcclxuXHRkb2N1bWVudCxcclxuXHRkb2NFbGVtLFxyXG5cdGRvY3VtZW50SXNIVE1MLFxyXG5cdHJidWdneVFTQSxcclxuXHRyYnVnZ3lNYXRjaGVzLFxyXG5cdG1hdGNoZXMsXHJcblx0Y29udGFpbnMsXHJcblxyXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcclxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxyXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcclxuXHRkaXJydW5zID0gMCxcclxuXHRkb25lID0gMCxcclxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcclxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcclxuXHRcdGlmICggYSA9PT0gYiApIHtcclxuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAwO1xyXG5cdH0sXHJcblxyXG5cdC8vIEdlbmVyYWwtcHVycG9zZSBjb25zdGFudHNcclxuXHRNQVhfTkVHQVRJVkUgPSAxIDw8IDMxLFxyXG5cclxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXHJcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcclxuXHRhcnIgPSBbXSxcclxuXHRwb3AgPSBhcnIucG9wLFxyXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXHJcblx0cHVzaCA9IGFyci5wdXNoLFxyXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxyXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxyXG5cdC8vIGh0dHA6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxyXG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcclxuXHRcdHZhciBpID0gMCxcclxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XHJcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiBpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gLTE7XHJcblx0fSxcclxuXHJcblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXHJcblxyXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcclxuXHJcblx0Ly8gV2hpdGVzcGFjZSBjaGFyYWN0ZXJzIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXHJcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcclxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXN5bnRheC8jY2hhcmFjdGVyc1xyXG5cdGNoYXJhY3RlckVuY29kaW5nID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcclxuXHJcblx0Ly8gTG9vc2VseSBtb2RlbGVkIG9uIENTUyBpZGVudGlmaWVyIGNoYXJhY3RlcnNcclxuXHQvLyBBbiB1bnF1b3RlZCB2YWx1ZSBzaG91bGQgYmUgYSBDU1MgaWRlbnRpZmllciBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xyXG5cdC8vIFByb3BlciBzeW50YXg6IGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxyXG5cdGlkZW50aWZpZXIgPSBjaGFyYWN0ZXJFbmNvZGluZy5yZXBsYWNlKCBcIndcIiwgXCJ3I1wiICksXHJcblxyXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xyXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcclxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXHJcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxyXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0XCIqXFxcXF1cIixcclxuXHJcblx0cHNldWRvcyA9IFwiOihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpKD86XFxcXCgoXCIgK1xyXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcclxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxyXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXHJcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcclxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcclxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcclxuXHRcdFwiLipcIiArXHJcblx0XHRcIilcXFxcKXwpXCIsXHJcblxyXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcclxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXHJcblxyXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxyXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxyXG5cclxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxyXG5cclxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxyXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcclxuXHJcblx0bWF0Y2hFeHByID0ge1xyXG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIilcIiApLFxyXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpXCIgKSxcclxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGNoYXJhY3RlckVuY29kaW5nLnJlcGxhY2UoIFwid1wiLCBcIncqXCIgKSArIFwiKVwiICksXHJcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXHJcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcclxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXHJcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXHJcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxyXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXHJcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcclxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcclxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXHJcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxyXG5cdH0sXHJcblxyXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxyXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXHJcblxyXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxyXG5cclxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcclxuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXHJcblxyXG5cdHJzaWJsaW5nID0gL1srfl0vLFxyXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXHJcblxyXG5cdC8vIENTUyBlc2NhcGVzIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcclxuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxyXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcclxuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XHJcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxyXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxyXG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXHJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XHJcblx0XHRcdGVzY2FwZWQgOlxyXG5cdFx0XHRoaWdoIDwgMCA/XHJcblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxyXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxyXG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxyXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xyXG5cdH0sXHJcblxyXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcclxuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxyXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxyXG5cdC8vIGVycm9yIGluIElFXHJcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0c2V0RG9jdW1lbnQoKTtcclxuXHR9O1xyXG5cclxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcclxudHJ5IHtcclxuXHRwdXNoLmFwcGx5KFxyXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxyXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcclxuXHQpO1xyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXHJcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxyXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XHJcbn0gY2F0Y2ggKCBlICkge1xyXG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cclxuXHJcblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxyXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xyXG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcclxuXHRcdH0gOlxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcclxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcclxuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxyXG5cdFx0XHRcdGkgPSAwO1xyXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcclxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxyXG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcclxuXHR2YXIgbWF0Y2gsIGVsZW0sIG0sIG5vZGVUeXBlLFxyXG5cdFx0Ly8gUVNBIHZhcnNcclxuXHRcdGksIGdyb3Vwcywgb2xkLCBuaWQsIG5ld0NvbnRleHQsIG5ld1NlbGVjdG9yO1xyXG5cclxuXHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcclxuXHR9XHJcblxyXG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xyXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xyXG5cdG5vZGVUeXBlID0gY29udGV4dC5ub2RlVHlwZTtcclxuXHJcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XHJcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0fVxyXG5cclxuXHRpZiAoICFzZWVkICYmIGRvY3VtZW50SXNIVE1MICkge1xyXG5cclxuXHRcdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgd2hlbiBwb3NzaWJsZSAoZS5nLiwgbm90IHVuZGVyIERvY3VtZW50RnJhZ21lbnQpXHJcblx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xyXG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiI0lEXCIpXHJcblx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XHJcblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICk7XHJcblx0XHRcdFx0XHQvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xyXG5cdFx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoalF1ZXJ5ICM2OTYzKVxyXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIElFLCBPcGVyYSwgYW5kIFdlYmtpdCByZXR1cm4gaXRlbXNcclxuXHRcdFx0XHRcdFx0Ly8gYnkgbmFtZSBpbnN0ZWFkIG9mIElEXHJcblx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIENvbnRleHQgaXMgbm90IGEgZG9jdW1lbnRcclxuXHRcdFx0XHRcdGlmICggY29udGV4dC5vd25lckRvY3VtZW50ICYmIChlbGVtID0gY29udGV4dC5vd25lckRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXHJcblx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiYgZWxlbS5pZCA9PT0gbSApIHtcclxuXHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCJUQUdcIilcclxuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XHJcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xyXG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cclxuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIi5DTEFTU1wiKVxyXG5cdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XHJcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFFTQSBwYXRoXHJcblx0XHRpZiAoIHN1cHBvcnQucXNhICYmICghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XHJcblx0XHRcdG5pZCA9IG9sZCA9IGV4cGFuZG87XHJcblx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xyXG5cdFx0XHRuZXdTZWxlY3RvciA9IG5vZGVUeXBlICE9PSAxICYmIHNlbGVjdG9yO1xyXG5cclxuXHRcdFx0Ly8gcVNBIHdvcmtzIHN0cmFuZ2VseSBvbiBFbGVtZW50LXJvb3RlZCBxdWVyaWVzXHJcblx0XHRcdC8vIFdlIGNhbiB3b3JrIGFyb3VuZCB0aGlzIGJ5IHNwZWNpZnlpbmcgYW4gZXh0cmEgSUQgb24gdGhlIHJvb3RcclxuXHRcdFx0Ly8gYW5kIHdvcmtpbmcgdXAgZnJvbSB0aGVyZSAoVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoZSB0ZWNobmlxdWUpXHJcblx0XHRcdC8vIElFIDggZG9lc24ndCB3b3JrIG9uIG9iamVjdCBlbGVtZW50c1xyXG5cdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcclxuXHJcblx0XHRcdFx0aWYgKCAob2xkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSkgKSB7XHJcblx0XHRcdFx0XHRuaWQgPSBvbGQucmVwbGFjZSggcmVzY2FwZSwgXCJcXFxcJCZcIiApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCBuaWQgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bmlkID0gXCJbaWQ9J1wiICsgbmlkICsgXCInXSBcIjtcclxuXHJcblx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XHJcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRncm91cHNbaV0gPSBuaWQgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHQ7XHJcblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbihcIixcIik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXHJcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdH0gY2F0Y2gocXNhRXJyb3IpIHtcclxuXHRcdFx0XHR9IGZpbmFsbHkge1xyXG5cdFx0XHRcdFx0aWYgKCAhb2xkICkge1xyXG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQWxsIG90aGVyc1xyXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbihzdHJpbmcsIE9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcclxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXHJcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcclxuXHR2YXIga2V5cyA9IFtdO1xyXG5cclxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcclxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXHJcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XHJcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xyXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcclxuXHR9XHJcblx0cmV0dXJuIGNhY2hlO1xyXG59XHJcblxyXG4vKipcclxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcclxuICovXHJcbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XHJcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XHJcblx0cmV0dXJuIGZuO1xyXG59XHJcblxyXG4vKipcclxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGRpdiBhbmQgZXhwZWN0cyBhIGJvb2xlYW4gcmVzdWx0XHJcbiAqL1xyXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xyXG5cdHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuXHR0cnkge1xyXG5cdFx0cmV0dXJuICEhZm4oIGRpdiApO1xyXG5cdH0gY2F0Y2ggKGUpIHtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9IGZpbmFsbHkge1xyXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIGRpdi5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZGl2ICk7XHJcblx0XHR9XHJcblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxyXG5cdFx0ZGl2ID0gbnVsbDtcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXHJcbiAqL1xyXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xyXG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXHJcblx0XHRpID0gYXR0cnMubGVuZ3RoO1xyXG5cclxuXHR3aGlsZSAoIGktLSApIHtcclxuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xyXG5cdH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcclxuICogQHBhcmFtIHtFbGVtZW50fSBhXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcclxuICovXHJcbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcclxuXHR2YXIgY3VyID0gYiAmJiBhLFxyXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0KCB+Yi5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKSAtXHJcblx0XHRcdCggfmEuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICk7XHJcblxyXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xyXG5cdGlmICggZGlmZiApIHtcclxuXHRcdHJldHVybiBkaWZmO1xyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcclxuXHRpZiAoIGN1ciApIHtcclxuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XHJcblx0XHRcdGlmICggY3VyID09PSBiICkge1xyXG5cdFx0XHRcdHJldHVybiAtMTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGEgPyAxIDogLTE7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcclxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcclxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcclxuXHR9O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XHJcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XHJcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcclxuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XHJcblx0XHRcdHZhciBqLFxyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXHJcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XHJcblxyXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcclxuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxyXG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcclxuICovXHJcbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xyXG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XHJcbn1cclxuXHJcbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXHJcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIERldGVjdHMgWE1MIG5vZGVzXHJcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcclxuICovXHJcbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxyXG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxyXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xyXG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XHJcbn07XHJcblxyXG4vKipcclxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XHJcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcclxuICovXHJcbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XHJcblx0dmFyIGhhc0NvbXBhcmUsIHBhcmVudCxcclxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcclxuXHJcblx0Ly8gSWYgbm8gZG9jdW1lbnQgYW5kIGRvY3VtZW50RWxlbWVudCBpcyBhdmFpbGFibGUsIHJldHVyblxyXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XHJcblx0fVxyXG5cclxuXHQvLyBTZXQgb3VyIGRvY3VtZW50XHJcblx0ZG9jdW1lbnQgPSBkb2M7XHJcblx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XHJcblx0cGFyZW50ID0gZG9jLmRlZmF1bHRWaWV3O1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRT44XHJcblx0Ly8gSWYgaWZyYW1lIGRvY3VtZW50IGlzIGFzc2lnbmVkIHRvIFwiZG9jdW1lbnRcIiB2YXJpYWJsZSBhbmQgaWYgaWZyYW1lIGhhcyBiZWVuIHJlbG9hZGVkLFxyXG5cdC8vIElFIHdpbGwgdGhyb3cgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gYWNjZXNzaW5nIFwiZG9jdW1lbnRcIiB2YXJpYWJsZSwgc2VlIGpRdWVyeSAjMTM5MzZcclxuXHQvLyBJRTYtOCBkbyBub3Qgc3VwcG9ydCB0aGUgZGVmYXVsdFZpZXcgcHJvcGVydHkgc28gcGFyZW50IHdpbGwgYmUgdW5kZWZpbmVkXHJcblx0aWYgKCBwYXJlbnQgJiYgcGFyZW50ICE9PSBwYXJlbnQudG9wICkge1xyXG5cdFx0Ly8gSUUxMSBkb2VzIG5vdCBoYXZlIGF0dGFjaEV2ZW50LCBzbyBhbGwgbXVzdCBzdWZmZXJcclxuXHRcdGlmICggcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XHJcblx0XHRcdHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xyXG5cdFx0fSBlbHNlIGlmICggcGFyZW50LmF0dGFjaEV2ZW50ICkge1xyXG5cdFx0XHRwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyogU3VwcG9ydCB0ZXN0c1xyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jICk7XHJcblxyXG5cdC8qIEF0dHJpYnV0ZXNcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDhcclxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcclxuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcclxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdGRpdi5jbGFzc05hbWUgPSBcImlcIjtcclxuXHRcdHJldHVybiAhZGl2LmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcclxuXHR9KTtcclxuXHJcblx0LyogZ2V0RWxlbWVudChzKUJ5KlxyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xyXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdGRpdi5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcclxuXHRcdHJldHVybiAhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XHJcblx0fSk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDEwXHJcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXHJcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbWF0aWNhbGx5LXNldCBuYW1lcyxcclxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3RcclxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlkID0gZXhwYW5kbztcclxuXHRcdHJldHVybiAhZG9jLmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2MuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XHJcblx0fSk7XHJcblxyXG5cdC8vIElEIGZpbmQgYW5kIGZpbHRlclxyXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xyXG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XHJcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XHJcblx0XHRcdFx0dmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xyXG5cdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXHJcblx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAjNjk2M1xyXG5cdFx0XHRcdHJldHVybiBtICYmIG0ucGFyZW50Tm9kZSA/IFsgbSBdIDogW107XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xyXG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XHJcblx0XHRcdH07XHJcblx0XHR9O1xyXG5cdH0gZWxzZSB7XHJcblx0XHQvLyBTdXBwb3J0OiBJRTYvN1xyXG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxyXG5cdFx0ZGVsZXRlIEV4cHIuZmluZFtcIklEXCJdO1xyXG5cclxuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xyXG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcclxuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XHJcblx0XHRcdH07XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0Ly8gVGFnXHJcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XHJcblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xyXG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcclxuXHJcblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxyXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcclxuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSA6XHJcblxyXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcclxuXHRcdFx0dmFyIGVsZW0sXHJcblx0XHRcdFx0dG1wID0gW10sXHJcblx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xyXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcclxuXHJcblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcclxuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xyXG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIHRtcDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdH07XHJcblxyXG5cdC8vIENsYXNzXHJcblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcclxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XHJcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3JcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcclxuXHJcblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcclxuXHRyYnVnZ3lNYXRjaGVzID0gW107XHJcblxyXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXHJcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXHJcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxyXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXHJcblx0Ly8gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XHJcblx0cmJ1Z2d5UVNBID0gW107XHJcblxyXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2MucXVlcnlTZWxlY3RvckFsbCApKSApIHtcclxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxyXG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxyXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2VcclxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XHJcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxyXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxyXG5cdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxyXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcclxuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcZl0nIG1zYWxsb3djYXB0dXJlPScnPlwiICtcclxuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XHJcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cclxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXHJcblx0XHRcdC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXHJcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XHJcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcclxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC4yKywgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjcrXHJcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXHJcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXHJcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXHJcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXHJcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcclxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2liaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXHJcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcclxuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XHJcblx0XHRcdHZhciBpbnB1dCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcclxuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcclxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXHJcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxyXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xyXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXHJcblx0XHRcdGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcclxuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcclxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxyXG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcclxuXHJcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXHJcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXHJcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGRpdiwgXCJkaXZcIiApO1xyXG5cclxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxyXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXHJcblx0XHRcdG1hdGNoZXMuY2FsbCggZGl2LCBcIltzIT0nJ106eFwiICk7XHJcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XHJcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcclxuXHJcblx0LyogQ29udGFpbnNcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xyXG5cclxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcclxuXHQvLyBQdXJwb3NlZnVsbHkgZG9lcyBub3QgaW1wbGVtZW50IGluY2x1c2l2ZSBkZXNjZW5kZW50XHJcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcclxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xyXG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXHJcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XHJcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxyXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cclxuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XHJcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcclxuXHRcdFx0KSk7XHJcblx0XHR9IDpcclxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cdFx0XHRpZiAoIGIgKSB7XHJcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9O1xyXG5cclxuXHQvKiBTb3J0aW5nXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXHJcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XHJcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblxyXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcclxuXHRcdGlmICggYSA9PT0gYiApIHtcclxuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxyXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xyXG5cdFx0aWYgKCBjb21wYXJlICkge1xyXG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XHJcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xyXG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXHJcblx0XHRcdDE7XHJcblxyXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXHJcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XHJcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcclxuXHJcblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxyXG5cdFx0XHRpZiAoIGEgPT09IGRvYyB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xyXG5cdFx0XHRcdHJldHVybiAtMTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIGIgPT09IGRvYyB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xyXG5cdFx0XHRcdHJldHVybiAxO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cclxuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XHJcblx0XHRcdFx0MDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XHJcblx0fSA6XHJcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XHJcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXHJcblx0XHRpZiAoIGEgPT09IGIgKSB7XHJcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBjdXIsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXHJcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcclxuXHRcdFx0YXAgPSBbIGEgXSxcclxuXHRcdFx0YnAgPSBbIGIgXTtcclxuXHJcblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxyXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XHJcblx0XHRcdHJldHVybiBhID09PSBkb2MgPyAtMSA6XHJcblx0XHRcdFx0YiA9PT0gZG9jID8gMSA6XHJcblx0XHRcdFx0YXVwID8gLTEgOlxyXG5cdFx0XHRcdGJ1cCA/IDEgOlxyXG5cdFx0XHRcdHNvcnRJbnB1dCA/XHJcblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxyXG5cdFx0XHRcdDA7XHJcblxyXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcclxuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xyXG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cclxuXHRcdGN1ciA9IGE7XHJcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XHJcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xyXG5cdFx0fVxyXG5cdFx0Y3VyID0gYjtcclxuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcclxuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcclxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xyXG5cdFx0XHRpKys7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGkgP1xyXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3JcclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XHJcblxyXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3RcclxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcclxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxyXG5cdFx0XHQwO1xyXG5cdH07XHJcblxyXG5cdHJldHVybiBkb2M7XHJcbn07XHJcblxyXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcclxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xyXG59O1xyXG5cclxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xyXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxyXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcclxuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XHJcblx0fVxyXG5cclxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcclxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XHJcblxyXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcclxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcclxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcclxuXHJcblx0XHR0cnkge1xyXG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XHJcblxyXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXHJcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcclxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XHJcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XHJcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2ggKGUpIHt9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xyXG59O1xyXG5cclxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XHJcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXHJcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcclxuXHR9XHJcblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XHJcbn07XHJcblxyXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxyXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcclxuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XHJcblx0fVxyXG5cclxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxyXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXHJcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XHJcblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XHJcblx0XHRcdHVuZGVmaW5lZDtcclxuXHJcblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cclxuXHRcdHZhbCA6XHJcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cclxuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XHJcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xyXG5cdFx0XHRcdHZhbC52YWx1ZSA6XHJcblx0XHRcdFx0bnVsbDtcclxufTtcclxuXHJcblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XHJcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XHJcbn07XHJcblxyXG4vKipcclxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xyXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xyXG4gKi9cclxuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcclxuXHR2YXIgZWxlbSxcclxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcclxuXHRcdGogPSAwLFxyXG5cdFx0aSA9IDA7XHJcblxyXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2VcclxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xyXG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xyXG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XHJcblxyXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xyXG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XHJcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xyXG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0d2hpbGUgKCBqLS0gKSB7XHJcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXHJcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XHJcblx0c29ydElucHV0ID0gbnVsbDtcclxuXHJcblx0cmV0dXJuIHJlc3VsdHM7XHJcbn07XHJcblxyXG4vKipcclxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcclxuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXHJcbiAqL1xyXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHR2YXIgbm9kZSxcclxuXHRcdHJldCA9IFwiXCIsXHJcblx0XHRpID0gMCxcclxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcclxuXHJcblx0aWYgKCAhbm9kZVR5cGUgKSB7XHJcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxyXG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XHJcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXHJcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XHJcblx0XHR9XHJcblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xyXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xyXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1MylcclxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXHJcblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xyXG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcclxuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcclxuXHR9XHJcblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXHJcblxyXG5cdHJldHVybiByZXQ7XHJcbn07XHJcblxyXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcclxuXHJcblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXHJcblx0Y2FjaGVMZW5ndGg6IDUwLFxyXG5cclxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcclxuXHJcblx0bWF0Y2g6IG1hdGNoRXhwcixcclxuXHJcblx0YXR0ckhhbmRsZToge30sXHJcblxyXG5cdGZpbmQ6IHt9LFxyXG5cclxuXHRyZWxhdGl2ZToge1xyXG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcclxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcclxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcclxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XHJcblx0fSxcclxuXHJcblx0cHJlRmlsdGVyOiB7XHJcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xyXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblxyXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxyXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblxyXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XHJcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcclxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXHJcblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXHJcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxyXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXHJcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXHJcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxyXG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcclxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcclxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcclxuXHRcdFx0Ki9cclxuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xyXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XHJcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XHJcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcclxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXHJcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcclxuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XHJcblxyXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcclxuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XHJcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcclxuXHRcdFx0dmFyIGV4Y2VzcyxcclxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcclxuXHJcblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcclxuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcclxuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XHJcblxyXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xyXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcclxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxyXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcclxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcclxuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcclxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcclxuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXHJcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGZpbHRlcjoge1xyXG5cclxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xyXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cclxuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XHJcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcclxuXHJcblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XHJcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxyXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcclxuXHJcblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XHJcblx0XHRcdFx0XHRmYWxzZTtcclxuXHRcdFx0fTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xyXG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxyXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcclxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcclxuXHJcblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cclxuXHJcblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0XHRcdH0gOlxyXG5cclxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHRcdFx0dmFyIGNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBkaWZmLCBub2RlSW5kZXgsIHN0YXJ0LFxyXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxyXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXHJcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxyXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcclxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcclxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxyXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXHJcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcclxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gcGFyZW50WyBleHBhbmRvIF0gfHwgKHBhcmVudFsgZXhwYW5kbyBdID0ge30pO1xyXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gb3V0ZXJDYWNoZVsgdHlwZSBdIHx8IFtdO1xyXG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWzBdID09PSBkaXJydW5zICYmIGNhY2hlWzFdO1xyXG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsyXTtcclxuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxyXG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHVzZUNhY2hlICYmIChjYWNoZSA9IChlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KSlbIHR5cGUgXSkgJiYgY2FjaGVbMF0gPT09IGRpcnJ1bnMgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IGNhY2hlWzFdO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKSBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcclxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJiArK2RpZmYgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQobm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxyXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XHJcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xyXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xyXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xyXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXHJcblx0XHRcdHZhciBhcmdzLFxyXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcclxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XHJcblxyXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XHJcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXHJcblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcclxuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXHJcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcclxuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcclxuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cclxuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGlkeCxcclxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXHJcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XHJcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGZuO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHBzZXVkb3M6IHtcclxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xyXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcclxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcclxuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXHJcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxyXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcclxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cclxuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0XHRcdHZhciBlbGVtLFxyXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXHJcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSkgOlxyXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XHJcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XHJcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxyXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xyXG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xyXG5cdFx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XHJcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSksXHJcblxyXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXHJcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxyXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcclxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXHJcblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cclxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcclxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cclxuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xyXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXHJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcclxuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XHJcblx0XHRcdH1cclxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xyXG5cdFx0XHRcdGRvIHtcclxuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xyXG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxyXG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHQvLyBNaXNjZWxsYW5lb3VzXHJcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXHJcblx0XHRcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBmYWxzZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJkaXNhYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWU7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXHJcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXHJcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxyXG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XHJcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gQ29udGVudHNcclxuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXHJcblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcclxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcclxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxyXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcclxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xyXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIGF0dHI7XHJcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxyXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxyXG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXHJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cclxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIFsgMCBdO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xyXG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcclxuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xyXG5cdFx0XHR2YXIgaSA9IDA7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xyXG5cdFx0XHR2YXIgaSA9IDE7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xyXG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XHJcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xyXG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XHJcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcclxuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XHJcblx0XHR9KVxyXG5cdH1cclxufTtcclxuXHJcbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xyXG5cclxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcclxuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XHJcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xyXG59XHJcbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XHJcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcclxufVxyXG5cclxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXHJcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxyXG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcclxuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcclxuXHJcbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XHJcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXHJcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxyXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xyXG5cclxuXHRpZiAoIGNhY2hlZCApIHtcclxuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XHJcblx0fVxyXG5cclxuXHRzb0ZhciA9IHNlbGVjdG9yO1xyXG5cdGdyb3VwcyA9IFtdO1xyXG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcclxuXHJcblx0d2hpbGUgKCBzb0ZhciApIHtcclxuXHJcblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXHJcblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcclxuXHRcdFx0aWYgKCBtYXRjaCApIHtcclxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxyXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xyXG5cdFx0XHR9XHJcblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XHJcblx0XHR9XHJcblxyXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xyXG5cclxuXHRcdC8vIENvbWJpbmF0b3JzXHJcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcclxuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XHJcblx0XHRcdHRva2Vucy5wdXNoKHtcclxuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcclxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2VcclxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBGaWx0ZXJzXHJcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xyXG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XHJcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XHJcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XHJcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xyXG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXHJcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3NcclxuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcclxuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcclxuXHRyZXR1cm4gcGFyc2VPbmx5ID9cclxuXHRcdHNvRmFyLmxlbmd0aCA6XHJcblx0XHRzb0ZhciA/XHJcblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XHJcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcclxuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcclxuXHRcdHNlbGVjdG9yID0gXCJcIjtcclxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcclxuXHR9XHJcblx0cmV0dXJuIHNlbGVjdG9yO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xyXG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcclxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGRpciA9PT0gXCJwYXJlbnROb2RlXCIsXHJcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcclxuXHJcblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xyXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSA6XHJcblxyXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHR2YXIgb2xkQ2FjaGUsIG91dGVyQ2FjaGUsXHJcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XHJcblxyXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBkaXIgY2FjaGluZ1xyXG5cdFx0XHRpZiAoIHhtbCApIHtcclxuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xyXG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XHJcblx0XHRcdFx0XHRcdGlmICggKG9sZENhY2hlID0gb3V0ZXJDYWNoZVsgZGlyIF0pICYmXHJcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXHJcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgZGlyIF0gPSBuZXdDYWNoZTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXHJcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxufVxyXG5cclxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xyXG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xyXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSA6XHJcblx0XHRtYXRjaGVyc1swXTtcclxufVxyXG5cclxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xyXG5cdHZhciBpID0gMCxcclxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcclxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XHJcblx0fVxyXG5cdHJldHVybiByZXN1bHRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xyXG5cdHZhciBlbGVtLFxyXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXHJcblx0XHRpID0gMCxcclxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXHJcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcclxuXHJcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcclxuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XHJcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcclxuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XHJcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XHJcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xyXG5cdH1cclxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcclxuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcclxuXHR9XHJcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xyXG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXHJcblx0XHRcdHByZU1hcCA9IFtdLFxyXG5cdFx0XHRwb3N0TWFwID0gW10sXHJcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXHJcblxyXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxyXG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXHJcblxyXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cclxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XHJcblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxyXG5cdFx0XHRcdGVsZW1zLFxyXG5cclxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xyXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXHJcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xyXG5cclxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxyXG5cdFx0XHRcdFx0W10gOlxyXG5cclxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxyXG5cdFx0XHRcdFx0cmVzdWx0cyA6XHJcblx0XHRcdFx0bWF0Y2hlckluO1xyXG5cclxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXHJcblx0XHRpZiAoIG1hdGNoZXIgKSB7XHJcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xyXG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcclxuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xyXG5cclxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxyXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XHJcblx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcclxuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHNlZWQgKSB7XHJcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XHJcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xyXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXHJcblx0XHRcdFx0XHR0ZW1wID0gW107XHJcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXHJcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcclxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XHJcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcclxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xyXG5cclxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxyXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xyXG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcclxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcclxuXHRcdFx0KTtcclxuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xyXG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xyXG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXHJcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxyXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcclxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXHJcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXHJcblxyXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcclxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xyXG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxyXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xyXG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxyXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxyXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XHJcblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcclxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcclxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXHJcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9IF07XHJcblxyXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xyXG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcclxuXHJcblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXHJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xyXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xyXG5cdFx0XHRcdGogPSArK2k7XHJcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XHJcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcclxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxyXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcclxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcclxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcclxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxyXG5cdFx0XHRcdFx0bWF0Y2hlcixcclxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxyXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxyXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XHJcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcclxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxyXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcclxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxyXG5cdFx0XHRcdGkgPSBcIjBcIixcclxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxyXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcclxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcclxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XHJcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcclxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxyXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcclxuXHJcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xyXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ICE9PSBkb2N1bWVudCAmJiBjb250ZXh0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xyXG5cdFx0XHQvLyBLZWVwIGBpYCBhIHN0cmluZyBpZiB0aGVyZSBhcmUgbm8gZWxlbWVudHMgc28gYG1hdGNoZWRDb3VudGAgd2lsbCBiZSBcIjAwXCIgYmVsb3dcclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXHJcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxyXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XHJcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcclxuXHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XHJcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xyXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XHJcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXHJcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XHJcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3RcclxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcclxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xyXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcclxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XHJcblx0XHRcdFx0aiA9IDA7XHJcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xyXG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggc2VlZCApIHtcclxuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcclxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXHJcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcclxuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XHJcblxyXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xyXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxyXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XHJcblxyXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xyXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcclxuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcclxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcclxuXHRcdH07XHJcblxyXG5cdHJldHVybiBieVNldCA/XHJcblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcclxuXHRcdHN1cGVyTWF0Y2hlcjtcclxufVxyXG5cclxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcclxuXHR2YXIgaSxcclxuXHRcdHNldE1hdGNoZXJzID0gW10sXHJcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcclxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcclxuXHJcblx0aWYgKCAhY2FjaGVkICkge1xyXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XHJcblx0XHRpZiAoICFtYXRjaCApIHtcclxuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcclxuXHRcdH1cclxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XHJcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XHJcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXHJcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcclxuXHJcblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cclxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xyXG5cdH1cclxuXHRyZXR1cm4gY2FjaGVkO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcclxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xyXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxyXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcclxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXHJcbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XHJcbiAqL1xyXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xyXG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxyXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3RvcixcclxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xyXG5cclxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcclxuXHJcblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgbm8gc2VlZCBhbmQgb25seSBvbmUgZ3JvdXBcclxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcclxuXHJcblx0XHQvLyBUYWtlIGEgc2hvcnRjdXQgYW5kIHNldCB0aGUgY29udGV4dCBpZiB0aGUgcm9vdCBzZWxlY3RvciBpcyBhbiBJRFxyXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xyXG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxyXG5cdFx0XHRcdHN1cHBvcnQuZ2V0QnlJZCAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmXHJcblx0XHRcdFx0RXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcclxuXHJcblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcclxuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHJcblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcclxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XHJcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xyXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XHJcblxyXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXHJcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XHJcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXHJcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXHJcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXHJcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XHJcblx0XHRcdFx0KSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XHJcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XHJcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xyXG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcclxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXHJcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxyXG5cdFx0c2VlZCxcclxuXHRcdGNvbnRleHQsXHJcblx0XHQhZG9jdW1lbnRJc0hUTUwsXHJcblx0XHRyZXN1bHRzLFxyXG5cdFx0cnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxyXG5cdCk7XHJcblx0cmV0dXJuIHJlc3VsdHM7XHJcbn07XHJcblxyXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xyXG5cclxuLy8gU29ydCBzdGFiaWxpdHlcclxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xyXG5cclxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xyXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXHJcbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xyXG5cclxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XHJcbnNldERvY3VtZW50KCk7XHJcblxyXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxyXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcclxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdjEgKSB7XHJcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXHJcblx0cmV0dXJuIGRpdjEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKSAmIDE7XHJcbn0pO1xyXG5cclxuLy8gU3VwcG9ydDogSUU8OFxyXG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxyXG4vLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XHJcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcclxuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xyXG59KSApIHtcclxuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XHJcblx0XHRpZiAoICFpc1hNTCApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxuLy8gU3VwcG9ydDogSUU8OVxyXG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXHJcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0ZGl2LmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcclxuXHRkaXYuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xyXG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xyXG59KSApIHtcclxuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xyXG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxuLy8gU3VwcG9ydDogSUU8OVxyXG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXHJcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdHJldHVybiBkaXYuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcclxufSkgKSB7XHJcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xyXG5cdFx0dmFyIHZhbDtcclxuXHRcdGlmICggIWlzWE1MICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcclxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XHJcblx0XHRcdFx0XHR2YWwudmFsdWUgOlxyXG5cdFx0XHRcdG51bGw7XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbnJldHVybiBTaXp6bGU7XHJcblxyXG59KSggd2luZG93ICk7XHJcblxyXG5cclxuXHJcbmpRdWVyeS5maW5kID0gU2l6emxlO1xyXG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XHJcbmpRdWVyeS5leHByW1wiOlwiXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XHJcbmpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcclxualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcclxualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xyXG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XHJcblxyXG5cclxuXHJcbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xyXG5cclxudmFyIHJzaW5nbGVUYWcgPSAoL148KFxcdyspXFxzKlxcLz8+KD86PFxcL1xcMT58KSQvKTtcclxuXHJcblxyXG5cclxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcclxuXHJcbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XHJcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xyXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XHJcblx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xyXG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XHJcblx0XHR9KTtcclxuXHJcblx0fVxyXG5cclxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xyXG5cdFx0fSk7XHJcblxyXG5cdH1cclxuXHJcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcclxuXHRcdH1cclxuXHJcblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPj0gMCApICE9PSBub3Q7XHJcblx0fSk7XHJcbn1cclxuXHJcbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcclxuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XHJcblxyXG5cdGlmICggbm90ICkge1xyXG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcclxuXHR9XHJcblxyXG5cdHJldHVybiBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSA/XHJcblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW10gOlxyXG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XHJcblx0XHR9KSk7XHJcbn07XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHR2YXIgaSxcclxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXHJcblx0XHRcdHJldCA9IFtdLFxyXG5cdFx0XHRzZWxmID0gdGhpcztcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTmVlZGVkIGJlY2F1c2UgJCggc2VsZWN0b3IsIGNvbnRleHQgKSBiZWNvbWVzICQoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApXHJcblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggbGVuID4gMSA/IGpRdWVyeS51bmlxdWUoIHJldCApIDogcmV0ICk7XHJcblx0XHRyZXQuc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yID8gdGhpcy5zZWxlY3RvciArIFwiIFwiICsgc2VsZWN0b3IgOiBzZWxlY3RvcjtcclxuXHRcdHJldHVybiByZXQ7XHJcblx0fSxcclxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSkgKTtcclxuXHR9LFxyXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUpICk7XHJcblx0fSxcclxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuICEhd2lubm93KFxyXG5cdFx0XHR0aGlzLFxyXG5cclxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxyXG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXHJcblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xyXG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XHJcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXHJcblx0XHRcdGZhbHNlXHJcblx0XHQpLmxlbmd0aDtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XHJcblxyXG5cclxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXHJcbnZhciByb290alF1ZXJ5LFxyXG5cclxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xyXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcclxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcclxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sXHJcblxyXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcclxuXHRcdHZhciBtYXRjaCwgZWxlbTtcclxuXHJcblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcclxuXHRcdGlmICggIXNlbGVjdG9yICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXHJcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0aWYgKCBzZWxlY3RvclswXSA9PT0gXCI8XCIgJiYgc2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiYgc2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XHJcblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcclxuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcclxuXHRcdFx0aWYgKCBtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpICkge1xyXG5cclxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcclxuXHRcdFx0XHRpZiAoIG1hdGNoWzFdICkge1xyXG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WzBdIDogY29udGV4dDtcclxuXHJcblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcclxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XHJcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXHJcblx0XHRcdFx0XHRcdG1hdGNoWzFdLFxyXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxyXG5cdFx0XHRcdFx0XHR0cnVlXHJcblx0XHRcdFx0XHQpICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxyXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWzFdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcclxuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsyXSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEJsYWNrYmVycnkgNC42XHJcblx0XHRcdFx0XHQvLyBnRUJJRCByZXR1cm5zIG5vZGVzIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgKCM2OTYzKVxyXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3RcclxuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xyXG5cdFx0XHRcdFx0XHR0aGlzWzBdID0gZWxlbTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR0aGlzLmNvbnRleHQgPSBkb2N1bWVudDtcclxuXHRcdFx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXHJcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xyXG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdGpRdWVyeSApLmZpbmQoIHNlbGVjdG9yICk7XHJcblxyXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcclxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXHJcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcclxuXHRcdFx0dGhpcy5jb250ZXh0ID0gdGhpc1swXSA9IHNlbGVjdG9yO1xyXG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcclxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxyXG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XHJcblx0XHRcdHJldHVybiB0eXBlb2Ygcm9vdGpRdWVyeS5yZWFkeSAhPT0gXCJ1bmRlZmluZWRcIiA/XHJcblx0XHRcdFx0cm9vdGpRdWVyeS5yZWFkeSggc2VsZWN0b3IgKSA6XHJcblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxyXG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHNlbGVjdG9yLnNlbGVjdG9yICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvci5zZWxlY3RvcjtcclxuXHRcdFx0dGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcclxuXHR9O1xyXG5cclxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxyXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcclxuXHJcbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2Vcclxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcclxuXHJcblxyXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXHJcblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcclxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xyXG5cdFx0Y2hpbGRyZW46IHRydWUsXHJcblx0XHRjb250ZW50czogdHJ1ZSxcclxuXHRcdG5leHQ6IHRydWUsXHJcblx0XHRwcmV2OiB0cnVlXHJcblx0fTtcclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdGRpcjogZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XHJcblx0XHR2YXIgbWF0Y2hlZCA9IFtdLFxyXG5cdFx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xyXG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG1hdGNoZWQ7XHJcblx0fSxcclxuXHJcblx0c2libGluZzogZnVuY3Rpb24oIG4sIGVsZW0gKSB7XHJcblx0XHR2YXIgbWF0Y2hlZCA9IFtdO1xyXG5cclxuXHRcdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XHJcblx0XHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xyXG5cdFx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG1hdGNoZWQ7XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcclxuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcclxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGkgPSAwO1xyXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbaV0gKSApIHtcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcclxuXHRcdHZhciBjdXIsXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXHJcblx0XHRcdG1hdGNoZWQgPSBbXSxcclxuXHRcdFx0cG9zID0gcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSB8fCB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiID9cclxuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9ycywgY29udGV4dCB8fCB0aGlzLmNvbnRleHQgKSA6XHJcblx0XHRcdFx0MDtcclxuXHJcblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdGZvciAoIGN1ciA9IHRoaXNbaV07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xyXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKHBvcyA/XHJcblx0XHRcdFx0XHRwb3MuaW5kZXgoY3VyKSA+IC0xIDpcclxuXHJcblx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcclxuXHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoY3VyLCBzZWxlY3RvcnMpKSApIHtcclxuXHJcblx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlKCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XHJcblx0fSxcclxuXHJcblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XHJcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cclxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XHJcblx0XHRpZiAoICFlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3JcclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcclxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXHJcblxyXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcclxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXHJcblx0XHQpO1xyXG5cdH0sXHJcblxyXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxyXG5cdFx0XHRqUXVlcnkudW5pcXVlKFxyXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcclxuXHRcdFx0KVxyXG5cdFx0KTtcclxuXHR9LFxyXG5cclxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xyXG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKHNlbGVjdG9yKVxyXG5cdFx0KTtcclxuXHR9XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XHJcblx0d2hpbGUgKCAoY3VyID0gY3VyW2Rpcl0pICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XHJcblx0cmV0dXJuIGN1cjtcclxufVxyXG5cclxualF1ZXJ5LmVhY2goe1xyXG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcclxuXHR9LFxyXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XHJcblx0fSxcclxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcclxuXHR9LFxyXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xyXG5cdH0sXHJcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XHJcblx0fSxcclxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XHJcblx0fSxcclxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XHJcblx0fSxcclxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xyXG5cdH0sXHJcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5zaWJsaW5nKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcclxuXHR9LFxyXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuc2libGluZyggZWxlbS5maXJzdENoaWxkICk7XHJcblx0fSxcclxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgalF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XHJcblx0fVxyXG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xyXG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcclxuXHJcblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcclxuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XHJcblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXHJcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcclxuXHRcdFx0XHRqUXVlcnkudW5pcXVlKCBtYXRjaGVkICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXHJcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcclxuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xyXG5cdH07XHJcbn0pO1xyXG52YXIgcm5vdHdoaXRlID0gKC9cXFMrL2cpO1xyXG5cclxuXHJcblxyXG4vLyBTdHJpbmcgdG8gT2JqZWN0IG9wdGlvbnMgZm9ybWF0IGNhY2hlXHJcbnZhciBvcHRpb25zQ2FjaGUgPSB7fTtcclxuXHJcbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzIGFuZCBzdG9yZSBpbiBjYWNoZVxyXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xyXG5cdHZhciBvYmplY3QgPSBvcHRpb25zQ2FjaGVbIG9wdGlvbnMgXSA9IHt9O1xyXG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XHJcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XHJcblx0fSk7XHJcblx0cmV0dXJuIG9iamVjdDtcclxufVxyXG5cclxuLypcclxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XHJcbiAqXHJcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XHJcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxyXG4gKlxyXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxyXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXHJcbiAqXHJcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XHJcbiAqXHJcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcclxuICpcclxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXHJcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcclxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXHJcbiAqXHJcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXHJcbiAqXHJcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxyXG4gKlxyXG4gKi9cclxualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xyXG5cclxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXHJcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxyXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XHJcblx0XHQoIG9wdGlvbnNDYWNoZVsgb3B0aW9ucyBdIHx8IGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSApIDpcclxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XHJcblxyXG5cdHZhciAvLyBMYXN0IGZpcmUgdmFsdWUgKGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHMpXHJcblx0XHRtZW1vcnksXHJcblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxyXG5cdFx0ZmlyZWQsXHJcblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXHJcblx0XHRmaXJpbmcsXHJcblx0XHQvLyBGaXJzdCBjYWxsYmFjayB0byBmaXJlICh1c2VkIGludGVybmFsbHkgYnkgYWRkIGFuZCBmaXJlV2l0aClcclxuXHRcdGZpcmluZ1N0YXJ0LFxyXG5cdFx0Ly8gRW5kIG9mIHRoZSBsb29wIHdoZW4gZmlyaW5nXHJcblx0XHRmaXJpbmdMZW5ndGgsXHJcblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSByZW1vdmUgaWYgbmVlZGVkKVxyXG5cdFx0ZmlyaW5nSW5kZXgsXHJcblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxyXG5cdFx0bGlzdCA9IFtdLFxyXG5cdFx0Ly8gU3RhY2sgb2YgZmlyZSBjYWxscyBmb3IgcmVwZWF0YWJsZSBsaXN0c1xyXG5cdFx0c3RhY2sgPSAhb3B0aW9ucy5vbmNlICYmIFtdLFxyXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3NcclxuXHRcdGZpcmUgPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHRcdFx0bWVtb3J5ID0gb3B0aW9ucy5tZW1vcnkgJiYgZGF0YTtcclxuXHRcdFx0ZmlyZWQgPSB0cnVlO1xyXG5cdFx0XHRmaXJpbmdJbmRleCA9IGZpcmluZ1N0YXJ0IHx8IDA7XHJcblx0XHRcdGZpcmluZ1N0YXJ0ID0gMDtcclxuXHRcdFx0ZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7XHJcblx0XHRcdGZpcmluZyA9IHRydWU7XHJcblx0XHRcdGZvciAoIDsgbGlzdCAmJiBmaXJpbmdJbmRleCA8IGZpcmluZ0xlbmd0aDsgZmlyaW5nSW5kZXgrKyApIHtcclxuXHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIGRhdGFbIDAgXSwgZGF0YVsgMSBdICkgPT09IGZhbHNlICYmIG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XHJcblx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTsgLy8gVG8gcHJldmVudCBmdXJ0aGVyIGNhbGxzIHVzaW5nIGFkZFxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGZpcmluZyA9IGZhbHNlO1xyXG5cdFx0XHRpZiAoIGxpc3QgKSB7XHJcblx0XHRcdFx0aWYgKCBzdGFjayApIHtcclxuXHRcdFx0XHRcdGlmICggc3RhY2subGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0XHRmaXJlKCBzdGFjay5zaGlmdCgpICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIGlmICggbWVtb3J5ICkge1xyXG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxyXG5cdFx0c2VsZiA9IHtcclxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxyXG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggbGlzdCApIHtcclxuXHRcdFx0XHRcdC8vIEZpcnN0LCB3ZSBzYXZlIHRoZSBjdXJyZW50IGxlbmd0aFxyXG5cdFx0XHRcdFx0dmFyIHN0YXJ0ID0gbGlzdC5sZW5ndGg7XHJcblx0XHRcdFx0XHQoZnVuY3Rpb24gYWRkKCBhcmdzICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBhcmcgKTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcclxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0pKCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRcdC8vIERvIHdlIG5lZWQgdG8gYWRkIHRoZSBjYWxsYmFja3MgdG8gdGhlXHJcblx0XHRcdFx0XHQvLyBjdXJyZW50IGZpcmluZyBiYXRjaD9cclxuXHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xyXG5cdFx0XHRcdFx0XHRmaXJpbmdMZW5ndGggPSBsaXN0Lmxlbmd0aDtcclxuXHRcdFx0XHRcdC8vIFdpdGggbWVtb3J5LCBpZiB3ZSdyZSBub3QgZmlyaW5nIHRoZW5cclxuXHRcdFx0XHRcdC8vIHdlIHNob3VsZCBjYWxsIHJpZ2h0IGF3YXlcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIG1lbW9yeSApIHtcclxuXHRcdFx0XHRcdFx0ZmlyaW5nU3RhcnQgPSBzdGFydDtcclxuXHRcdFx0XHRcdFx0ZmlyZSggbWVtb3J5ICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XHJcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcclxuXHRcdFx0XHRcdFx0dmFyIGluZGV4O1xyXG5cdFx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcclxuXHRcdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcclxuXHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nTGVuZ3RoICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRmaXJpbmdMZW5ndGgtLTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXHJcblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxyXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcclxuXHRcdFx0XHRyZXR1cm4gZm4gPyBqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDogISEoIGxpc3QgJiYgbGlzdC5sZW5ndGggKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxyXG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0bGlzdCA9IFtdO1xyXG5cdFx0XHRcdGZpcmluZ0xlbmd0aCA9IDA7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIEhhdmUgdGhlIGxpc3QgZG8gbm90aGluZyBhbnltb3JlXHJcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGxpc3QgPSBzdGFjayA9IG1lbW9yeSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gSXMgaXQgZGlzYWJsZWQ/XHJcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIExvY2sgdGhlIGxpc3QgaW4gaXRzIGN1cnJlbnQgc3RhdGVcclxuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0c3RhY2sgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICkge1xyXG5cdFx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBJcyBpdCBsb2NrZWQ/XHJcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICFzdGFjaztcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xyXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XHJcblx0XHRcdFx0aWYgKCBsaXN0ICYmICggIWZpcmVkIHx8IHN0YWNrICkgKSB7XHJcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcclxuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XHJcblx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcclxuXHRcdFx0XHRcdFx0c3RhY2sucHVzaCggYXJncyApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0ZmlyZSggYXJncyApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcclxuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxyXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdHJldHVybiBzZWxmO1xyXG59O1xyXG5cclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cclxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XHJcblx0XHR2YXIgdHVwbGVzID0gW1xyXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZVxyXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIFwicmVzb2x2ZWRcIiBdLFxyXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgXCJyZWplY3RlZFwiIF0sXHJcblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJtZW1vcnlcIikgXVxyXG5cdFx0XHRdLFxyXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxyXG5cdFx0XHRwcm9taXNlID0ge1xyXG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xyXG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcclxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoZnVuY3Rpb24oIG5ld0RlZmVyICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgaSBdICkgJiYgZm5zWyBpIF07XHJcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWRbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSBmb3IgZm9yd2FyZGluZyBhY3Rpb25zIHRvIG5ld0RlZmVyXHJcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzFdIF0oZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0IClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBwcm9taXNlID8gbmV3RGVmZXIucHJvbWlzZSgpIDogdGhpcywgZm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XHJcblx0XHRcdFx0XHR9KS5wcm9taXNlKCk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXHJcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxyXG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xyXG5cclxuXHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcclxuXHRcdHByb21pc2UucGlwZSA9IHByb21pc2UudGhlbjtcclxuXHJcblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXHJcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XHJcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcclxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyAzIF07XHJcblxyXG5cdFx0XHQvLyBwcm9taXNlWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gPSBsaXN0LmFkZFxyXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsxXSBdID0gbGlzdC5hZGQ7XHJcblxyXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcclxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcclxuXHRcdFx0XHRsaXN0LmFkZChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cclxuXHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XHJcblxyXG5cdFx0XHRcdC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcclxuXHRcdFx0XHR9LCB0dXBsZXNbIGkgXiAxIF1bIDIgXS5kaXNhYmxlLCB0dXBsZXNbIDIgXVsgMiBdLmxvY2sgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gZGVmZXJyZWRbIHJlc29sdmUgfCByZWplY3QgfCBub3RpZnkgXVxyXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gXSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9O1xyXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxyXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xyXG5cclxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcclxuXHRcdGlmICggZnVuYyApIHtcclxuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBbGwgZG9uZSFcclxuXHRcdHJldHVybiBkZWZlcnJlZDtcclxuXHR9LFxyXG5cclxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcclxuXHR3aGVuOiBmdW5jdGlvbiggc3Vib3JkaW5hdGUgLyogLCAuLi4sIHN1Ym9yZGluYXRlTiAqLyApIHtcclxuXHRcdHZhciBpID0gMCxcclxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxyXG5cdFx0XHRsZW5ndGggPSByZXNvbHZlVmFsdWVzLmxlbmd0aCxcclxuXHJcblx0XHRcdC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcclxuXHRcdFx0cmVtYWluaW5nID0gbGVuZ3RoICE9PSAxIHx8ICggc3Vib3JkaW5hdGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHN1Ym9yZGluYXRlLnByb21pc2UgKSApID8gbGVuZ3RoIDogMCxcclxuXHJcblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LlxyXG5cdFx0XHRkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA/IHN1Ym9yZGluYXRlIDogalF1ZXJ5LkRlZmVycmVkKCksXHJcblxyXG5cdFx0XHQvLyBVcGRhdGUgZnVuY3Rpb24gZm9yIGJvdGggcmVzb2x2ZSBhbmQgcHJvZ3Jlc3MgdmFsdWVzXHJcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSwgY29udGV4dHMsIHZhbHVlcyApIHtcclxuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0Y29udGV4dHNbIGkgXSA9IHRoaXM7XHJcblx0XHRcdFx0XHR2YWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcclxuXHRcdFx0XHRcdGlmICggdmFsdWVzID09PSBwcm9ncmVzc1ZhbHVlcyApIHtcclxuXHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISggLS1yZW1haW5pbmcgKSApIHtcclxuXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMsIHByb2dyZXNzQ29udGV4dHMsIHJlc29sdmVDb250ZXh0cztcclxuXHJcblx0XHQvLyBBZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkXHJcblx0XHRpZiAoIGxlbmd0aCA+IDEgKSB7XHJcblx0XHRcdHByb2dyZXNzVmFsdWVzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcclxuXHRcdFx0cHJvZ3Jlc3NDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XHJcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHRcdGlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkge1xyXG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UoKVxyXG5cdFx0XHRcdFx0XHQuZG9uZSggdXBkYXRlRnVuYyggaSwgcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICkgKVxyXG5cdFx0XHRcdFx0XHQuZmFpbCggZGVmZXJyZWQucmVqZWN0IClcclxuXHRcdFx0XHRcdFx0LnByb2dyZXNzKCB1cGRhdGVGdW5jKCBpLCBwcm9ncmVzc0NvbnRleHRzLCBwcm9ncmVzc1ZhbHVlcyApICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC0tcmVtYWluaW5nO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElmIHdlJ3JlIG5vdCB3YWl0aW5nIG9uIGFueXRoaW5nLCByZXNvbHZlIHRoZSBtYXN0ZXJcclxuXHRcdGlmICggIXJlbWFpbmluZyApIHtcclxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcclxudmFyIHJlYWR5TGlzdDtcclxuXHJcbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcclxuXHQvLyBBZGQgdGhlIGNhbGxiYWNrXHJcblx0alF1ZXJ5LnJlYWR5LnByb21pc2UoKS5kb25lKCBmbiApO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxufTtcclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXHJcblx0aXNSZWFkeTogZmFsc2UsXHJcblxyXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcclxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxyXG5cdHJlYWR5V2FpdDogMSxcclxuXHJcblx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XHJcblx0aG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHtcclxuXHRcdGlmICggaG9sZCApIHtcclxuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxyXG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcclxuXHJcblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XHJcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxyXG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xyXG5cclxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXHJcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcclxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcclxuXHJcblx0XHQvLyBUcmlnZ2VyIGFueSBib3VuZCByZWFkeSBldmVudHNcclxuXHRcdGlmICggalF1ZXJ5LmZuLnRyaWdnZXJIYW5kbGVyICkge1xyXG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlckhhbmRsZXIoIFwicmVhZHlcIiApO1xyXG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkub2ZmKCBcInJlYWR5XCIgKTtcclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXHJcbiAqL1xyXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XHJcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcclxuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcclxuXHRqUXVlcnkucmVhZHkoKTtcclxufVxyXG5cclxualF1ZXJ5LnJlYWR5LnByb21pc2UgPSBmdW5jdGlvbiggb2JqICkge1xyXG5cdGlmICggIXJlYWR5TGlzdCApIHtcclxuXHJcblx0XHRyZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcclxuXHJcblx0XHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZCBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cclxuXHRcdC8vIFdlIG9uY2UgdHJpZWQgdG8gdXNlIHJlYWR5U3RhdGUgXCJpbnRlcmFjdGl2ZVwiIGhlcmUsIGJ1dCBpdCBjYXVzZWQgaXNzdWVzIGxpa2UgdGhlIG9uZVxyXG5cdFx0Ly8gZGlzY292ZXJlZCBieSBDaHJpc1MgaGVyZTogaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIyODIjY29tbWVudDoxNVxyXG5cdFx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgKSB7XHJcblx0XHRcdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxyXG5cdFx0XHRzZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xyXG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xyXG5cclxuXHRcdFx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcclxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7XHJcbn07XHJcblxyXG4vLyBLaWNrIG9mZiB0aGUgRE9NIHJlYWR5IGNoZWNrIGV2ZW4gaWYgdGhlIHVzZXIgZG9lcyBub3RcclxualF1ZXJ5LnJlYWR5LnByb21pc2UoKTtcclxuXHJcblxyXG5cclxuXHJcbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxyXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cclxudmFyIGFjY2VzcyA9IGpRdWVyeS5hY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxyXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xyXG5cclxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXHJcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xyXG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XHJcblx0XHRcdGpRdWVyeS5hY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5W2ldLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XHJcblx0XHR9XHJcblxyXG5cdC8vIFNldHMgb25lIHZhbHVlXHJcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdGNoYWluYWJsZSA9IHRydWU7XHJcblxyXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XHJcblx0XHRcdHJhdyA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBidWxrICkge1xyXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcclxuXHRcdFx0aWYgKCByYXcgKSB7XHJcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XHJcblx0XHRcdFx0Zm4gPSBudWxsO1xyXG5cclxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGJ1bGsgPSBmbjtcclxuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggZm4gKSB7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdGZuKCBlbGVtc1tpXSwga2V5LCByYXcgPyB2YWx1ZSA6IHZhbHVlLmNhbGwoIGVsZW1zW2ldLCBpLCBmbiggZWxlbXNbaV0sIGtleSApICkgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNoYWluYWJsZSA/XHJcblx0XHRlbGVtcyA6XHJcblxyXG5cdFx0Ly8gR2V0c1xyXG5cdFx0YnVsayA/XHJcblx0XHRcdGZuLmNhbGwoIGVsZW1zICkgOlxyXG5cdFx0XHRsZW4gPyBmbiggZWxlbXNbMF0sIGtleSApIDogZW1wdHlHZXQ7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBvYmplY3QgY2FuIGhhdmUgZGF0YVxyXG4gKi9cclxualF1ZXJ5LmFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XHJcblx0Ly8gQWNjZXB0cyBvbmx5OlxyXG5cdC8vICAtIE5vZGVcclxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXHJcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcclxuXHQvLyAgLSBPYmplY3RcclxuXHQvLyAgICAtIEFueVxyXG5cdC8qIGpzaGludCAtVzAxOCAqL1xyXG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcclxufTtcclxuXHJcblxyXG5mdW5jdGlvbiBEYXRhKCkge1xyXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NCxcclxuXHQvLyBPbGQgV2ViS2l0IGRvZXMgbm90IGhhdmUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zL2ZyZWV6ZSBtZXRob2QsXHJcblx0Ly8gcmV0dXJuIG5ldyBlbXB0eSBvYmplY3QgaW5zdGVhZCB3aXRoIG5vIFtbc2V0XV0gYWNjZXNzb3JcclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMuY2FjaGUgPSB7fSwgMCwge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIHt9O1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XHJcbn1cclxuXHJcbkRhdGEudWlkID0gMTtcclxuRGF0YS5hY2NlcHRzID0galF1ZXJ5LmFjY2VwdERhdGE7XHJcblxyXG5EYXRhLnByb3RvdHlwZSA9IHtcclxuXHRrZXk6IGZ1bmN0aW9uKCBvd25lciApIHtcclxuXHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxyXG5cdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cclxuXHRcdC8vIEFsd2F5cyByZXR1cm4gdGhlIGtleSBmb3IgYSBmcm96ZW4gb2JqZWN0LlxyXG5cdFx0aWYgKCAhRGF0YS5hY2NlcHRzKCBvd25lciApICkge1xyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZGVzY3JpcHRvciA9IHt9LFxyXG5cdFx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGUga2V5XHJcblx0XHRcdHVubG9jayA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcclxuXHJcblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcclxuXHRcdGlmICggIXVubG9jayApIHtcclxuXHRcdFx0dW5sb2NrID0gRGF0YS51aWQrKztcclxuXHJcblx0XHRcdC8vIFNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlLCBub24td3JpdGFibGUgcHJvcGVydHlcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRkZXNjcmlwdG9yWyB0aGlzLmV4cGFuZG8gXSA9IHsgdmFsdWU6IHVubG9jayB9O1xyXG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBvd25lciwgZGVzY3JpcHRvciApO1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0XHJcblx0XHRcdC8vIEZhbGxiYWNrIHRvIGEgbGVzcyBzZWN1cmUgZGVmaW5pdGlvblxyXG5cdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHRcdFx0XHRkZXNjcmlwdG9yWyB0aGlzLmV4cGFuZG8gXSA9IHVubG9jaztcclxuXHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBvd25lciwgZGVzY3JpcHRvciApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRW5zdXJlIHRoZSBjYWNoZSBvYmplY3RcclxuXHRcdGlmICggIXRoaXMuY2FjaGVbIHVubG9jayBdICkge1xyXG5cdFx0XHR0aGlzLmNhY2hlWyB1bmxvY2sgXSA9IHt9O1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB1bmxvY2s7XHJcblx0fSxcclxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XHJcblx0XHR2YXIgcHJvcCxcclxuXHRcdFx0Ly8gVGhlcmUgbWF5IGJlIGFuIHVubG9jayBhc3NpZ25lZCB0byB0aGlzIG5vZGUsXHJcblx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIGVudHJ5IGZvciB0aGlzIFwib3duZXJcIiwgY3JlYXRlIG9uZSBpbmxpbmVcclxuXHRcdFx0Ly8gYW5kIHNldCB0aGUgdW5sb2NrIGFzIHRob3VnaCBhbiBvd25lciBlbnRyeSBoYWQgYWx3YXlzIGV4aXN0ZWRcclxuXHRcdFx0dW5sb2NrID0gdGhpcy5rZXkoIG93bmVyICksXHJcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZVsgdW5sb2NrIF07XHJcblxyXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xyXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0Y2FjaGVbIGRhdGEgXSA9IHZhbHVlO1xyXG5cclxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBGcmVzaCBhc3NpZ25tZW50cyBieSBvYmplY3QgYXJlIHNoYWxsb3cgY29waWVkXHJcblx0XHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggdGhpcy5jYWNoZVsgdW5sb2NrIF0sIGRhdGEgKTtcclxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcclxuXHRcdFx0XHRcdGNhY2hlWyBwcm9wIF0gPSBkYXRhWyBwcm9wIF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gY2FjaGU7XHJcblx0fSxcclxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xyXG5cdFx0Ly8gRWl0aGVyIGEgdmFsaWQgY2FjaGUgaXMgZm91bmQsIG9yIHdpbGwgYmUgY3JlYXRlZC5cclxuXHRcdC8vIE5ldyBjYWNoZXMgd2lsbCBiZSBjcmVhdGVkIGFuZCB0aGUgdW5sb2NrIHJldHVybmVkLFxyXG5cdFx0Ly8gYWxsb3dpbmcgZGlyZWN0IGFjY2VzcyB0byB0aGUgbmV3bHkgY3JlYXRlZFxyXG5cdFx0Ly8gZW1wdHkgZGF0YSBvYmplY3QuIEEgdmFsaWQgb3duZXIgb2JqZWN0IG11c3QgYmUgcHJvdmlkZWQuXHJcblx0XHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlWyB0aGlzLmtleSggb3duZXIgKSBdO1xyXG5cclxuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdGNhY2hlIDogY2FjaGVbIGtleSBdO1xyXG5cdH0sXHJcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XHJcblx0XHR2YXIgc3RvcmVkO1xyXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxyXG5cdFx0Ly9cclxuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcclxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxyXG5cdFx0Ly9cclxuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxyXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxyXG5cdFx0Ly9cclxuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3RcclxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcclxuXHRcdC8vXHJcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XHJcblx0XHRcdFx0KChrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIikgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgKSB7XHJcblxyXG5cdFx0XHRzdG9yZWQgPSB0aGlzLmdldCggb3duZXIsIGtleSApO1xyXG5cclxuXHRcdFx0cmV0dXJuIHN0b3JlZCAhPT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRzdG9yZWQgOiB0aGlzLmdldCggb3duZXIsIGpRdWVyeS5jYW1lbENhc2Uoa2V5KSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFsqXVdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXHJcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcclxuXHRcdC8vXHJcblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXHJcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxyXG5cdFx0Ly9cclxuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xyXG5cclxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xyXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXHJcblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xyXG5cdH0sXHJcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcclxuXHRcdHZhciBpLCBuYW1lLCBjYW1lbCxcclxuXHRcdFx0dW5sb2NrID0gdGhpcy5rZXkoIG93bmVyICksXHJcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZVsgdW5sb2NrIF07XHJcblxyXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0dGhpcy5jYWNoZVsgdW5sb2NrIF0gPSB7fTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBrZXkgKSApIHtcclxuXHRcdFx0XHQvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXHJcblx0XHRcdFx0Ly8gV2hlbiBkYXRhIGlzIGluaXRpYWxseSBjcmVhdGVkLCB2aWEgKFwia2V5XCIsIFwidmFsXCIpIHNpZ25hdHVyZSxcclxuXHRcdFx0XHQvLyBrZXlzIHdpbGwgYmUgY29udmVydGVkIHRvIGNhbWVsQ2FzZS5cclxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxyXG5cdFx0XHRcdC8vIGJvdGggcGxhaW4ga2V5IGFuZCBjYW1lbENhc2Uga2V5LiAjMTI3ODZcclxuXHRcdFx0XHQvLyBUaGlzIHdpbGwgb25seSBwZW5hbGl6ZSB0aGUgYXJyYXkgYXJndW1lbnQgcGF0aC5cclxuXHRcdFx0XHRuYW1lID0ga2V5LmNvbmNhdCgga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2FtZWwgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcclxuXHRcdFx0XHQvLyBUcnkgdGhlIHN0cmluZyBhcyBhIGtleSBiZWZvcmUgYW55IG1hbmlwdWxhdGlvblxyXG5cdFx0XHRcdGlmICgga2V5IGluIGNhY2hlICkge1xyXG5cdFx0XHRcdFx0bmFtZSA9IFsga2V5LCBjYW1lbCBdO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXHJcblx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxyXG5cdFx0XHRcdFx0bmFtZSA9IGNhbWVsO1xyXG5cdFx0XHRcdFx0bmFtZSA9IG5hbWUgaW4gY2FjaGUgP1xyXG5cdFx0XHRcdFx0XHRbIG5hbWUgXSA6ICggbmFtZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGkgPSBuYW1lLmxlbmd0aDtcclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBuYW1lWyBpIF0gXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xyXG5cdFx0cmV0dXJuICFqUXVlcnkuaXNFbXB0eU9iamVjdChcclxuXHRcdFx0dGhpcy5jYWNoZVsgb3duZXJbIHRoaXMuZXhwYW5kbyBdIF0gfHwge31cclxuXHRcdCk7XHJcblx0fSxcclxuXHRkaXNjYXJkOiBmdW5jdGlvbiggb3duZXIgKSB7XHJcblx0XHRpZiAoIG93bmVyWyB0aGlzLmV4cGFuZG8gXSApIHtcclxuXHRcdFx0ZGVsZXRlIHRoaXMuY2FjaGVbIG93bmVyWyB0aGlzLmV4cGFuZG8gXSBdO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxudmFyIGRhdGFfcHJpdiA9IG5ldyBEYXRhKCk7XHJcblxyXG52YXIgZGF0YV91c2VyID0gbmV3IERhdGEoKTtcclxuXHJcblxyXG5cclxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcclxuLy9cclxuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcclxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxyXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXHJcbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxyXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxyXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXHJcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcclxuXHJcbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXHJcblx0cm11bHRpRGFzaCA9IC8oW0EtWl0pL2c7XHJcblxyXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xyXG5cdHZhciBuYW1lO1xyXG5cclxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XHJcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXHJcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJDFcIiApLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGRhdGEgPSBkYXRhID09PSBcInRydWVcIiA/IHRydWUgOlxyXG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJmYWxzZVwiID8gZmFsc2UgOlxyXG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJudWxsXCIgPyBudWxsIDpcclxuXHRcdFx0XHRcdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXHJcblx0XHRcdFx0XHQrZGF0YSArIFwiXCIgPT09IGRhdGEgPyArZGF0YSA6XHJcblx0XHRcdFx0XHRyYnJhY2UudGVzdCggZGF0YSApID8galF1ZXJ5LnBhcnNlSlNPTiggZGF0YSApIDpcclxuXHRcdFx0XHRcdGRhdGE7XHJcblx0XHRcdH0gY2F0Y2goIGUgKSB7fVxyXG5cclxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXHJcblx0XHRcdGRhdGFfdXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGRhdGFfdXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YV9wcml2Lmhhc0RhdGEoIGVsZW0gKTtcclxuXHR9LFxyXG5cclxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcclxuXHRcdHJldHVybiBkYXRhX3VzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0XHRkYXRhX3VzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XHJcblx0fSxcclxuXHJcblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcclxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhX3ByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXHJcblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xyXG5cdFx0cmV0dXJuIGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcclxuXHR9LFxyXG5cclxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XHJcblx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xyXG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXHJcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXHJcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXHJcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xyXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCBlbGVtICk7XHJcblxyXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YV9wcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xyXG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcclxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMStcclxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXHJcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcclxuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xyXG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKDUpICk7XHJcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRkYXRhX3ByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xyXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGRhdGFfdXNlci5zZXQoIHRoaXMsIGtleSApO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdHZhciBkYXRhLFxyXG5cdFx0XHRcdGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XHJcblxyXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxyXG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxyXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxyXG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXHJcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXHJcblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcclxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgYXMtaXNcclxuXHRcdFx0XHRkYXRhID0gZGF0YV91c2VyLmdldCggZWxlbSwga2V5ICk7XHJcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcclxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgY2FtZWxpemVkXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0sIGNhbWVsS2V5ICk7XHJcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXHJcblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xyXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwgY2FtZWxLZXksIHVuZGVmaW5lZCApO1xyXG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cclxuXHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdC8vIEZpcnN0LCBhdHRlbXB0IHRvIHN0b3JlIGEgY29weSBvciByZWZlcmVuY2Ugb2YgYW55XHJcblx0XHRcdFx0Ly8gZGF0YSB0aGF0IG1pZ2h0J3ZlIGJlZW4gc3RvcmUgd2l0aCBhIGNhbWVsQ2FzZWQga2V5LlxyXG5cdFx0XHRcdHZhciBkYXRhID0gZGF0YV91c2VyLmdldCggdGhpcywgY2FtZWxLZXkgKTtcclxuXHJcblx0XHRcdFx0Ly8gRm9yIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGUgaW50ZXJvcCwgd2UgaGF2ZSB0b1xyXG5cdFx0XHRcdC8vIHN0b3JlIHByb3BlcnR5IG5hbWVzIHdpdGggZGFzaGVzIGluIGEgY2FtZWxDYXNlIGZvcm0uXHJcblx0XHRcdFx0Ly8gVGhpcyBtaWdodCBub3QgYXBwbHkgdG8gYWxsIHByb3BlcnRpZXMuLi4qXHJcblx0XHRcdFx0ZGF0YV91c2VyLnNldCggdGhpcywgY2FtZWxLZXksIHZhbHVlICk7XHJcblxyXG5cdFx0XHRcdC8vICouLi4gSW4gdGhlIGNhc2Ugb2YgcHJvcGVydGllcyB0aGF0IG1pZ2h0IF9hY3R1YWxseV9cclxuXHRcdFx0XHQvLyBoYXZlIGRhc2hlcywgd2UgbmVlZCB0byBhbHNvIHN0b3JlIGEgY29weSBvZiB0aGF0XHJcblx0XHRcdFx0Ly8gdW5jaGFuZ2VkIHByb3BlcnR5LlxyXG5cdFx0XHRcdGlmICgga2V5LmluZGV4T2YoXCItXCIpICE9PSAtMSAmJiBkYXRhICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRkYXRhX3VzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRkYXRhX3VzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcclxuXHRcdH0pO1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxualF1ZXJ5LmV4dGVuZCh7XHJcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xyXG5cdFx0dmFyIHF1ZXVlO1xyXG5cclxuXHRcdGlmICggZWxlbSApIHtcclxuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcclxuXHRcdFx0cXVldWUgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XHJcblxyXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXHJcblx0XHRcdGlmICggZGF0YSApIHtcclxuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBqUXVlcnkuaXNBcnJheSggZGF0YSApICkge1xyXG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KGRhdGEpICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xyXG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xyXG5cclxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxyXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcclxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxyXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxyXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXHJcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcclxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xyXG5cdFx0XHRzdGFydExlbmd0aC0tO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggZm4gKSB7XHJcblxyXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXHJcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcclxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XHJcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxyXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcclxuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcclxuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXHJcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xyXG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcclxuXHRcdHJldHVybiBkYXRhX3ByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcclxuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKS5hZGQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xyXG5cdFx0XHR9KVxyXG5cdFx0fSk7XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcclxuXHRcdHZhciBzZXR0ZXIgPSAyO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGRhdGEgPSB0eXBlO1xyXG5cdFx0XHR0eXBlID0gXCJmeFwiO1xyXG5cdFx0XHRzZXR0ZXItLTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbMF0sIHR5cGUgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0dGhpcyA6XHJcblx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcclxuXHJcblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcclxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcclxuXHJcblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbMF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdH0sXHJcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcclxuXHR9LFxyXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcclxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcclxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xyXG5cdFx0dmFyIHRtcCxcclxuXHRcdFx0Y291bnQgPSAxLFxyXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxyXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXHJcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xyXG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0b2JqID0gdHlwZTtcclxuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0dG1wID0gZGF0YV9wcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XHJcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcclxuXHRcdFx0XHRjb3VudCsrO1xyXG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmVzb2x2ZSgpO1xyXG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xyXG5cdH1cclxufSk7XHJcbnZhciBwbnVtID0gKC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvKS5zb3VyY2U7XHJcblxyXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XHJcblxyXG52YXIgaXNIaWRkZW4gPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XHJcblx0XHQvLyBpc0hpZGRlbiBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xyXG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XHJcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcclxuXHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIiB8fCAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcclxuXHR9O1xyXG5cclxudmFyIHJjaGVja2FibGVUeXBlID0gKC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pKTtcclxuXHJcblxyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcclxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcclxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaTw9NS4xXHJcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcclxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXHJcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXHJcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XHJcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcclxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xyXG5cclxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaTw9NS4xLCBBbmRyb2lkPDQuMlxyXG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xyXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8PTExK1xyXG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXHJcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xyXG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xyXG59KSgpO1xyXG52YXIgc3RydW5kZWZpbmVkID0gdHlwZW9mIHVuZGVmaW5lZDtcclxuXHJcblxyXG5cclxuc3VwcG9ydC5mb2N1c2luQnViYmxlcyA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xyXG5cclxuXHJcbnZhclxyXG5cdHJrZXlFdmVudCA9IC9ea2V5LyxcclxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudSl8Y2xpY2svLFxyXG5cdHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxyXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpJC87XHJcblxyXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xyXG5cdHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcclxuXHRyZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xyXG5cdHRyeSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcclxuXHR9IGNhdGNoICggZXJyICkgeyB9XHJcbn1cclxuXHJcbi8qXHJcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cclxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cclxuICovXHJcbmpRdWVyeS5ldmVudCA9IHtcclxuXHJcblx0Z2xvYmFsOiB7fSxcclxuXHJcblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xyXG5cclxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcclxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXHJcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcclxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtICk7XHJcblxyXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcclxuXHRcdGlmICggIWVsZW1EYXRhICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXHJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcclxuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xyXG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcclxuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3RvcjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcclxuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcclxuXHRcdH1cclxuXHJcblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XHJcblx0XHRpZiAoICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHtcclxuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XHJcblx0XHR9XHJcblx0XHRpZiAoICEoZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUpICkge1xyXG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xyXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXHJcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxyXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBzdHJ1bmRlZmluZWQgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxyXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XHJcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCB0LS0gKSB7XHJcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzW3RdICkgfHwgW107XHJcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTtcclxuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XHJcblxyXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcclxuXHRcdFx0aWYgKCAhdHlwZSApIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cclxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXHJcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcclxuXHJcblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblxyXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xyXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKHtcclxuXHRcdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcclxuXHRcdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXHJcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxyXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3RvcixcclxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxyXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKFwiLlwiKVxyXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xyXG5cclxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3RcclxuXHRcdFx0aWYgKCAhKGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0pICkge1xyXG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcclxuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcclxuXHJcblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXHJcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fCBzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUsIGZhbHNlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xyXG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xyXG5cclxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xyXG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XHJcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXHJcblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxyXG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XHJcblxyXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxyXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcclxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxyXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFfcHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YV9wcml2LmdldCggZWxlbSApO1xyXG5cclxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcclxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xyXG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcclxuXHRcdHdoaWxlICggdC0tICkge1xyXG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xyXG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbMV07XHJcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsyXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xyXG5cclxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XHJcblx0XHRcdGlmICggIXR5cGUgKSB7XHJcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XHJcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XHJcblx0XHRcdHRtcCA9IHRtcFsyXSAmJiBuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiICk7XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXHJcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XHJcblx0XHRcdHdoaWxlICggai0tICkge1xyXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XHJcblxyXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcclxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXHJcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXHJcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XHJcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcclxuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcclxuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XHJcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxyXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xyXG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHwgc3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcclxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xyXG5cdFx0XHRkZWxldGUgZWxlbURhdGEuaGFuZGxlO1xyXG5cdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBcImV2ZW50c1wiICk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XHJcblxyXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcclxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXHJcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXHJcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdChcIi5cIikgOiBbXTtcclxuXHJcblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcclxuXHJcblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xyXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcclxuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdHlwZS5pbmRleE9mKFwiLlwiKSA+PSAwICkge1xyXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXHJcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KFwiLlwiKTtcclxuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcclxuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XHJcblx0XHR9XHJcblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoXCI6XCIpIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xyXG5cclxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xyXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XHJcblx0XHRcdGV2ZW50IDpcclxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XHJcblxyXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxyXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XHJcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpO1xyXG5cdFx0ZXZlbnQubmFtZXNwYWNlX3JlID0gZXZlbnQubmFtZXNwYWNlID9cclxuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIiApIDpcclxuXHRcdFx0bnVsbDtcclxuXHJcblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcclxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcclxuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcclxuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XHJcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cclxuXHRcdFx0WyBldmVudCBdIDpcclxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XHJcblxyXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xyXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxyXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcclxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcclxuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcclxuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xyXG5cdFx0XHRcdHRtcCA9IGN1cjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXHJcblx0XHRcdGlmICggdG1wID09PSAoZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KSApIHtcclxuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXHJcblx0XHRpID0gMDtcclxuXHRcdHdoaWxlICggKGN1ciA9IGV2ZW50UGF0aFtpKytdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcclxuXHJcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XHJcblx0XHRcdFx0YnViYmxlVHlwZSA6XHJcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xyXG5cclxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhX3ByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiYgZGF0YV9wcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XHJcblx0XHRcdGlmICggaGFuZGxlICkge1xyXG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXHJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xyXG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgalF1ZXJ5LmFjY2VwdERhdGEoIGN1ciApICkge1xyXG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XHJcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xyXG5cclxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcclxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XHJcblxyXG5cdFx0XHRpZiAoICghc3BlY2lhbC5fZGVmYXVsdCB8fCBzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UpICYmXHJcblx0XHRcdFx0alF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxyXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcclxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2RcclxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdG1wICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xyXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdG1wICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xyXG5cdH0sXHJcblxyXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblxyXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XHJcblx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICk7XHJcblxyXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLFxyXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcclxuXHRcdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxyXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YV9wcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XHJcblxyXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcclxuXHRcdGFyZ3NbMF0gPSBldmVudDtcclxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcclxuXHJcblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXHJcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xyXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xyXG5cclxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXHJcblx0XHRpID0gMDtcclxuXHRcdHdoaWxlICggKG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcclxuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcclxuXHJcblx0XHRcdGogPSAwO1xyXG5cdFx0XHR3aGlsZSAoIChoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSkgJiYgIWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2UocylcclxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cclxuXHRcdFx0XHRpZiAoICFldmVudC5uYW1lc3BhY2VfcmUgfHwgZXZlbnQubmFtZXNwYWNlX3JlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcclxuXHJcblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XHJcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XHJcblxyXG5cdFx0XHRcdFx0cmV0ID0gKCAoalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9KS5oYW5kbGUgfHwgaGFuZGxlT2JqLmhhbmRsZXIgKVxyXG5cdFx0XHRcdFx0XHRcdC5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAoZXZlbnQucmVzdWx0ID0gcmV0KSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcclxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XHJcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcclxuXHR9LFxyXG5cclxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcclxuXHRcdHZhciBpLCBtYXRjaGVzLCBzZWwsIGhhbmRsZU9iaixcclxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXHJcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxyXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XHJcblxyXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xyXG5cdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKCMxMzE4MClcclxuXHRcdC8vIEF2b2lkIG5vbi1sZWZ0LWNsaWNrIGJ1YmJsaW5nIGluIEZpcmVmb3ggKCMzODYxKVxyXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmIGN1ci5ub2RlVHlwZSAmJiAoIWV2ZW50LmJ1dHRvbiB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIpICkge1xyXG5cclxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XHJcblxyXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxyXG5cdFx0XHRcdGlmICggY3VyLmRpc2FibGVkICE9PSB0cnVlIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiApIHtcclxuXHRcdFx0XHRcdG1hdGNoZXMgPSBbXTtcclxuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xyXG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcclxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRcdFx0bWF0Y2hlc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID49IDAgOlxyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdICkge1xyXG5cdFx0XHRcdFx0XHRcdG1hdGNoZXMucHVzaCggaGFuZGxlT2JqICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICggbWF0Y2hlcy5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlcyB9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXHJcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XHJcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogdGhpcywgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcclxuXHR9LFxyXG5cclxuXHQvLyBJbmNsdWRlcyBzb21lIGV2ZW50IHByb3BzIHNoYXJlZCBieSBLZXlFdmVudCBhbmQgTW91c2VFdmVudFxyXG5cdHByb3BzOiBcImFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGV2ZW50UGhhc2UgbWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiLnNwbGl0KFwiIFwiKSxcclxuXHJcblx0Zml4SG9va3M6IHt9LFxyXG5cclxuXHRrZXlIb29rczoge1xyXG5cdFx0cHJvcHM6IFwiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZVwiLnNwbGl0KFwiIFwiKSxcclxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcclxuXHJcblx0XHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xyXG5cdFx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgKSB7XHJcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSBvcmlnaW5hbC5jaGFyQ29kZSAhPSBudWxsID8gb3JpZ2luYWwuY2hhckNvZGUgOiBvcmlnaW5hbC5rZXlDb2RlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0bW91c2VIb29rczoge1xyXG5cdFx0cHJvcHM6IFwiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50XCIuc3BsaXQoXCIgXCIpLFxyXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xyXG5cdFx0XHR2YXIgZXZlbnREb2MsIGRvYywgYm9keSxcclxuXHRcdFx0XHRidXR0b24gPSBvcmlnaW5hbC5idXR0b247XHJcblxyXG5cdFx0XHQvLyBDYWxjdWxhdGUgcGFnZVgvWSBpZiBtaXNzaW5nIGFuZCBjbGllbnRYL1kgYXZhaWxhYmxlXHJcblx0XHRcdGlmICggZXZlbnQucGFnZVggPT0gbnVsbCAmJiBvcmlnaW5hbC5jbGllbnRYICE9IG51bGwgKSB7XHJcblx0XHRcdFx0ZXZlbnREb2MgPSBldmVudC50YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcclxuXHRcdFx0XHRkb2MgPSBldmVudERvYy5kb2N1bWVudEVsZW1lbnQ7XHJcblx0XHRcdFx0Ym9keSA9IGV2ZW50RG9jLmJvZHk7XHJcblxyXG5cdFx0XHRcdGV2ZW50LnBhZ2VYID0gb3JpZ2luYWwuY2xpZW50WCArICggZG9jICYmIGRvYy5zY3JvbGxMZWZ0IHx8IGJvZHkgJiYgYm9keS5zY3JvbGxMZWZ0IHx8IDAgKSAtICggZG9jICYmIGRvYy5jbGllbnRMZWZ0IHx8IGJvZHkgJiYgYm9keS5jbGllbnRMZWZ0IHx8IDAgKTtcclxuXHRcdFx0XHRldmVudC5wYWdlWSA9IG9yaWdpbmFsLmNsaWVudFkgKyAoIGRvYyAmJiBkb2Muc2Nyb2xsVG9wICB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsVG9wICB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcclxuXHRcdFx0Ly8gTm90ZTogYnV0dG9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyBkb24ndCB1c2UgaXRcclxuXHRcdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSAoIGJ1dHRvbiAmIDEgPyAxIDogKCBidXR0b24gJiAyID8gMyA6ICggYnV0dG9uICYgNCA/IDIgOiAwICkgKSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Zml4OiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRpZiAoIGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdICkge1xyXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ3JlYXRlIGEgd3JpdGFibGUgY29weSBvZiB0aGUgZXZlbnQgb2JqZWN0IGFuZCBub3JtYWxpemUgc29tZSBwcm9wZXJ0aWVzXHJcblx0XHR2YXIgaSwgcHJvcCwgY29weSxcclxuXHRcdFx0dHlwZSA9IGV2ZW50LnR5cGUsXHJcblx0XHRcdG9yaWdpbmFsRXZlbnQgPSBldmVudCxcclxuXHRcdFx0Zml4SG9vayA9IHRoaXMuZml4SG9va3NbIHR5cGUgXTtcclxuXHJcblx0XHRpZiAoICFmaXhIb29rICkge1xyXG5cdFx0XHR0aGlzLmZpeEhvb2tzWyB0eXBlIF0gPSBmaXhIb29rID1cclxuXHRcdFx0XHRybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOlxyXG5cdFx0XHRcdHJrZXlFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLmtleUhvb2tzIDpcclxuXHRcdFx0XHR7fTtcclxuXHRcdH1cclxuXHRcdGNvcHkgPSBmaXhIb29rLnByb3BzID8gdGhpcy5wcm9wcy5jb25jYXQoIGZpeEhvb2sucHJvcHMgKSA6IHRoaXMucHJvcHM7XHJcblxyXG5cdFx0ZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XHJcblxyXG5cdFx0aSA9IGNvcHkubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdHByb3AgPSBjb3B5WyBpIF07XHJcblx0XHRcdGV2ZW50WyBwcm9wIF0gPSBvcmlnaW5hbEV2ZW50WyBwcm9wIF07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogQ29yZG92YSAyLjUgKFdlYktpdCkgKCMxMzI1NSlcclxuXHRcdC8vIEFsbCBldmVudHMgc2hvdWxkIGhhdmUgYSB0YXJnZXQ7IENvcmRvdmEgZGV2aWNlcmVhZHkgZG9lc24ndFxyXG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xyXG5cdFx0XHRldmVudC50YXJnZXQgPSBkb2N1bWVudDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wKywgQ2hyb21lPDI4XHJcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxyXG5cdFx0aWYgKCBldmVudC50YXJnZXQubm9kZVR5cGUgPT09IDMgKSB7XHJcblx0XHRcdGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmaXhIb29rLmZpbHRlciA/IGZpeEhvb2suZmlsdGVyKCBldmVudCwgb3JpZ2luYWxFdmVudCApIDogZXZlbnQ7XHJcblx0fSxcclxuXHJcblx0c3BlY2lhbDoge1xyXG5cdFx0bG9hZDoge1xyXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXHJcblx0XHRcdG5vQnViYmxlOiB0cnVlXHJcblx0XHR9LFxyXG5cdFx0Zm9jdXM6IHtcclxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XHJcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xyXG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxyXG5cdFx0fSxcclxuXHRcdGJsdXI6IHtcclxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcclxuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcclxuXHRcdH0sXHJcblx0XHRjbGljazoge1xyXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxyXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcclxuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3NcclxuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0YmVmb3JldW5sb2FkOiB7XHJcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xyXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cclxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XHJcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQsIGJ1YmJsZSApIHtcclxuXHRcdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZS5cclxuXHRcdC8vIEZha2Ugb3JpZ2luYWxFdmVudCB0byBhdm9pZCBkb25vcidzIHN0b3BQcm9wYWdhdGlvbiwgYnV0IGlmIHRoZVxyXG5cdFx0Ly8gc2ltdWxhdGVkIGV2ZW50IHByZXZlbnRzIGRlZmF1bHQgdGhlbiB3ZSBkbyB0aGUgc2FtZSBvbiB0aGUgZG9ub3IuXHJcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXHJcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcclxuXHRcdFx0ZXZlbnQsXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlLFxyXG5cdFx0XHRcdG9yaWdpbmFsRXZlbnQ6IHt9XHJcblx0XHRcdH1cclxuXHRcdCk7XHJcblx0XHRpZiAoIGJ1YmJsZSApIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5jYWxsKCBlbGVtLCBlICk7XHJcblx0XHR9XHJcblx0XHRpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XHJcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcclxuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcclxuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlLCBmYWxzZSApO1xyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xyXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxyXG5cdGlmICggISh0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50KSApIHtcclxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XHJcblx0fVxyXG5cclxuXHQvLyBFdmVudCBvYmplY3RcclxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcclxuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcclxuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xyXG5cclxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXHJcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cclxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcclxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcclxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cclxuXHRcdFx0cmV0dXJuVHJ1ZSA6XHJcblx0XHRcdHJldHVybkZhbHNlO1xyXG5cclxuXHQvLyBFdmVudCB0eXBlXHJcblx0fSBlbHNlIHtcclxuXHRcdHRoaXMudHlwZSA9IHNyYztcclxuXHR9XHJcblxyXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XHJcblx0aWYgKCBwcm9wcyApIHtcclxuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XHJcblx0fVxyXG5cclxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxyXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xyXG5cclxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXHJcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XHJcbn07XHJcblxyXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcclxuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXHJcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XHJcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcclxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXHJcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxyXG5cclxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcclxuXHJcblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XHJcblxyXG5cdFx0aWYgKCBlICYmIGUucHJldmVudERlZmF1bHQgKSB7XHJcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcclxuXHJcblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcclxuXHJcblx0XHRpZiAoIGUgJiYgZS5zdG9wUHJvcGFnYXRpb24gKSB7XHJcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XHJcblxyXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XHJcblxyXG5cdFx0aWYgKCBlICYmIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uICkge1xyXG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0fVxyXG59O1xyXG5cclxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXHJcbi8vIFN1cHBvcnQ6IENocm9tZSAxNStcclxualF1ZXJ5LmVhY2goe1xyXG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXHJcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxyXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxyXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcclxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcclxuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xyXG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXHJcblx0XHRiaW5kVHlwZTogZml4LFxyXG5cclxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0XHR2YXIgcmV0LFxyXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXHJcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXHJcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xyXG5cclxuXHRcdFx0Ly8gRm9yIG1vdXNlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxyXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xyXG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkpICkge1xyXG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XHJcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHR9O1xyXG59KTtcclxuXHJcbi8vIFN1cHBvcnQ6IEZpcmVmb3gsIENocm9tZSwgU2FmYXJpXHJcbi8vIENyZWF0ZSBcImJ1YmJsaW5nXCIgZm9jdXMgYW5kIGJsdXIgZXZlbnRzXHJcbmlmICggIXN1cHBvcnQuZm9jdXNpbkJ1YmJsZXMgKSB7XHJcblx0alF1ZXJ5LmVhY2goeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xyXG5cclxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XHJcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApLCB0cnVlICk7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xyXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxyXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xyXG5cclxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcclxuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcclxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YV9wcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XHJcblxyXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xyXG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcclxuXHRcdFx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fSk7XHJcbn1cclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cclxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIC8qSU5URVJOQUwqLyBvbmUgKSB7XHJcblx0XHR2YXIgb3JpZ0ZuLCB0eXBlO1xyXG5cclxuXHRcdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXHJcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcclxuXHRcdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3RvcjtcclxuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xyXG5cdFx0XHRcdHRoaXMub24oIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xyXG5cdFx0XHQvLyAoIHR5cGVzLCBmbiApXHJcblx0XHRcdGZuID0gc2VsZWN0b3I7XHJcblx0XHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcclxuXHRcdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XHJcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXHJcblx0XHRcdFx0Zm4gPSBkYXRhO1xyXG5cdFx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxyXG5cdFx0XHRcdGZuID0gZGF0YTtcclxuXHRcdFx0XHRkYXRhID0gc2VsZWN0b3I7XHJcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xyXG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xyXG5cdFx0fSBlbHNlIGlmICggIWZuICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG9uZSA9PT0gMSApIHtcclxuXHRcdFx0b3JpZ0ZuID0gZm47XHJcblx0XHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xyXG5cdFx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcclxuXHRcdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0fTtcclxuXHRcdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cclxuXHRcdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcclxuXHR9LFxyXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XHJcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xyXG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XHJcblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcclxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xyXG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxyXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgPyBoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOiBoYW5kbGVPYmoub3JpZ1R5cGUsXHJcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxyXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXHJcblx0XHRcdCk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXHJcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XHJcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcclxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxyXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xyXG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xyXG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XHJcblx0XHR2YXIgZWxlbSA9IHRoaXNbMF07XHJcblx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG5cclxudmFyXHJcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLFxyXG5cdHJ0YWdOYW1lID0gLzwoW1xcdzpdKykvLFxyXG5cdHJodG1sID0gLzx8JiM/XFx3KzsvLFxyXG5cdHJub0lubmVyaHRtbCA9IC88KD86c2NyaXB0fHN0eWxlfGxpbmspL2ksXHJcblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXHJcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxyXG5cdHJzY3JpcHRUeXBlID0gL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSxcclxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxyXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZyxcclxuXHJcblx0Ly8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcclxuXHR3cmFwTWFwID0ge1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFOVxyXG5cdFx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXHJcblxyXG5cdFx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxyXG5cdFx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcclxuXHRcdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcclxuXHRcdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcclxuXHJcblx0XHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cclxuXHR9O1xyXG5cclxuLy8gU3VwcG9ydDogSUU5XHJcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcclxuXHJcbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XHJcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xyXG5cclxuLy8gU3VwcG9ydDogMS54IGNvbXBhdGliaWxpdHlcclxuLy8gTWFuaXB1bGF0aW5nIHRhYmxlcyByZXF1aXJlcyBhIHRib2R5XHJcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcclxuXHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxyXG5cdFx0alF1ZXJ5Lm5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApID9cclxuXHJcblx0XHRlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGJvZHlcIilbMF0gfHxcclxuXHRcdFx0ZWxlbS5hcHBlbmRDaGlsZCggZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiKSApIDpcclxuXHRcdGVsZW07XHJcbn1cclxuXHJcbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cclxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcclxuXHRlbGVtLnR5cGUgPSAoZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpICE9PSBudWxsKSArIFwiL1wiICsgZWxlbS50eXBlO1xyXG5cdHJldHVybiBlbGVtO1xyXG59XHJcbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XHJcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XHJcblxyXG5cdGlmICggbWF0Y2ggKSB7XHJcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIik7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbTtcclxufVxyXG5cclxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXHJcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcclxuXHR2YXIgaSA9IDAsXHJcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xyXG5cclxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRkYXRhX3ByaXYuc2V0KFxyXG5cdFx0XHRlbGVtc1sgaSBdLCBcImdsb2JhbEV2YWxcIiwgIXJlZkVsZW1lbnRzIHx8IGRhdGFfcHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcclxuXHRcdCk7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xyXG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xyXG5cclxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxyXG5cdGlmICggZGF0YV9wcml2Lmhhc0RhdGEoIHNyYyApICkge1xyXG5cdFx0cGRhdGFPbGQgPSBkYXRhX3ByaXYuYWNjZXNzKCBzcmMgKTtcclxuXHRcdHBkYXRhQ3VyID0gZGF0YV9wcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcclxuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcclxuXHJcblx0XHRpZiAoIGV2ZW50cyApIHtcclxuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcclxuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XHJcblxyXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcclxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXHJcblx0aWYgKCBkYXRhX3VzZXIuaGFzRGF0YSggc3JjICkgKSB7XHJcblx0XHR1ZGF0YU9sZCA9IGRhdGFfdXNlci5hY2Nlc3MoIHNyYyApO1xyXG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcclxuXHJcblx0XHRkYXRhX3VzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XHJcblx0dmFyIHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPyBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKSA6XHJcblx0XHRcdGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCA/IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICkgOlxyXG5cdFx0XHRbXTtcclxuXHJcblx0cmV0dXJuIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApID9cclxuXHRcdGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApIDpcclxuXHRcdHJldDtcclxufVxyXG5cclxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXHJcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XHJcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cclxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcclxuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xyXG5cclxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xyXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcclxuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcclxuXHR9XHJcbn1cclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XHJcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcclxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxyXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xyXG5cclxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xyXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxyXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cDovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXHJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcclxuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcclxuXHJcblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxyXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xyXG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XHJcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcclxuXHJcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XHJcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XHJcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xyXG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcclxuXHRcdHJldHVybiBjbG9uZTtcclxuXHR9LFxyXG5cclxuXHRidWlsZEZyYWdtZW50OiBmdW5jdGlvbiggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiApIHtcclxuXHRcdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXHJcblx0XHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXHJcblx0XHRcdG5vZGVzID0gW10sXHJcblx0XHRcdGkgPSAwLFxyXG5cdFx0XHRsID0gZWxlbXMubGVuZ3RoO1xyXG5cclxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0ZWxlbSA9IGVsZW1zWyBpIF07XHJcblxyXG5cdFx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcclxuXHJcblx0XHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XHJcblx0XHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXQsIFBoYW50b21KU1xyXG5cdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xyXG5cclxuXHRcdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xyXG5cdFx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XHJcblxyXG5cdFx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cclxuXHRcdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XHJcblx0XHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgZWxlbS5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKSArIHdyYXBbIDIgXTtcclxuXHJcblx0XHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcclxuXHRcdFx0XHRcdGogPSB3cmFwWyAwIF07XHJcblx0XHRcdFx0XHR3aGlsZSAoIGotLSApIHtcclxuXHRcdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdCwgUGhhbnRvbUpTXHJcblx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XHJcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xyXG5cclxuXHRcdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXHJcblx0XHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xyXG5cclxuXHRcdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5MilcclxuXHRcdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxyXG5cdFx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG5cclxuXHRcdGkgPSAwO1xyXG5cdFx0d2hpbGUgKCAoZWxlbSA9IG5vZGVzWyBpKysgXSkgKSB7XHJcblxyXG5cdFx0XHQvLyAjNDA4NyAtIElmIG9yaWdpbiBhbmQgZGVzdGluYXRpb24gZWxlbWVudHMgYXJlIHRoZSBzYW1lLCBhbmQgdGhpcyBpc1xyXG5cdFx0XHQvLyB0aGF0IGVsZW1lbnQsIGRvIG5vdCBkbyBhbnl0aGluZ1xyXG5cdFx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgIT09IC0xICkge1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XHJcblxyXG5cdFx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcclxuXHRcdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XHJcblxyXG5cdFx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XHJcblx0XHRcdGlmICggY29udGFpbnMgKSB7XHJcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcclxuXHRcdFx0aWYgKCBzY3JpcHRzICkge1xyXG5cdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSB0bXBbIGorKyBdKSApIHtcclxuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcclxuXHRcdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZyYWdtZW50O1xyXG5cdH0sXHJcblxyXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xyXG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsIGtleSxcclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHRmb3IgKCA7IChlbGVtID0gZWxlbXNbIGkgXSkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xyXG5cdFx0XHRpZiAoIGpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XHJcblx0XHRcdFx0a2V5ID0gZWxlbVsgZGF0YV9wcml2LmV4cGFuZG8gXTtcclxuXHJcblx0XHRcdFx0aWYgKCBrZXkgJiYgKGRhdGEgPSBkYXRhX3ByaXYuY2FjaGVbIGtleSBdKSApIHtcclxuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XHJcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCBkYXRhX3ByaXYuY2FjaGVbIGtleSBdICkge1xyXG5cdFx0XHRcdFx0XHQvLyBEaXNjYXJkIGFueSByZW1haW5pbmcgYHByaXZhdGVgIGRhdGFcclxuXHRcdFx0XHRcdFx0ZGVsZXRlIGRhdGFfcHJpdi5jYWNoZVsga2V5IF07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdC8vIERpc2NhcmQgYW55IHJlbWFpbmluZyBgdXNlcmAgZGF0YVxyXG5cdFx0XHRkZWxldGUgZGF0YV91c2VyLmNhY2hlWyBlbGVtWyBkYXRhX3VzZXIuZXhwYW5kbyBdIF07XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxyXG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XHJcblx0fSxcclxuXHJcblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XHJcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcclxuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cclxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IsIGtlZXBEYXRhIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xyXG5cdFx0dmFyIGVsZW0sXHJcblx0XHRcdGVsZW1zID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgdGhpcyApIDogdGhpcyxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0Zm9yICggOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XHJcblx0XHRcdGlmICggIWtlZXBEYXRhICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtICkgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xyXG5cdFx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbGVtICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9LFxyXG5cclxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZWxlbSxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0Zm9yICggOyAoZWxlbSA9IHRoaXNbaV0pICE9IG51bGw7IGkrKyApIHtcclxuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cclxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xyXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xyXG5cclxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xyXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcclxuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XHJcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHJcblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcclxuXHRcdFx0XHRpID0gMCxcclxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XHJcblxyXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcclxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXHJcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xyXG5cclxuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xyXG5cclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXHJcblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcclxuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XHJcblxyXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxyXG5cdFx0XHRcdH0gY2F0Y2goIGUgKSB7fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcclxuXHR9LFxyXG5cclxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgYXJnID0gYXJndW1lbnRzWyAwIF07XHJcblxyXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XHJcblx0XHR0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRhcmcgPSB0aGlzLnBhcmVudE5vZGU7XHJcblxyXG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xyXG5cclxuXHRcdFx0aWYgKCBhcmcgKSB7XHJcblx0XHRcdFx0YXJnLnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBGb3JjZSByZW1vdmFsIGlmIHRoZXJlIHdhcyBubyBuZXcgY29udGVudCAoZS5nLiwgZnJvbSBlbXB0eSBhcmd1bWVudHMpXHJcblx0XHRyZXR1cm4gYXJnICYmIChhcmcubGVuZ3RoIHx8IGFyZy5ub2RlVHlwZSkgPyB0aGlzIDogdGhpcy5yZW1vdmUoKTtcclxuXHR9LFxyXG5cclxuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiB0aGlzLnJlbW92ZSggc2VsZWN0b3IsIHRydWUgKTtcclxuXHR9LFxyXG5cclxuXHRkb21NYW5pcDogZnVuY3Rpb24oIGFyZ3MsIGNhbGxiYWNrICkge1xyXG5cclxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcclxuXHRcdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XHJcblxyXG5cdFx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRzZXQgPSB0aGlzLFxyXG5cdFx0XHRpTm9DbG9uZSA9IGwgLSAxLFxyXG5cdFx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcclxuXHRcdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xyXG5cclxuXHRcdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxyXG5cdFx0aWYgKCBpc0Z1bmN0aW9uIHx8XHJcblx0XHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcclxuXHRcdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpbmRleCApIHtcclxuXHRcdFx0XHR2YXIgc2VsZiA9IHNldC5lcSggaW5kZXggKTtcclxuXHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XHJcblx0XHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c2VsZi5kb21NYW5pcCggYXJncywgY2FsbGJhY2sgKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBsICkge1xyXG5cdFx0XHRmcmFnbWVudCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBhcmdzLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIHRoaXMgKTtcclxuXHRcdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xyXG5cclxuXHRcdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcclxuXHRcdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGZpcnN0ICkge1xyXG5cdFx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcclxuXHRcdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW0gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXHJcblx0XHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcclxuXHRcdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxyXG5cdFx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXRcclxuXHRcdFx0XHRcdFx0XHQvLyBqUXVlcnkubWVyZ2UgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXHJcblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Y2FsbGJhY2suY2FsbCggdGhpc1sgaSBdLCBub2RlLCBpICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XHJcblx0XHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xyXG5cclxuXHRcdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcclxuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXHJcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcclxuXHRcdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcclxuXHRcdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXHJcblx0XHRcdFx0XHRcdFx0IWRhdGFfcHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiYgalF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZWFjaCh7XHJcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXHJcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcclxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXHJcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcclxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcclxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0dmFyIGVsZW1zLFxyXG5cdFx0XHRyZXQgPSBbXSxcclxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxyXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XHJcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XHJcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0XHJcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3NcclxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XHJcblx0fTtcclxufSk7XHJcblxyXG5cclxudmFyIGlmcmFtZSxcclxuXHRlbGVtZGlzcGxheSA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlIHRoZSBhY3R1YWwgZGlzcGxheSBvZiBhIGVsZW1lbnRcclxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgbm9kZU5hbWUgb2YgdGhlIGVsZW1lbnRcclxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBEb2N1bWVudCBvYmplY3RcclxuICovXHJcbi8vIENhbGxlZCBvbmx5IGZyb20gd2l0aGluIGRlZmF1bHREaXNwbGF5XHJcbmZ1bmN0aW9uIGFjdHVhbERpc3BsYXkoIG5hbWUsIGRvYyApIHtcclxuXHR2YXIgc3R5bGUsXHJcblx0XHRlbGVtID0galF1ZXJ5KCBkb2MuY3JlYXRlRWxlbWVudCggbmFtZSApICkuYXBwZW5kVG8oIGRvYy5ib2R5ICksXHJcblxyXG5cdFx0Ly8gZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUgbWlnaHQgYmUgcmVsaWFibHkgdXNlZCBvbmx5IG9uIGF0dGFjaGVkIGVsZW1lbnRcclxuXHRcdGRpc3BsYXkgPSB3aW5kb3cuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUgJiYgKCBzdHlsZSA9IHdpbmRvdy5nZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSggZWxlbVsgMCBdICkgKSA/XHJcblxyXG5cdFx0XHQvLyBVc2Ugb2YgdGhpcyBtZXRob2QgaXMgYSB0ZW1wb3JhcnkgZml4IChtb3JlIGxpa2Ugb3B0aW1pemF0aW9uKSB1bnRpbCBzb21ldGhpbmcgYmV0dGVyIGNvbWVzIGFsb25nLFxyXG5cdFx0XHQvLyBzaW5jZSBpdCB3YXMgcmVtb3ZlZCBmcm9tIHNwZWNpZmljYXRpb24gYW5kIHN1cHBvcnRlZCBvbmx5IGluIEZGXHJcblx0XHRcdHN0eWxlLmRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtWyAwIF0sIFwiZGlzcGxheVwiICk7XHJcblxyXG5cdC8vIFdlIGRvbid0IGhhdmUgYW55IGRhdGEgc3RvcmVkIG9uIHRoZSBlbGVtZW50LFxyXG5cdC8vIHNvIHVzZSBcImRldGFjaFwiIG1ldGhvZCBhcyBmYXN0IHdheSB0byBnZXQgcmlkIG9mIHRoZSBlbGVtZW50XHJcblx0ZWxlbS5kZXRhY2goKTtcclxuXHJcblx0cmV0dXJuIGRpc3BsYXk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUcnkgdG8gZGV0ZXJtaW5lIHRoZSBkZWZhdWx0IGRpc3BsYXkgdmFsdWUgb2YgYW4gZWxlbWVudFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWVcclxuICovXHJcbmZ1bmN0aW9uIGRlZmF1bHREaXNwbGF5KCBub2RlTmFtZSApIHtcclxuXHR2YXIgZG9jID0gZG9jdW1lbnQsXHJcblx0XHRkaXNwbGF5ID0gZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF07XHJcblxyXG5cdGlmICggIWRpc3BsYXkgKSB7XHJcblx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xyXG5cclxuXHRcdC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxyXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiB8fCAhZGlzcGxheSApIHtcclxuXHJcblx0XHRcdC8vIFVzZSB0aGUgYWxyZWFkeS1jcmVhdGVkIGlmcmFtZSBpZiBwb3NzaWJsZVxyXG5cdFx0XHRpZnJhbWUgPSAoaWZyYW1lIHx8IGpRdWVyeSggXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIgKSkuYXBwZW5kVG8oIGRvYy5kb2N1bWVudEVsZW1lbnQgKTtcclxuXHJcblx0XHRcdC8vIEFsd2F5cyB3cml0ZSBhIG5ldyBIVE1MIHNrZWxldG9uIHNvIFdlYmtpdCBhbmQgRmlyZWZveCBkb24ndCBjaG9rZSBvbiByZXVzZVxyXG5cdFx0XHRkb2MgPSBpZnJhbWVbIDAgXS5jb250ZW50RG9jdW1lbnQ7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxyXG5cdFx0XHRkb2Mud3JpdGUoKTtcclxuXHRcdFx0ZG9jLmNsb3NlKCk7XHJcblxyXG5cdFx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xyXG5cdFx0XHRpZnJhbWUuZGV0YWNoKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3RvcmUgdGhlIGNvcnJlY3QgZGVmYXVsdCBkaXNwbGF5XHJcblx0XHRlbGVtZGlzcGxheVsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZGlzcGxheTtcclxufVxyXG52YXIgcm1hcmdpbiA9ICgvXm1hcmdpbi8pO1xyXG5cclxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xyXG5cclxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0Ly8gU3VwcG9ydDogSUU8PTExKywgRmlyZWZveDw9MzArICgjMTUwOTgsICMxNDE1MClcclxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xyXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXHJcblx0XHRpZiAoIGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5vcGVuZXIgKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApO1xyXG5cdH07XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XHJcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcclxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcclxuXHJcblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU5XHJcblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgKCMxMjUzNylcclxuXHRpZiAoIGNvbXB1dGVkICkge1xyXG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XHJcblx0fVxyXG5cclxuXHRpZiAoIGNvbXB1dGVkICkge1xyXG5cclxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xyXG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBpT1MgPCA2XHJcblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXHJcblx0XHQvLyBpT1MgPCA2IChhdCBsZWFzdCkgcmV0dXJucyBwZXJjZW50YWdlIGZvciBhIGxhcmdlciBzZXQgb2YgdmFsdWVzLCBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzXHJcblx0XHQvLyB0aGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6IGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcclxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xyXG5cclxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xyXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xyXG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xyXG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xyXG5cclxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxyXG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XHJcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xyXG5cclxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xyXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xyXG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xyXG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cclxuXHRcdC8vIFN1cHBvcnQ6IElFXHJcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxyXG5cdFx0cmV0ICsgXCJcIiA6XHJcblx0XHRyZXQ7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XHJcblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cclxuXHRyZXR1cm4ge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xyXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxyXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cclxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cclxuXHRcdFx0cmV0dXJuICh0aGlzLmdldCA9IGhvb2tGbikuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLFxyXG5cdFx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcclxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcclxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcclxuXHJcblx0aWYgKCAhZGl2LnN0eWxlICkge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0Ly8gU3VwcG9ydDogSUU5LTExK1xyXG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcclxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XHJcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcclxuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xyXG5cclxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7bWFyZ2luLXRvcDoxcHg7XCIgK1xyXG5cdFx0XCJwb3NpdGlvbjphYnNvbHV0ZVwiO1xyXG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XHJcblxyXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxyXG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXHJcblx0ZnVuY3Rpb24gY29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSgpIHtcclxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cclxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcclxuXHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXHJcblx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xyXG5cdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbi10b3A6MSU7dG9wOjElO1wiICtcclxuXHRcdFx0XCJib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjRweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xyXG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XHJcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcclxuXHJcblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2LCBudWxsICk7XHJcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XHJcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xyXG5cclxuXHRcdGRvY0VsZW0ucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cdH1cclxuXHJcblx0Ly8gU3VwcG9ydDogbm9kZS5qcyBqc2RvbVxyXG5cdC8vIERvbid0IGFzc3VtZSB0aGF0IGdldENvbXB1dGVkU3R5bGUgaXMgYSBwcm9wZXJ0eSBvZiB0aGUgZ2xvYmFsIG9iamVjdFxyXG5cdGlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7XHJcblx0XHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XHJcblx0XHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0XHQvLyBUaGlzIHRlc3QgaXMgZXhlY3V0ZWQgb25seSBvbmNlIGJ1dCB3ZSBzdGlsbCBkbyBtZW1vaXppbmdcclxuXHRcdFx0XHQvLyBzaW5jZSB3ZSBjYW4gdXNlIHRoZSBib3hTaXppbmdSZWxpYWJsZSBwcmUtY29tcHV0aW5nLlxyXG5cdFx0XHRcdC8vIE5vIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHRlc3Qgd2FzIGFscmVhZHkgcGVyZm9ybWVkLCB0aG91Z2guXHJcblx0XHRcdFx0Y29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSgpO1xyXG5cdFx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdFx0Y29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XHJcblx0XHRcdH0sXHJcblx0XHRcdHJlbGlhYmxlTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG5cdFx0XHRcdC8vIENoZWNrIGlmIGRpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHlcclxuXHRcdFx0XHQvLyBnZXRzIGNvbXB1dGVkIG1hcmdpbi1yaWdodCBiYXNlZCBvbiB3aWR0aCBvZiBjb250YWluZXIuICgjMzMzMylcclxuXHRcdFx0XHQvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHRcclxuXHRcdFx0XHQvLyBUaGlzIHN1cHBvcnQgZnVuY3Rpb24gaXMgb25seSBleGVjdXRlZCBvbmNlIHNvIG5vIG1lbW9pemluZyBpcyBuZWVkZWQuXHJcblx0XHRcdFx0dmFyIHJldCxcclxuXHRcdFx0XHRcdG1hcmdpbkRpdiA9IGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XHJcblxyXG5cdFx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXI7IHBhZGRpbmdcclxuXHRcdFx0XHRtYXJnaW5EaXYuc3R5bGUuY3NzVGV4dCA9IGRpdi5zdHlsZS5jc3NUZXh0ID1cclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXHJcblx0XHRcdFx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcclxuXHRcdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtcIiArXHJcblx0XHRcdFx0XHRcImJveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjBcIjtcclxuXHRcdFx0XHRtYXJnaW5EaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBtYXJnaW5EaXYuc3R5bGUud2lkdGggPSBcIjBcIjtcclxuXHRcdFx0XHRkaXYuc3R5bGUud2lkdGggPSBcIjFweFwiO1xyXG5cdFx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cclxuXHRcdFx0XHRyZXQgPSAhcGFyc2VGbG9hdCggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIG1hcmdpbkRpdiwgbnVsbCApLm1hcmdpblJpZ2h0ICk7XHJcblxyXG5cdFx0XHRcdGRvY0VsZW0ucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cdFx0XHRcdGRpdi5yZW1vdmVDaGlsZCggbWFyZ2luRGl2ICk7XHJcblxyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxufSkoKTtcclxuXHJcblxyXG4vLyBBIG1ldGhvZCBmb3IgcXVpY2tseSBzd2FwcGluZyBpbi9vdXQgQ1NTIHByb3BlcnRpZXMgdG8gZ2V0IGNvcnJlY3QgY2FsY3VsYXRpb25zLlxyXG5qUXVlcnkuc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcclxuXHR2YXIgcmV0LCBuYW1lLFxyXG5cdFx0b2xkID0ge307XHJcblxyXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xyXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcclxuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xyXG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xyXG5cdH1cclxuXHJcblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcclxuXHJcblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXHJcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xyXG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcmV0O1xyXG59O1xyXG5cclxuXHJcbnZhclxyXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGUgZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXHJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XHJcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxyXG5cdHJudW1zcGxpdCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoLiopJFwiLCBcImlcIiApLFxyXG5cdHJyZWxOdW0gPSBuZXcgUmVnRXhwKCBcIl4oWystXSk9KFwiICsgcG51bSArIFwiKVwiLCBcImlcIiApLFxyXG5cclxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcclxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XHJcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcclxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcclxuXHR9LFxyXG5cclxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJPXCIsIFwiTW96XCIsIFwibXNcIiBdO1xyXG5cclxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxyXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggc3R5bGUsIG5hbWUgKSB7XHJcblxyXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXHJcblx0aWYgKCBuYW1lIGluIHN0eWxlICkge1xyXG5cdFx0cmV0dXJuIG5hbWU7XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXHJcblx0dmFyIGNhcE5hbWUgPSBuYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpLFxyXG5cdFx0b3JpZ05hbWUgPSBuYW1lLFxyXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcclxuXHJcblx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XHJcblx0XHRpZiAoIG5hbWUgaW4gc3R5bGUgKSB7XHJcblx0XHRcdHJldHVybiBuYW1lO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIG9yaWdOYW1lO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xyXG5cdHZhciBtYXRjaGVzID0gcm51bXNwbGl0LmV4ZWMoIHZhbHVlICk7XHJcblx0cmV0dXJuIG1hdGNoZXMgP1xyXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3NcclxuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAxIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAyIF0gfHwgXCJweFwiICkgOlxyXG5cdFx0dmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcclxuXHR2YXIgaSA9IGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgP1xyXG5cdFx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXHJcblx0XHQ0IDpcclxuXHRcdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcclxuXHRcdG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwLFxyXG5cclxuXHRcdHZhbCA9IDA7XHJcblxyXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcclxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcclxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XHJcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xyXG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcclxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XHJcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xyXG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xyXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XHJcblxyXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXHJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xyXG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdmFsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcclxuXHJcblx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcclxuXHR2YXIgdmFsdWVJc0JvcmRlckJveCA9IHRydWUsXHJcblx0XHR2YWwgPSBuYW1lID09PSBcIndpZHRoXCIgPyBlbGVtLm9mZnNldFdpZHRoIDogZWxlbS5vZmZzZXRIZWlnaHQsXHJcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcclxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcclxuXHJcblx0Ly8gU29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXHJcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XHJcblx0Ly8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDkxNjY4XHJcblx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcclxuXHRcdC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeVxyXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcclxuXHRcdGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHtcclxuXHRcdFx0dmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXHJcblx0XHRpZiAoIHJudW1ub25weC50ZXN0KHZhbCkgKSB7XHJcblx0XHRcdHJldHVybiB2YWw7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcclxuXHRcdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcclxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxyXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xyXG5cclxuXHRcdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcclxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XHJcblx0fVxyXG5cclxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xyXG5cdHJldHVybiAoIHZhbCArXHJcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcclxuXHRcdFx0ZWxlbSxcclxuXHRcdFx0bmFtZSxcclxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxyXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxyXG5cdFx0XHRzdHlsZXNcclxuXHRcdClcclxuXHQpICsgXCJweFwiO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XHJcblx0dmFyIGRpc3BsYXksIGVsZW0sIGhpZGRlbixcclxuXHRcdHZhbHVlcyA9IFtdLFxyXG5cdFx0aW5kZXggPSAwLFxyXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xyXG5cclxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xyXG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YV9wcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKTtcclxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XHJcblx0XHRpZiAoIHNob3cgKSB7XHJcblx0XHRcdC8vIFJlc2V0IHRoZSBpbmxpbmUgZGlzcGxheSBvZiB0aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXNcclxuXHRcdFx0Ly8gYmVpbmcgaGlkZGVuIGJ5IGNhc2NhZGVkIHJ1bGVzIG9yIG5vdFxyXG5cdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gJiYgZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XHJcblx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2V0IGVsZW1lbnRzIHdoaWNoIGhhdmUgYmVlbiBvdmVycmlkZGVuIHdpdGggZGlzcGxheTogbm9uZVxyXG5cdFx0XHQvLyBpbiBhIHN0eWxlc2hlZXQgdG8gd2hhdGV2ZXIgdGhlIGRlZmF1bHQgYnJvd3NlciBzdHlsZSBpc1xyXG5cdFx0XHQvLyBmb3Igc3VjaCBhbiBlbGVtZW50XHJcblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuKCBlbGVtICkgKSB7XHJcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgXCJvbGRkaXNwbGF5XCIsIGRlZmF1bHREaXNwbGF5KGVsZW0ubm9kZU5hbWUpICk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGhpZGRlbiA9IGlzSGlkZGVuKCBlbGVtICk7XHJcblxyXG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiIHx8ICFoaWRkZW4gKSB7XHJcblx0XHRcdFx0ZGF0YV9wcml2LnNldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIsIGhpZGRlbiA/IGRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiBtb3N0IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wXHJcblx0Ly8gdG8gYXZvaWQgdGhlIGNvbnN0YW50IHJlZmxvd1xyXG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XHJcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XHJcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xyXG5cdFx0XHRjb250aW51ZTtcclxuXHRcdH1cclxuXHRcdGlmICggIXNob3cgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgKSB7XHJcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IHNob3cgPyB2YWx1ZXNbIGluZGV4IF0gfHwgXCJcIiA6IFwibm9uZVwiO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW1lbnRzO1xyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHJcblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XHJcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XHJcblx0Y3NzSG9va3M6IHtcclxuXHRcdG9wYWNpdHk6IHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxyXG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcclxuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xyXG5cdGNzc051bWJlcjoge1xyXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxyXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxyXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxyXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXHJcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcclxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxyXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXHJcblx0XHRcIm9yZGVyXCI6IHRydWUsXHJcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcclxuXHRcdFwid2lkb3dzXCI6IHRydWUsXHJcblx0XHRcInpJbmRleFwiOiB0cnVlLFxyXG5cdFx0XCJ6b29tXCI6IHRydWVcclxuXHR9LFxyXG5cclxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXHJcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxyXG5cdGNzc1Byb3BzOiB7XHJcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxyXG5cdH0sXHJcblxyXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXHJcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XHJcblxyXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXHJcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxyXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXHJcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxyXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XHJcblxyXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCAoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBzdHlsZSwgb3JpZ05hbWUgKSApO1xyXG5cclxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXHJcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcclxuXHJcblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcclxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcclxuXHJcblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcclxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmIChyZXQgPSBycmVsTnVtLmV4ZWMoIHZhbHVlICkpICkge1xyXG5cdFx0XHRcdHZhbHVlID0gKCByZXRbMV0gKyAxICkgKiByZXRbMl0gKyBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICkgKTtcclxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcclxuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcclxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElmIGEgbnVtYmVyLCBhZGQgJ3B4JyB0byB0aGUgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcclxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdICkge1xyXG5cdFx0XHRcdHZhbHVlICs9IFwicHhcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xyXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXHJcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcclxuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxyXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8ICh2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXHJcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxyXG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xyXG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcclxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXHJcblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8ICggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIGVsZW0uc3R5bGUsIG9yaWdOYW1lICkgKTtcclxuXHJcblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXHJcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcclxuXHJcblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxyXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xyXG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcclxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXHJcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcclxuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXHJcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xyXG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcclxuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGpRdWVyeS5pc051bWVyaWMoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdmFsO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZWFjaChbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcclxuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcclxuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcclxuXHJcblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXHJcblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcclxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJiBlbGVtLm9mZnNldFdpZHRoID09PSAwID9cclxuXHRcdFx0XHRcdGpRdWVyeS5zd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XHJcblx0XHRcdFx0XHR9KSA6XHJcblx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcclxuXHRcdFx0dmFyIHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApO1xyXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBleHRyYSA/XHJcblx0XHRcdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXHJcblx0XHRcdFx0XHRlbGVtLFxyXG5cdFx0XHRcdFx0bmFtZSxcclxuXHRcdFx0XHRcdGV4dHJhLFxyXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcclxuXHRcdFx0XHRcdHN0eWxlc1xyXG5cdFx0XHRcdCkgOiAwXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fTtcclxufSk7XHJcblxyXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luUmlnaHQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5SaWdodCxcclxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LnN3YXAoIGVsZW0sIHsgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIgfSxcclxuXHRcdFx0XHRjdXJDU1MsIFsgZWxlbSwgXCJtYXJnaW5SaWdodFwiIF0gKTtcclxuXHRcdH1cclxuXHR9XHJcbik7XHJcblxyXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXHJcbmpRdWVyeS5lYWNoKHtcclxuXHRtYXJnaW46IFwiXCIsXHJcblx0cGFkZGluZzogXCJcIixcclxuXHRib3JkZXI6IFwiV2lkdGhcIlxyXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XHJcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcclxuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgaSA9IDAsXHJcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcclxuXHJcblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXHJcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdChcIiBcIikgOiBbIHZhbHVlIF07XHJcblxyXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XHJcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxyXG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcclxuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXHJcblx0XHRcdFx0bWFwID0ge30sXHJcblx0XHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XHJcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XHJcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIG1hcDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XHJcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xyXG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XHJcblx0fSxcclxuXHRzaG93OiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xyXG5cdH0sXHJcblx0aGlkZTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcclxuXHR9LFxyXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xyXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xyXG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggaXNIaWRkZW4oIHRoaXMgKSApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcclxuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xyXG59XHJcbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xyXG5cclxuVHdlZW4ucHJvdG90eXBlID0ge1xyXG5cdGNvbnN0cnVjdG9yOiBUd2VlbixcclxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XHJcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xyXG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcclxuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IFwic3dpbmdcIjtcclxuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xyXG5cdFx0dGhpcy5lbmQgPSBlbmQ7XHJcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xyXG5cdH0sXHJcblx0Y3VyOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XHJcblxyXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XHJcblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcclxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xyXG5cdH0sXHJcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcclxuXHRcdHZhciBlYXNlZCxcclxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xyXG5cclxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xyXG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcclxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cclxuXHRcdFx0KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xyXG5cclxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XHJcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcclxuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcbn07XHJcblxyXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XHJcblxyXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XHJcblx0X2RlZmF1bHQ6IHtcclxuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xyXG5cdFx0XHR2YXIgcmVzdWx0O1xyXG5cclxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJlxyXG5cdFx0XHRcdCghdHdlZW4uZWxlbS5zdHlsZSB8fCB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XHJcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXHJcblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xyXG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxyXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XHJcblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxyXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcclxuXHRcdH0sXHJcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcclxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXHJcblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cclxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cclxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xyXG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XHJcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0uc3R5bGUgJiYgKCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHwgalF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcclxuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vLyBTdXBwb3J0OiBJRTlcclxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXHJcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcclxuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcclxuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5qUXVlcnkuZWFzaW5nID0ge1xyXG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XHJcblx0XHRyZXR1cm4gcDtcclxuXHR9LFxyXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcclxuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XHJcblxyXG4vLyBCYWNrIENvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxyXG5qUXVlcnkuZnguc3RlcCA9IHt9O1xyXG5cclxuXHJcblxyXG5cclxudmFyXHJcblx0ZnhOb3csIHRpbWVySWQsXHJcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXHJcblx0cmZ4bnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKSxcclxuXHRycnVuID0gL3F1ZXVlSG9va3MkLyxcclxuXHRhbmltYXRpb25QcmVmaWx0ZXJzID0gWyBkZWZhdWx0UHJlZmlsdGVyIF0sXHJcblx0dHdlZW5lcnMgPSB7XHJcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XHJcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICksXHJcblx0XHRcdFx0dGFyZ2V0ID0gdHdlZW4uY3VyKCksXHJcblx0XHRcdFx0cGFydHMgPSByZnhudW0uZXhlYyggdmFsdWUgKSxcclxuXHRcdFx0XHR1bml0ID0gcGFydHMgJiYgcGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcclxuXHJcblx0XHRcdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcclxuXHRcdFx0XHRzdGFydCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiArdGFyZ2V0ICkgJiZcclxuXHRcdFx0XHRcdHJmeG51bS5leGVjKCBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCBwcm9wICkgKSxcclxuXHRcdFx0XHRzY2FsZSA9IDEsXHJcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDIwO1xyXG5cclxuXHRcdFx0aWYgKCBzdGFydCAmJiBzdGFydFsgMyBdICE9PSB1bml0ICkge1xyXG5cdFx0XHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3NcclxuXHRcdFx0XHR1bml0ID0gdW5pdCB8fCBzdGFydFsgMyBdO1xyXG5cclxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXHJcblx0XHRcdFx0cGFydHMgPSBwYXJ0cyB8fCBbXTtcclxuXHJcblx0XHRcdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcclxuXHRcdFx0XHRzdGFydCA9ICt0YXJnZXQgfHwgMTtcclxuXHJcblx0XHRcdFx0ZG8ge1xyXG5cdFx0XHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXHJcblx0XHRcdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xyXG5cdFx0XHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XHJcblxyXG5cdFx0XHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxyXG5cdFx0XHRcdFx0c3RhcnQgPSBzdGFydCAvIHNjYWxlO1xyXG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCBwcm9wLCBzdGFydCArIHVuaXQgKTtcclxuXHJcblx0XHRcdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKCksXHJcblx0XHRcdFx0Ly8gYnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaFxyXG5cdFx0XHRcdH0gd2hpbGUgKCBzY2FsZSAhPT0gKHNjYWxlID0gdHdlZW4uY3VyKCkgLyB0YXJnZXQpICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9ucyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBVcGRhdGUgdHdlZW4gcHJvcGVydGllc1xyXG5cdFx0XHRpZiAoIHBhcnRzICkge1xyXG5cdFx0XHRcdHN0YXJ0ID0gdHdlZW4uc3RhcnQgPSArc3RhcnQgfHwgK3RhcmdldCB8fCAwO1xyXG5cdFx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xyXG5cdFx0XHRcdC8vIElmIGEgKz0vLT0gdG9rZW4gd2FzIHByb3ZpZGVkLCB3ZSdyZSBkb2luZyBhIHJlbGF0aXZlIGFuaW1hdGlvblxyXG5cdFx0XHRcdHR3ZWVuLmVuZCA9IHBhcnRzWyAxIF0gP1xyXG5cdFx0XHRcdFx0c3RhcnQgKyAoIHBhcnRzWyAxIF0gKyAxICkgKiBwYXJ0c1sgMiBdIDpcclxuXHRcdFx0XHRcdCtwYXJ0c1sgMiBdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdHdlZW47XHJcblx0XHR9IF1cclxuXHR9O1xyXG5cclxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxyXG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcclxuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XHJcblx0fSk7XHJcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcclxufVxyXG5cclxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cclxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcclxuXHR2YXIgd2hpY2gsXHJcblx0XHRpID0gMCxcclxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcclxuXHJcblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxyXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XHJcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XHJcblx0Zm9yICggOyBpIDwgNCA7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcclxuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XHJcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcclxuXHR9XHJcblxyXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xyXG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBhdHRycztcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XHJcblx0dmFyIHR3ZWVuLFxyXG5cdFx0Y29sbGVjdGlvbiA9ICggdHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggdHdlZW5lcnNbIFwiKlwiIF0gKSxcclxuXHRcdGluZGV4ID0gMCxcclxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xyXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XHJcblx0XHRpZiAoICh0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApKSApIHtcclxuXHJcblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XHJcblx0XHRcdHJldHVybiB0d2VlbjtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xyXG5cdC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgdHdlZW4sIGhvb2tzLCBvbGRmaXJlLCBkaXNwbGF5LCBjaGVja0Rpc3BsYXksXHJcblx0XHRhbmltID0gdGhpcyxcclxuXHRcdG9yaWcgPSB7fSxcclxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcclxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW4oIGVsZW0gKSxcclxuXHRcdGRhdGFTaG93ID0gZGF0YV9wcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xyXG5cclxuXHQvLyBIYW5kbGUgcXVldWU6IGZhbHNlIHByb21pc2VzXHJcblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcclxuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcclxuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcclxuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xyXG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcclxuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xyXG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHRcdGhvb2tzLnVucXVldWVkKys7XHJcblxyXG5cdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XHJcblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXHJcblx0XHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XHJcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0Ly8gSGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3NcclxuXHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcImhlaWdodFwiIGluIHByb3BzIHx8IFwid2lkdGhcIiBpbiBwcm9wcyApICkge1xyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbm90aGluZyBzbmVha3Mgb3V0XHJcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFOS0xMCBkbyBub3RcclxuXHRcdC8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZFxyXG5cdFx0Ly8gb3ZlcmZsb3dZIGFyZSBzZXQgdG8gdGhlIHNhbWUgdmFsdWVcclxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xyXG5cclxuXHRcdC8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGlubGluZS1ibG9jayBmb3IgaGVpZ2h0L3dpZHRoXHJcblx0XHQvLyBhbmltYXRpb25zIG9uIGlubGluZSBlbGVtZW50cyB0aGF0IGFyZSBoYXZpbmcgd2lkdGgvaGVpZ2h0IGFuaW1hdGVkXHJcblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcclxuXHJcblx0XHQvLyBUZXN0IGRlZmF1bHQgZGlzcGxheSBpZiBkaXNwbGF5IGlzIGN1cnJlbnRseSBcIm5vbmVcIlxyXG5cdFx0Y2hlY2tEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgP1xyXG5cdFx0XHRkYXRhX3ByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApIHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5O1xyXG5cclxuXHRcdGlmICggY2hlY2tEaXNwbGF5ID09PSBcImlubGluZVwiICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcclxuXHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XHJcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcblx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcclxuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XHJcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcclxuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvLyBzaG93L2hpZGUgcGFzc1xyXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XHJcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XHJcblx0XHRpZiAoIHJmeHR5cGVzLmV4ZWMoIHZhbHVlICkgKSB7XHJcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xyXG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XHJcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xyXG5cclxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBkYXRhU2hvdyBsZWZ0IG92ZXIgZnJvbSBhIHN0b3BwZWQgaGlkZSBvciBzaG93IGFuZCB3ZSBhcmUgZ29pbmcgdG8gcHJvY2VlZCB3aXRoIHNob3csIHdlIHNob3VsZCBwcmV0ZW5kIHRvIGJlIGhpZGRlblxyXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xyXG5cclxuXHRcdC8vIEFueSBub24tZnggdmFsdWUgc3RvcHMgdXMgZnJvbSByZXN0b3JpbmcgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWVcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRpc3BsYXkgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoICFqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xyXG5cdFx0aWYgKCBkYXRhU2hvdyApIHtcclxuXHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xyXG5cdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZGF0YVNob3cgPSBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN0b3JlIHN0YXRlIGlmIGl0cyB0b2dnbGUgLSBlbmFibGVzIC5zdG9wKCkudG9nZ2xlKCkgdG8gXCJyZXZlcnNlXCJcclxuXHRcdGlmICggdG9nZ2xlICkge1xyXG5cdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBoaWRkZW4gKSB7XHJcblx0XHRcdGpRdWVyeSggZWxlbSApLnNob3coKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGFuaW0uZG9uZShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5oaWRlKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFx0YW5pbS5kb25lKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgcHJvcDtcclxuXHJcblx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcclxuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xyXG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xyXG5cdFx0XHR0d2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xyXG5cclxuXHRcdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XHJcblx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHR3ZWVuLnN0YXJ0O1xyXG5cdFx0XHRcdGlmICggaGlkZGVuICkge1xyXG5cdFx0XHRcdFx0dHdlZW4uZW5kID0gdHdlZW4uc3RhcnQ7XHJcblx0XHRcdFx0XHR0d2Vlbi5zdGFydCA9IHByb3AgPT09IFwid2lkdGhcIiB8fCBwcm9wID09PSBcImhlaWdodFwiID8gMSA6IDA7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdC8vIElmIHRoaXMgaXMgYSBub29wIGxpa2UgLmhpZGUoKS5oaWRlKCksIHJlc3RvcmUgYW4gb3ZlcndyaXR0ZW4gZGlzcGxheSB2YWx1ZVxyXG5cdH0gZWxzZSBpZiAoIChkaXNwbGF5ID09PSBcIm5vbmVcIiA/IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5KSA9PT0gXCJpbmxpbmVcIiApIHtcclxuXHRcdHN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XHJcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcclxuXHJcblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXHJcblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XHJcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcclxuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcclxuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XHJcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xyXG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xyXG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xyXG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XHJcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcclxuXHRcdH1cclxuXHJcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xyXG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xyXG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcclxuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XHJcblxyXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXHJcblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcclxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XHJcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xyXG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcclxuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XHJcblx0dmFyIHJlc3VsdCxcclxuXHRcdHN0b3BwZWQsXHJcblx0XHRpbmRleCA9IDAsXHJcblx0XHRsZW5ndGggPSBhbmltYXRpb25QcmVmaWx0ZXJzLmxlbmd0aCxcclxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXHJcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XHJcblx0XHR9KSxcclxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxyXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5NylcclxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXHJcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxyXG5cdFx0XHRcdGluZGV4ID0gMCxcclxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcclxuXHJcblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xyXG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSk7XHJcblxyXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSh7XHJcblx0XHRcdGVsZW06IGVsZW0sXHJcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxyXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7IHNwZWNpYWxFYXNpbmc6IHt9IH0sIG9wdGlvbnMgKSxcclxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxyXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXHJcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcclxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXHJcblx0XHRcdHR3ZWVuczogW10sXHJcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xyXG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcclxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xyXG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcclxuXHRcdFx0XHRyZXR1cm4gdHdlZW47XHJcblx0XHRcdH0sXHJcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xyXG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXHJcblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcclxuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxyXG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcclxuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XHJcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3RcclxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9XHJcblx0XHR9KSxcclxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xyXG5cclxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xyXG5cclxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcclxuXHRcdHJlc3VsdCA9IGFuaW1hdGlvblByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcclxuXHRcdGlmICggcmVzdWx0ICkge1xyXG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcclxuXHJcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcclxuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xyXG5cdH1cclxuXHJcblx0alF1ZXJ5LmZ4LnRpbWVyKFxyXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xyXG5cdFx0XHRlbGVtOiBlbGVtLFxyXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXHJcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxyXG5cdFx0fSlcclxuXHQpO1xyXG5cclxuXHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xyXG5cdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcclxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXHJcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXHJcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcclxufVxyXG5cclxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xyXG5cclxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcclxuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcclxuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRwcm9wcyA9IHByb3BzLnNwbGl0KFwiIFwiKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgcHJvcCxcclxuXHRcdFx0aW5kZXggPSAwLFxyXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XHJcblxyXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcclxuXHRcdFx0dHdlZW5lcnNbIHByb3AgXSA9IHR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XHJcblx0XHRcdHR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcclxuXHRcdGlmICggcHJlcGVuZCApIHtcclxuXHRcdFx0YW5pbWF0aW9uUHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0YW5pbWF0aW9uUHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XHJcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xyXG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcclxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXHJcblx0XHRkdXJhdGlvbjogc3BlZWQsXHJcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcclxuXHR9O1xyXG5cclxuXHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZngub2ZmID8gMCA6IHR5cGVvZiBvcHQuZHVyYXRpb24gPT09IFwibnVtYmVyXCIgPyBvcHQuZHVyYXRpb24gOlxyXG5cdFx0b3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgPyBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXSA6IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XHJcblxyXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxyXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xyXG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xyXG5cdH1cclxuXHJcblx0Ly8gUXVldWVpbmdcclxuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xyXG5cclxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcclxuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XHJcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gb3B0O1xyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xyXG5cclxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxyXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbiApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcclxuXHJcblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxyXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSh7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XHJcblx0fSxcclxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxyXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXHJcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3RcclxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XHJcblxyXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxyXG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YV9wcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xyXG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcclxuXHJcblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XHJcblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XHJcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcclxuXHR9LFxyXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xyXG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcclxuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xyXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcclxuXHRcdFx0c3RvcCggZ290b0VuZCApO1xyXG5cdFx0fTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcclxuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XHJcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XHJcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcclxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXHJcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcclxuXHRcdFx0XHRkYXRhID0gZGF0YV9wcml2LmdldCggdGhpcyApO1xyXG5cclxuXHRcdFx0aWYgKCBpbmRleCApIHtcclxuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xyXG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcclxuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xyXG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgKHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUpICkge1xyXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xyXG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXHJcblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcclxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxyXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcclxuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGluZGV4LFxyXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3ByaXYuZ2V0KCB0aGlzICksXHJcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXHJcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcclxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxyXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcclxuXHJcblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcclxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xyXG5cclxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XHJcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcclxuXHJcblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcclxuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cclxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcclxuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcclxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcclxuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxyXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xyXG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xyXG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXHJcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcclxuXHRcdH0pO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZWFjaChbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xyXG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxyXG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XHJcblx0fTtcclxufSk7XHJcblxyXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXHJcbmpRdWVyeS5lYWNoKHtcclxuXHRzbGlkZURvd246IGdlbkZ4KFwic2hvd1wiKSxcclxuXHRzbGlkZVVwOiBnZW5GeChcImhpZGVcIiksXHJcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KFwidG9nZ2xlXCIpLFxyXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxyXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcclxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxyXG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcclxuXHR9O1xyXG59KTtcclxuXHJcbmpRdWVyeS50aW1lcnMgPSBbXTtcclxualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgdGltZXIsXHJcblx0XHRpID0gMCxcclxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XHJcblxyXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xyXG5cclxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XHJcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xyXG5cdFx0Ly8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkXHJcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcclxuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xyXG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcclxuXHR9XHJcblx0ZnhOb3cgPSB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XHJcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xyXG5cdGlmICggdGltZXIoKSApIHtcclxuXHRcdGpRdWVyeS5meC5zdGFydCgpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRqUXVlcnkudGltZXJzLnBvcCgpO1xyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xyXG5cclxualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XHJcblx0aWYgKCAhdGltZXJJZCApIHtcclxuXHRcdHRpbWVySWQgPSBzZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XHJcblx0Y2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xyXG5cdHRpbWVySWQgPSBudWxsO1xyXG59O1xyXG5cclxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcclxuXHRzbG93OiA2MDAsXHJcblx0ZmFzdDogMjAwLFxyXG5cdC8vIERlZmF1bHQgc3BlZWRcclxuXHRfZGVmYXVsdDogNDAwXHJcbn07XHJcblxyXG5cclxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxyXG4vLyBodHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXHJcbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xyXG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XHJcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xyXG5cclxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xyXG5cdFx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XHJcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGNsZWFyVGltZW91dCggdGltZW91dCApO1xyXG5cdFx0fTtcclxuXHR9KTtcclxufTtcclxuXHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXHJcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXHJcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xyXG5cclxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBpT1M8PTUuMSwgQW5kcm9pZDw9NC4yK1xyXG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxyXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXHJcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3RcclxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPD0yLjNcclxuXHQvLyBPcHRpb25zIGluc2lkZSBkaXNhYmxlZCBzZWxlY3RzIGFyZSBpbmNvcnJlY3RseSBtYXJrZWQgYXMgZGlzYWJsZWRcclxuXHRzZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xyXG5cdHN1cHBvcnQub3B0RGlzYWJsZWQgPSAhb3B0LmRpc2FibGVkO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXHJcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cclxuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xyXG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XHJcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcclxuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XHJcbn0pKCk7XHJcblxyXG5cclxudmFyIG5vZGVIb29rLCBib29sSG9vayxcclxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XHJcblx0XHR9KTtcclxuXHR9XHJcbn0pO1xyXG5cclxualF1ZXJ5LmV4dGVuZCh7XHJcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0dmFyIGhvb2tzLCByZXQsXHJcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcclxuXHJcblx0XHQvLyBkb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXHJcblx0XHRpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcclxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBzdHJ1bmRlZmluZWQgKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlXHJcblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXHJcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcclxuXHRcdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gfHxcclxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiBub2RlSG9vayApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsICkge1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcclxuXHJcblx0XHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXHJcblx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/XHJcblx0XHRcdFx0dW5kZWZpbmVkIDpcclxuXHRcdFx0XHRyZXQ7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0dmFyIG5hbWUsIHByb3BOYW1lLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApO1xyXG5cclxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdHdoaWxlICggKG5hbWUgPSBhdHRyTmFtZXNbaSsrXSkgKSB7XHJcblx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XHJcblxyXG5cdFx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBnZXQgc3BlY2lhbCB0cmVhdG1lbnQgKCMxMDg3MClcclxuXHRcdFx0XHRpZiAoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApICkge1xyXG5cdFx0XHRcdFx0Ly8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2VcclxuXHRcdFx0XHRcdGVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRhdHRySG9va3M6IHtcclxuXHRcdHR5cGU6IHtcclxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcclxuXHRcdFx0XHRcdGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XHJcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcclxuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcclxuXHRcdFx0XHRcdGlmICggdmFsICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXHJcbmJvb2xIb29rID0ge1xyXG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xyXG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2VcclxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbmFtZTtcclxuXHR9XHJcbn07XHJcbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XHJcblxyXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdHZhciByZXQsIGhhbmRsZTtcclxuXHRcdGlmICggIWlzWE1MICkge1xyXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXHJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIG5hbWUgXTtcclxuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gcmV0O1xyXG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XHJcblx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIDpcclxuXHRcdFx0XHRudWxsO1xyXG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSBoYW5kbGU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH07XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdHByb3BGaXg6IHtcclxuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxyXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXHJcblx0fSxcclxuXHJcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0dmFyIHJldCwgaG9va3MsIG5vdHhtbCxcclxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xyXG5cclxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcclxuXHRcdGlmICggIWVsZW0gfHwgblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRub3R4bWwgPSBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICk7XHJcblxyXG5cdFx0aWYgKCBub3R4bWwgKSB7XHJcblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3NcclxuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcclxuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRyZXR1cm4gaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApKSAhPT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRyZXQgOlxyXG5cdFx0XHRcdCggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsID9cclxuXHRcdFx0XHRyZXQgOlxyXG5cdFx0XHRcdGVsZW1bIG5hbWUgXTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRwcm9wSG9va3M6IHtcclxuXHRcdHRhYkluZGV4OiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIGVsZW0uaGFzQXR0cmlidXRlKCBcInRhYmluZGV4XCIgKSB8fCByZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fCBlbGVtLmhyZWYgP1xyXG5cdFx0XHRcdFx0ZWxlbS50YWJJbmRleCA6XHJcblx0XHRcdFx0XHQtMTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xyXG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmpRdWVyeS5lYWNoKFtcclxuXHRcInRhYkluZGV4XCIsXHJcblx0XCJyZWFkT25seVwiLFxyXG5cdFwibWF4TGVuZ3RoXCIsXHJcblx0XCJjZWxsU3BhY2luZ1wiLFxyXG5cdFwiY2VsbFBhZGRpbmdcIixcclxuXHRcInJvd1NwYW5cIixcclxuXHRcImNvbFNwYW5cIixcclxuXHRcInVzZU1hcFwiLFxyXG5cdFwiZnJhbWVCb3JkZXJcIixcclxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXHJcbl0sIGZ1bmN0aW9uKCkge1xyXG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxudmFyIHJjbGFzcyA9IC9bXFx0XFxyXFxuXFxmXS9nO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxyXG5cdFx0XHRwcm9jZWVkID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGg7XHJcblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaiApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgdGhpcy5jbGFzc05hbWUgKSApO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHByb2NlZWQgKSB7XHJcblx0XHRcdC8vIFRoZSBkaXNqdW5jdGlvbiBoZXJlIGlzIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgcmVtb3ZlQ2xhc3MpXHJcblx0XHRcdGNsYXNzZXMgPSAoIHZhbHVlIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdO1xyXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBlbGVtLmNsYXNzTmFtZSA/XHJcblx0XHRcdFx0XHQoIFwiIFwiICsgZWxlbS5jbGFzc05hbWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKSA6XHJcblx0XHRcdFx0XHRcIiBcIlxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdGlmICggY3VyICkge1xyXG5cdFx0XHRcdFx0aiA9IDA7XHJcblx0XHRcdFx0XHR3aGlsZSAoIChjbGF6eiA9IGNsYXNzZXNbaisrXSkgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcclxuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIG9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXHJcblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmNsYXNzTmFtZSAhPT0gZmluYWxWYWx1ZSApIHtcclxuXHRcdFx0XHRcdFx0ZWxlbS5jbGFzc05hbWUgPSBmaW5hbFZhbHVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcclxuXHRcdFx0cHJvY2VlZCA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgfHwgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGg7XHJcblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaiApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgdGhpcy5jbGFzc05hbWUgKSApO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdGlmICggcHJvY2VlZCApIHtcclxuXHRcdFx0Y2xhc3NlcyA9ICggdmFsdWUgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcclxuXHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF07XHJcblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcclxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgP1xyXG5cdFx0XHRcdFx0KCBcIiBcIiArIGVsZW0uY2xhc3NOYW1lICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICkgOlxyXG5cdFx0XHRcdFx0XCJcIlxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdGlmICggY3VyICkge1xyXG5cdFx0XHRcdFx0aiA9IDA7XHJcblx0XHRcdFx0XHR3aGlsZSAoIChjbGF6eiA9IGNsYXNzZXNbaisrXSkgKSB7XHJcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPj0gMCApIHtcclxuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cclxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSB2YWx1ZSA/IGpRdWVyeS50cmltKCBjdXIgKSA6IFwiXCI7XHJcblx0XHRcdFx0XHRpZiAoIGVsZW0uY2xhc3NOYW1lICE9PSBmaW5hbFZhbHVlICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XHJcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyggdmFsdWUuY2FsbCh0aGlzLCBpLCB0aGlzLmNsYXNzTmFtZSwgc3RhdGVWYWwpLCBzdGF0ZVZhbCApO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcclxuXHRcdFx0XHR2YXIgY2xhc3NOYW1lLFxyXG5cdFx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICksXHJcblx0XHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xyXG5cclxuXHRcdFx0XHR3aGlsZSAoIChjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSkgKSB7XHJcblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3RcclxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XHJcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcclxuXHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gc3RydW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xyXG5cdFx0XHRcdGlmICggdGhpcy5jbGFzc05hbWUgKSB7XHJcblx0XHRcdFx0XHQvLyBzdG9yZSBjbGFzc05hbWUgaWYgc2V0XHJcblx0XHRcdFx0XHRkYXRhX3ByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgdGhpcy5jbGFzc05hbWUgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXHJcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxyXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cclxuXHRcdFx0XHR0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/IFwiXCIgOiBkYXRhX3ByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCI7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHR2YXIgY2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xyXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRpZiAoIHRoaXNbaV0ubm9kZVR5cGUgPT09IDEgJiYgKFwiIFwiICsgdGhpc1tpXS5jbGFzc05hbWUgKyBcIiBcIikucmVwbGFjZShyY2xhc3MsIFwiIFwiKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+PSAwICkge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxuXHJcblxyXG52YXIgcnJldHVybiA9IC9cXHIvZztcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXHJcblx0XHRcdGVsZW0gPSB0aGlzWzBdO1xyXG5cclxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdGlmICggZWxlbSApIHtcclxuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcclxuXHJcblx0XHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApKSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XHJcblxyXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiID9cclxuXHRcdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcclxuXHRcdFx0XHRcdHJldC5yZXBsYWNlKHJyZXR1cm4sIFwiXCIpIDpcclxuXHRcdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxyXG5cdFx0XHRcdFx0cmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdHZhciB2YWw7XHJcblxyXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XHJcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xyXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdHZhbCA9IFwiXCI7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xyXG5cdFx0XHRcdHZhbCArPSBcIlwiO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xyXG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcclxuXHJcblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXHJcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoXCJzZXRcIiBpbiBob29rcykgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG59KTtcclxuXHJcbmpRdWVyeS5leHRlbmQoe1xyXG5cdHZhbEhvb2tzOiB7XHJcblx0XHRvcHRpb246IHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XHJcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cclxuXHRcdFx0XHRcdHZhbCA6XHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTEwLTExK1xyXG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxyXG5cdFx0XHRcdFx0alF1ZXJ5LnRyaW0oIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdHNlbGVjdDoge1xyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLFxyXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcclxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxyXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIiB8fCBpbmRleCA8IDAsXHJcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXHJcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aCxcclxuXHRcdFx0XHRcdGkgPSBpbmRleCA8IDAgP1xyXG5cdFx0XHRcdFx0XHRtYXggOlxyXG5cdFx0XHRcdFx0XHRvbmUgPyBpbmRleCA6IDA7XHJcblxyXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcclxuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcclxuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcclxuXHJcblx0XHRcdFx0XHQvLyBJRTYtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcclxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxyXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcclxuXHRcdFx0XHRcdFx0XHQoIHN1cHBvcnQub3B0RGlzYWJsZWQgPyAhb3B0aW9uLmRpc2FibGVkIDogb3B0aW9uLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT09IG51bGwgKSAmJlxyXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8ICFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxyXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xyXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XHJcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcclxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXHJcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxyXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcclxuXHRcdFx0XHRcdGlmICggKG9wdGlvbi5zZWxlY3RlZCA9IGpRdWVyeS5pbkFycmF5KCBvcHRpb24udmFsdWUsIHZhbHVlcyApID49IDApICkge1xyXG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcclxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XHJcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxyXG5qUXVlcnkuZWFjaChbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xyXG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XHJcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeShlbGVtKS52YWwoKSwgdmFsdWUgKSA+PSAwICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcclxuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XHJcblx0XHR9O1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXHJcblxyXG5cclxualF1ZXJ5LmVhY2goIChcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIFwiICtcclxuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcclxuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnVcIikuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHJcblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XHJcblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxyXG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcclxuXHR9O1xyXG59KTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcclxuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xyXG5cdH0sXHJcblxyXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XHJcblx0fSxcclxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xyXG5cdH0sXHJcblxyXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XHJcblx0fSxcclxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcclxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gdGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6IHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xyXG5cclxudmFyIHJxdWVyeSA9ICgvXFw/Lyk7XHJcblxyXG5cclxuXHJcbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXHJcbi8vIFdvcmthcm91bmQgZmFpbHVyZSB0byBzdHJpbmctY2FzdCBudWxsIGlucHV0XHJcbmpRdWVyeS5wYXJzZUpTT04gPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSArIFwiXCIgKTtcclxufTtcclxuXHJcblxyXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXHJcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cdHZhciB4bWwsIHRtcDtcclxuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fVxyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTlcclxuXHR0cnkge1xyXG5cdFx0dG1wID0gbmV3IERPTVBhcnNlcigpO1xyXG5cdFx0eG1sID0gdG1wLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XHJcblx0fSBjYXRjaCAoIGUgKSB7XHJcblx0XHR4bWwgPSB1bmRlZmluZWQ7XHJcblx0fVxyXG5cclxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XHJcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xyXG5cdH1cclxuXHRyZXR1cm4geG1sO1xyXG59O1xyXG5cclxuXHJcbnZhclxyXG5cdHJoYXNoID0gLyMuKiQvLFxyXG5cdHJ0cyA9IC8oWz8mXSlfPVteJl0qLyxcclxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXHJcblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXHJcblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcclxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcclxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXHJcblx0cnVybCA9IC9eKFtcXHcuKy1dKzopKD86XFwvXFwvKD86W15cXC8/I10qQHwpKFteXFwvPyM6XSopKD86OihcXGQrKXwpfCkvLFxyXG5cclxuXHQvKiBQcmVmaWx0ZXJzXHJcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcclxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxyXG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcclxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXHJcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxyXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcclxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxyXG5cdCAqL1xyXG5cdHByZWZpbHRlcnMgPSB7fSxcclxuXHJcblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xyXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcclxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXHJcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXHJcblx0ICovXHJcblx0dHJhbnNwb3J0cyA9IHt9LFxyXG5cclxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cclxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXHJcblxyXG5cdC8vIERvY3VtZW50IGxvY2F0aW9uXHJcblx0YWpheExvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLmhyZWYsXHJcblxyXG5cdC8vIFNlZ21lbnQgbG9jYXRpb24gaW50byBwYXJ0c1xyXG5cdGFqYXhMb2NQYXJ0cyA9IHJ1cmwuZXhlYyggYWpheExvY2F0aW9uLnRvTG93ZXJDYXNlKCkgKSB8fCBbXTtcclxuXHJcbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcclxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XHJcblxyXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcclxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XHJcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBkYXRhVHlwZSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XHJcblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cclxuXHRcdFx0d2hpbGUgKCAoZGF0YVR5cGUgPSBkYXRhVHlwZXNbaSsrXSkgKSB7XHJcblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcclxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWzBdID09PSBcIitcIiApIHtcclxuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcclxuXHRcdFx0XHRcdChzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10pLnVuc2hpZnQoIGZ1bmMgKTtcclxuXHJcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS5wdXNoKCBmdW5jICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXHJcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XHJcblxyXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcclxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xyXG5cclxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcclxuXHRcdHZhciBzZWxlY3RlZDtcclxuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XHJcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xyXG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmICFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcclxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XHJcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcclxuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XHJcbn1cclxuXHJcbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xyXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxyXG4vLyBGaXhlcyAjOTg4N1xyXG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcclxuXHR2YXIga2V5LCBkZWVwLFxyXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xyXG5cclxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xyXG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8IChkZWVwID0ge30pICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAoIGRlZXAgKSB7XHJcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiB0YXJnZXQ7XHJcbn1cclxuXHJcbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcclxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcclxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXHJcbiAqL1xyXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xyXG5cclxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXHJcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXHJcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcclxuXHJcblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3NcclxuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcclxuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcclxuXHRpZiAoIGN0ICkge1xyXG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcclxuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcclxuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcclxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcclxuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xyXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XHJcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWzBdIF0gKSB7XHJcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcclxuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXHJcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxyXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXHJcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxyXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcclxuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XHJcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XHJcblx0fVxyXG59XHJcblxyXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXHJcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxyXG4gKi9cclxuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xyXG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxyXG5cdFx0Y29udmVydGVycyA9IHt9LFxyXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxyXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcclxuXHJcblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXHJcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcclxuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xyXG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cclxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxyXG5cdHdoaWxlICggY3VycmVudCApIHtcclxuXHJcblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcclxuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcclxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcclxuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJldiA9IGN1cnJlbnQ7XHJcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XHJcblxyXG5cdFx0aWYgKCBjdXJyZW50ICkge1xyXG5cclxuXHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cclxuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcclxuXHJcblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XHJcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXHJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XHJcblxyXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXHJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcclxuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcclxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XHJcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxyXG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xyXG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXHJcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cclxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzWyBcInRocm93c1wiIF0gKSB7XHJcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xyXG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4geyBzdGF0ZTogXCJwYXJzZXJlcnJvclwiLCBlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnQgfTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKHtcclxuXHJcblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXHJcblx0YWN0aXZlOiAwLFxyXG5cclxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XHJcblx0bGFzdE1vZGlmaWVkOiB7fSxcclxuXHRldGFnOiB7fSxcclxuXHJcblx0YWpheFNldHRpbmdzOiB7XHJcblx0XHR1cmw6IGFqYXhMb2NhdGlvbixcclxuXHRcdHR5cGU6IFwiR0VUXCIsXHJcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBhamF4TG9jUGFydHNbIDEgXSApLFxyXG5cdFx0Z2xvYmFsOiB0cnVlLFxyXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXHJcblx0XHRhc3luYzogdHJ1ZSxcclxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxyXG5cdFx0LypcclxuXHRcdHRpbWVvdXQ6IDAsXHJcblx0XHRkYXRhOiBudWxsLFxyXG5cdFx0ZGF0YVR5cGU6IG51bGwsXHJcblx0XHR1c2VybmFtZTogbnVsbCxcclxuXHRcdHBhc3N3b3JkOiBudWxsLFxyXG5cdFx0Y2FjaGU6IG51bGwsXHJcblx0XHR0aHJvd3M6IGZhbHNlLFxyXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxyXG5cdFx0aGVhZGVyczoge30sXHJcblx0XHQqL1xyXG5cclxuXHRcdGFjY2VwdHM6IHtcclxuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxyXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcclxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcclxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcclxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxyXG5cdFx0fSxcclxuXHJcblx0XHRjb250ZW50czoge1xyXG5cdFx0XHR4bWw6IC94bWwvLFxyXG5cdFx0XHRodG1sOiAvaHRtbC8sXHJcblx0XHRcdGpzb246IC9qc29uL1xyXG5cdFx0fSxcclxuXHJcblx0XHRyZXNwb25zZUZpZWxkczoge1xyXG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcclxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcclxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcclxuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2VcclxuXHRcdGNvbnZlcnRlcnM6IHtcclxuXHJcblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxyXG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXHJcblxyXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcclxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcclxuXHJcblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cclxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogalF1ZXJ5LnBhcnNlSlNPTixcclxuXHJcblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXHJcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XHJcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXHJcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxyXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXHJcblx0XHRmbGF0T3B0aW9uczoge1xyXG5cdFx0XHR1cmw6IHRydWUsXHJcblx0XHRcdGNvbnRleHQ6IHRydWVcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxyXG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cclxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxyXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XHJcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xyXG5cclxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3RcclxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxyXG5cclxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xyXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcclxuXHR9LFxyXG5cclxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcclxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcclxuXHJcblx0Ly8gTWFpbiBtZXRob2RcclxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xyXG5cclxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXHJcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRcdG9wdGlvbnMgPSB1cmw7XHJcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxyXG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG5cdFx0dmFyIHRyYW5zcG9ydCxcclxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxyXG5cdFx0XHRjYWNoZVVSTCxcclxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xyXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXHJcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcclxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcclxuXHRcdFx0dGltZW91dFRpbWVyLFxyXG5cdFx0XHQvLyBDcm9zcy1kb21haW4gZGV0ZWN0aW9uIHZhcnNcclxuXHRcdFx0cGFydHMsXHJcblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxyXG5cdFx0XHRmaXJlR2xvYmFscyxcclxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxyXG5cdFx0XHRpLFxyXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XHJcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxyXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxyXG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcclxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxyXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiYgKCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cclxuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcclxuXHRcdFx0XHRqUXVlcnkuZXZlbnQsXHJcblx0XHRcdC8vIERlZmVycmVkc1xyXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxyXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFxyXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xyXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxyXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxyXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxyXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXHJcblx0XHRcdC8vIFRoZSBqcVhIUiBzdGF0ZVxyXG5cdFx0XHRzdGF0ZSA9IDAsXHJcblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxyXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcclxuXHRcdFx0Ly8gRmFrZSB4aHJcclxuXHRcdFx0anFYSFIgPSB7XHJcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcclxuXHJcblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxyXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xyXG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xyXG5cdFx0XHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xyXG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xyXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkpICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcclxuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlID09PSAyID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdHZhciBsbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xyXG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gfHwgbmFtZTtcclxuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xyXG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXHJcblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcclxuXHRcdFx0XHRcdHZhciBjb2RlO1xyXG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xyXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFjayBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xyXG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xyXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3RcclxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XHJcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcclxuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xyXG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xyXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKS5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkO1xyXG5cdFx0anFYSFIuc3VjY2VzcyA9IGpxWEhSLmRvbmU7XHJcblx0XHRqcVhIUi5lcnJvciA9IGpxWEhSLmZhaWw7XHJcblxyXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggY2hhcmFjdGVyICgjNzUzMTogYW5kIHN0cmluZyBwcm9tb3Rpb24pXHJcblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcclxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXHJcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcclxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBhamF4TG9jYXRpb24gKSArIFwiXCIgKS5yZXBsYWNlKCByaGFzaCwgXCJcIiApXHJcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGFqYXhMb2NQYXJ0c1sgMSBdICsgXCIvL1wiICk7XHJcblxyXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XHJcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xyXG5cclxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3RcclxuXHRcdHMuZGF0YVR5cGVzID0galF1ZXJ5LnRyaW0oIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcclxuXHJcblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gd2UgaGF2ZSBhIHByb3RvY29sOmhvc3Q6cG9ydCBtaXNtYXRjaFxyXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XHJcblx0XHRcdHBhcnRzID0gcnVybC5leGVjKCBzLnVybC50b0xvd2VyQ2FzZSgpICk7XHJcblx0XHRcdHMuY3Jvc3NEb21haW4gPSAhISggcGFydHMgJiZcclxuXHRcdFx0XHQoIHBhcnRzWyAxIF0gIT09IGFqYXhMb2NQYXJ0c1sgMSBdIHx8IHBhcnRzWyAyIF0gIT09IGFqYXhMb2NQYXJ0c1sgMiBdIHx8XHJcblx0XHRcdFx0XHQoIHBhcnRzWyAzIF0gfHwgKCBwYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSAhPT1cclxuXHRcdFx0XHRcdFx0KCBhamF4TG9jUGFydHNbIDMgXSB8fCAoIGFqYXhMb2NQYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSApXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXHJcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xyXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XHJcblxyXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcclxuXHRcdGlmICggc3RhdGUgPT09IDIgKSB7XHJcblx0XHRcdHJldHVybiBqcVhIUjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xyXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcclxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xyXG5cclxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcclxuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xyXG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcclxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xyXG5cclxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XHJcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcclxuXHJcblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2VcclxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxyXG5cdFx0Y2FjaGVVUkwgPSBzLnVybDtcclxuXHJcblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxyXG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xyXG5cclxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxyXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcclxuXHRcdFx0XHRjYWNoZVVSTCA9ICggcy51cmwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YSApO1xyXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcclxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgYW50aS1jYWNoZSBpbiB1cmwgaWYgbmVlZGVkXHJcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0cy51cmwgPSBydHMudGVzdCggY2FjaGVVUkwgKSA/XHJcblxyXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWVcclxuXHRcdFx0XHRcdGNhY2hlVVJMLnJlcGxhY2UoIHJ0cywgXCIkMV89XCIgKyBub25jZSsrICkgOlxyXG5cclxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBhZGQgb25lIHRvIHRoZSBlbmRcclxuXHRcdFx0XHRcdGNhY2hlVVJMICsgKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArIG5vbmNlKys7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxyXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XHJcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcclxuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xyXG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XHJcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcclxuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcclxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXHJcblx0XHRcdFwiQWNjZXB0XCIsXHJcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdID9cclxuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gKyAoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxyXG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxyXG5cdFx0KTtcclxuXHJcblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cclxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xyXG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcclxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmICggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgc3RhdGUgPT09IDIgKSApIHtcclxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXHJcblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxyXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XHJcblxyXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXHJcblx0XHRmb3IgKCBpIGluIHsgc3VjY2VzczogMSwgZXJyb3I6IDEsIGNvbXBsZXRlOiAxIH0gKSB7XHJcblx0XHRcdGpxWEhSWyBpIF0oIHNbIGkgXSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEdldCB0cmFuc3BvcnRcclxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xyXG5cclxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxyXG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xyXG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XHJcblxyXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxyXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xyXG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIFRpbWVvdXRcclxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XHJcblx0XHRcdFx0dGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGpxWEhSLmFib3J0KFwidGltZW91dFwiKTtcclxuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRzdGF0ZSA9IDE7XHJcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XHJcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBleGNlcHRpb24gYXMgZXJyb3IgaWYgbm90IGRvbmVcclxuXHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcclxuXHRcdFx0XHRcdGRvbmUoIC0xLCBlICk7XHJcblx0XHRcdFx0Ly8gU2ltcGx5IHJldGhyb3cgb3RoZXJ3aXNlXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRocm93IGU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXHJcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcclxuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcclxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcclxuXHJcblx0XHRcdC8vIENhbGxlZCBvbmNlXHJcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTdGF0ZSBpcyBcImRvbmVcIiBub3dcclxuXHRcdFx0c3RhdGUgPSAyO1xyXG5cclxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcclxuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XHJcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cclxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcclxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xyXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XHJcblxyXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxyXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xyXG5cclxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcclxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XHJcblxyXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxyXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcclxuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxyXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xyXG5cclxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXHJcblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XHJcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiTGFzdC1Nb2RpZmllZFwiKTtcclxuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpO1xyXG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcclxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcclxuXHJcblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXHJcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xyXG5cclxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xyXG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xyXG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXHJcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xyXG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xyXG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcclxuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcclxuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XHJcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcclxuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xyXG5cclxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxyXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcclxuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcclxuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xyXG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcclxuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcclxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIENvbXBsZXRlXHJcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XHJcblxyXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xyXG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcclxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RvcFwiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4ganFYSFI7XHJcblx0fSxcclxuXHJcblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcclxuXHR9LFxyXG5cclxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xyXG5cdH1cclxufSk7XHJcblxyXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xyXG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcclxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xyXG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XHJcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KHtcclxuXHRcdFx0dXJsOiB1cmwsXHJcblx0XHRcdHR5cGU6IG1ldGhvZCxcclxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXHJcblx0XHRcdGRhdGE6IGRhdGEsXHJcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXHJcblx0XHR9KTtcclxuXHR9O1xyXG59KTtcclxuXHJcblxyXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xyXG5cdHJldHVybiBqUXVlcnkuYWpheCh7XHJcblx0XHR1cmw6IHVybCxcclxuXHRcdHR5cGU6IFwiR0VUXCIsXHJcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcclxuXHRcdGFzeW5jOiBmYWxzZSxcclxuXHRcdGdsb2JhbDogZmFsc2UsXHJcblx0XHRcInRocm93c1wiOiB0cnVlXHJcblx0fSk7XHJcbn07XHJcblxyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCh7XHJcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XHJcblx0XHR2YXIgd3JhcDtcclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbC5jYWxsKHRoaXMsIGkpICk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdGhpc1sgMCBdICkge1xyXG5cclxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcclxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XHJcblxyXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0d3JhcC5tYXAoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xyXG5cclxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XHJcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBlbGVtO1xyXG5cdFx0XHR9KS5hcHBlbmQoIHRoaXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9LFxyXG5cclxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKHRoaXMsIGkpICk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXHJcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XHJcblxyXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwodGhpcywgaSkgOiBodG1sICk7XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cclxuXHR1bndyYXA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImJvZHlcIiApICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSkuZW5kKCk7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5qUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDw9IDEyLjEyXHJcblx0Ly8gT3BlcmEgcmVwb3J0cyBvZmZzZXRXaWR0aHMgYW5kIG9mZnNldEhlaWdodHMgbGVzcyB0aGFuIHplcm8gb24gc29tZSBlbGVtZW50c1xyXG5cdHJldHVybiBlbGVtLm9mZnNldFdpZHRoIDw9IDAgJiYgZWxlbS5vZmZzZXRIZWlnaHQgPD0gMDtcclxufTtcclxualF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0cmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiggZWxlbSApO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxudmFyIHIyMCA9IC8lMjAvZyxcclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcclxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXHJcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxyXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcclxuXHJcbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcclxuXHR2YXIgbmFtZTtcclxuXHJcblx0aWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XHJcblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cclxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xyXG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xyXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cclxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cclxuXHRcdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiID8gaSA6IFwiXCIgKSArIFwiXVwiLCB2LCB0cmFkaXRpb25hbCwgYWRkICk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxyXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XHJcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cclxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcclxuXHR9XHJcbn1cclxuXHJcbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXHJcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xyXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XHJcblx0dmFyIHByZWZpeCxcclxuXHRcdHMgPSBbXSxcclxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xyXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWVcclxuXHRcdFx0dmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSA/IHZhbHVlKCkgOiAoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcclxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgKTtcclxuXHRcdH07XHJcblxyXG5cdC8vIFNldCB0cmFkaXRpb25hbCB0byB0cnVlIGZvciBqUXVlcnkgPD0gMS4zLjIgYmVoYXZpb3IuXHJcblx0aWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0dHJhZGl0aW9uYWwgPSBqUXVlcnkuYWpheFNldHRpbmdzICYmIGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7XHJcblx0fVxyXG5cclxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxyXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XHJcblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcclxuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcclxuXHRcdH0pO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxyXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XHJcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXHJcblx0cmV0dXJuIHMuam9pbiggXCImXCIgKS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XHJcbn07XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKHtcclxuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XHJcblx0fSxcclxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7XHJcblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcclxuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xyXG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcclxuXHRcdH0pXHJcblx0XHQuZmlsdGVyKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcclxuXHJcblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXHJcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxyXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcclxuXHRcdH0pXHJcblx0XHQubWFwKGZ1bmN0aW9uKCBpLCBlbGVtICkge1xyXG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gdmFsID09IG51bGwgP1xyXG5cdFx0XHRcdG51bGwgOlxyXG5cdFx0XHRcdGpRdWVyeS5pc0FycmF5KCB2YWwgKSA/XHJcblx0XHRcdFx0XHRqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XHJcblx0XHRcdFx0XHR9KSA6XHJcblx0XHRcdFx0XHR7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XHJcblx0XHR9KS5nZXQoKTtcclxuXHR9XHJcbn0pO1xyXG5cclxuXHJcbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XHJcblx0dHJ5IHtcclxuXHRcdHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHR9IGNhdGNoKCBlICkge31cclxufTtcclxuXHJcbnZhciB4aHJJZCA9IDAsXHJcblx0eGhyQ2FsbGJhY2tzID0ge30sXHJcblx0eGhyU3VjY2Vzc1N0YXR1cyA9IHtcclxuXHRcdC8vIGZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXHJcblx0XHQwOiAyMDAsXHJcblx0XHQvLyBTdXBwb3J0OiBJRTlcclxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxyXG5cdFx0MTIyMzogMjA0XHJcblx0fSxcclxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xyXG5cclxuLy8gU3VwcG9ydDogSUU5XHJcbi8vIE9wZW4gcmVxdWVzdHMgbXVzdCBiZSBtYW51YWxseSBhYm9ydGVkIG9uIHVubG9hZCAoIzUyODApXHJcbi8vIFNlZSBodHRwczovL3N1cHBvcnQubWljcm9zb2Z0LmNvbS9rYi8yODU2NzQ2IGZvciBtb3JlIGluZm9cclxuaWYgKCB3aW5kb3cuYXR0YWNoRXZlbnQgKSB7XHJcblx0d2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIGZ1bmN0aW9uKCkge1xyXG5cdFx0Zm9yICggdmFyIGtleSBpbiB4aHJDYWxsYmFja3MgKSB7XHJcblx0XHRcdHhockNhbGxiYWNrc1sga2V5IF0oKTtcclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xyXG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcclxuXHJcbmpRdWVyeS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKCBvcHRpb25zICkge1xyXG5cdHZhciBjYWxsYmFjaztcclxuXHJcblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxyXG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcclxuXHRcdFx0XHR2YXIgaSxcclxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCksXHJcblx0XHRcdFx0XHRpZCA9ICsreGhySWQ7XHJcblxyXG5cdFx0XHRcdHhoci5vcGVuKCBvcHRpb25zLnR5cGUsIG9wdGlvbnMudXJsLCBvcHRpb25zLmFzeW5jLCBvcHRpb25zLnVzZXJuYW1lLCBvcHRpb25zLnBhc3N3b3JkICk7XHJcblxyXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcclxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xyXG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcclxuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxyXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcclxuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcclxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxyXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxyXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxyXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdICkge1xyXG5cdFx0XHRcdFx0aGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xyXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcclxuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIENhbGxiYWNrXHJcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdFx0XHRkZWxldGUgeGhyQ2FsbGJhY2tzWyBpZCBdO1xyXG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0geGhyLm9ubG9hZCA9IHhoci5vbmVycm9yID0gbnVsbDtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcclxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcclxuXHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBBY2Nlc3NpbmcgYmluYXJ5LWRhdGEgcmVzcG9uc2VUZXh0IHRocm93cyBhbiBleGNlcHRpb25cclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gKCMxMTQyNilcclxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgPT09IFwic3RyaW5nXCIgPyB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGV4dDogeGhyLnJlc3BvbnNlVGV4dFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR9IDogdW5kZWZpbmVkLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcclxuXHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcclxuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcclxuXHRcdFx0XHR4aHIub25lcnJvciA9IGNhbGxiYWNrKFwiZXJyb3JcIik7XHJcblxyXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcclxuXHRcdFx0XHRjYWxsYmFjayA9IHhockNhbGxiYWNrc1sgaWQgXSA9IGNhbGxiYWNrKFwiYWJvcnRcIik7XHJcblxyXG5cdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXHJcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XHJcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxyXG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdFx0dGhyb3cgZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxyXG5qUXVlcnkuYWpheFNldHVwKHtcclxuXHRhY2NlcHRzOiB7XHJcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxyXG5cdH0sXHJcblx0Y29udGVudHM6IHtcclxuXHRcdHNjcmlwdDogLyg/OmphdmF8ZWNtYSlzY3JpcHQvXHJcblx0fSxcclxuXHRjb252ZXJ0ZXJzOiB7XHJcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xyXG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xyXG5cdFx0XHRyZXR1cm4gdGV4dDtcclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxyXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XHJcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRzLmNhY2hlID0gZmFsc2U7XHJcblx0fVxyXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcclxuXHRcdHMudHlwZSA9IFwiR0VUXCI7XHJcblx0fVxyXG59KTtcclxuXHJcbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxyXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XHJcblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xyXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcclxuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xyXG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeShcIjxzY3JpcHQ+XCIpLnByb3Aoe1xyXG5cdFx0XHRcdFx0YXN5bmM6IHRydWUsXHJcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXHJcblx0XHRcdFx0XHRzcmM6IHMudXJsXHJcblx0XHRcdFx0fSkub24oXHJcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcclxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcclxuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XHJcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xyXG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0KTtcclxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxufSk7XHJcblxyXG5cclxuXHJcblxyXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXHJcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcclxuXHJcbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcclxualF1ZXJ5LmFqYXhTZXR1cCh7XHJcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcclxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xyXG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XHJcblx0XHRyZXR1cm4gY2FsbGJhY2s7XHJcblx0fVxyXG59KTtcclxuXHJcbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xyXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcclxuXHJcblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxyXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cclxuXHRcdFx0XCJ1cmxcIiA6XHJcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiYgISggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSAmJiByanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcclxuXHRcdCk7XHJcblxyXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcclxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcclxuXHJcblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XHJcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xyXG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XHJcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcclxuXHJcblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXHJcblx0XHRpZiAoIGpzb25Qcm9wICkge1xyXG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xyXG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XHJcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxyXG5cdFx0cy5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl0gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIGZvcmNlIGpzb24gZGF0YVR5cGVcclxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcclxuXHJcblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXHJcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XHJcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcclxuXHRcdGpxWEhSLmFsd2F5cyhmdW5jdGlvbigpIHtcclxuXHRcdFx0Ly8gUmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxyXG5cdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XHJcblxyXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxyXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xyXG5cdFx0XHRcdC8vIG1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxyXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcclxuXHJcblx0XHRcdFx0Ly8gc2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxyXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXHJcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XHJcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxyXG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XHJcblx0fVxyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbi8vIGRhdGE6IHN0cmluZyBvZiBodG1sXHJcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCwgZGVmYXVsdHMgdG8gZG9jdW1lbnRcclxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xyXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xyXG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XHJcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XHJcblx0XHRjb250ZXh0ID0gZmFsc2U7XHJcblx0fVxyXG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xyXG5cclxuXHR2YXIgcGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICksXHJcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xyXG5cclxuXHQvLyBTaW5nbGUgdGFnXHJcblx0aWYgKCBwYXJzZWQgKSB7XHJcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsxXSApIF07XHJcblx0fVxyXG5cclxuXHRwYXJzZWQgPSBqUXVlcnkuYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcclxuXHJcblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xyXG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcclxufTtcclxuXHJcblxyXG4vLyBLZWVwIGEgY29weSBvZiB0aGUgb2xkIGxvYWQgbWV0aG9kXHJcbnZhciBfbG9hZCA9IGpRdWVyeS5mbi5sb2FkO1xyXG5cclxuLyoqXHJcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcclxuICovXHJcbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcclxuXHRpZiAoIHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIgJiYgX2xvYWQgKSB7XHJcblx0XHRyZXR1cm4gX2xvYWQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdH1cclxuXHJcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcclxuXHRcdHNlbGYgPSB0aGlzLFxyXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoXCIgXCIpO1xyXG5cclxuXHRpZiAoIG9mZiA+PSAwICkge1xyXG5cdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYgKSApO1xyXG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcclxuXHR9XHJcblxyXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxyXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xyXG5cclxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXHJcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcclxuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcclxuXHJcblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xyXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3RcclxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcclxuXHRcdGpRdWVyeS5hamF4KHtcclxuXHRcdFx0dXJsOiB1cmwsXHJcblxyXG5cdFx0XHQvLyBpZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkXHJcblx0XHRcdHR5cGU6IHR5cGUsXHJcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcclxuXHRcdFx0ZGF0YTogcGFyYW1zXHJcblx0XHR9KS5kb25lKGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XHJcblxyXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcclxuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XHJcblxyXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cclxuXHJcblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XHJcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXHJcblx0XHRcdFx0alF1ZXJ5KFwiPGRpdj5cIikuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxyXG5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxyXG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xyXG5cclxuXHRcdH0pLmNvbXBsZXRlKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcclxuXHRcdFx0c2VsZi5lYWNoKCBjYWxsYmFjaywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdGhpcztcclxufTtcclxuXHJcblxyXG5cclxuXHJcbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXHJcbmpRdWVyeS5lYWNoKCBbIFwiYWpheFN0YXJ0XCIsIFwiYWpheFN0b3BcIiwgXCJhamF4Q29tcGxldGVcIiwgXCJhamF4RXJyb3JcIiwgXCJhamF4U3VjY2Vzc1wiLCBcImFqYXhTZW5kXCIgXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XHJcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcclxuXHR9O1xyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbmpRdWVyeS5leHByLmZpbHRlcnMuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xyXG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XHJcblx0fSkubGVuZ3RoO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxudmFyIGRvY0VsZW0gPSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuLyoqXHJcbiAqIEdldHMgYSB3aW5kb3cgZnJvbSBhbiBlbGVtZW50XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XHJcblx0cmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID8gZWxlbSA6IGVsZW0ubm9kZVR5cGUgPT09IDkgJiYgZWxlbS5kZWZhdWx0VmlldztcclxufVxyXG5cclxualF1ZXJ5Lm9mZnNldCA9IHtcclxuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xyXG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcclxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcclxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxyXG5cdFx0XHRwcm9wcyA9IHt9O1xyXG5cclxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cclxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XHJcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XHJcblx0XHR9XHJcblxyXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcclxuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcclxuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xyXG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXHJcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoXCJhdXRvXCIpID4gLTE7XHJcblxyXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxyXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcclxuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XHJcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcclxuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcclxuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcclxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgY3VyT2Zmc2V0ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xyXG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcclxuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcclxuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoe1xyXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdHRoaXMgOlxyXG5cdFx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGRvY0VsZW0sIHdpbixcclxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcclxuXHRcdFx0Ym94ID0geyB0b3A6IDAsIGxlZnQ6IDAgfSxcclxuXHRcdFx0ZG9jID0gZWxlbSAmJiBlbGVtLm93bmVyRG9jdW1lbnQ7XHJcblxyXG5cdFx0aWYgKCAhZG9jICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIGl0J3Mgbm90IGEgZGlzY29ubmVjdGVkIERPTSBub2RlXHJcblx0XHRpZiAoICFqUXVlcnkuY29udGFpbnMoIGRvY0VsZW0sIGVsZW0gKSApIHtcclxuXHRcdFx0cmV0dXJuIGJveDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBCbGFja0JlcnJ5IDUsIGlPUyAzIChvcmlnaW5hbCBpUGhvbmUpXHJcblx0XHQvLyBJZiB3ZSBkb24ndCBoYXZlIGdCQ1IsIGp1c3QgdXNlIDAsMCByYXRoZXIgdGhhbiBlcnJvclxyXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09IHN0cnVuZGVmaW5lZCApIHtcclxuXHRcdFx0Ym94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHRcdH1cclxuXHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0b3A6IGJveC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcclxuXHRcdFx0bGVmdDogYm94LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcclxuXHRcdH07XHJcblx0fSxcclxuXHJcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxyXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxyXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xyXG5cclxuXHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxyXG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xyXG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcclxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxyXG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xyXG5cclxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xyXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xyXG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xyXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXHJcblx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xyXG5cdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXHJcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXHJcblx0XHR9O1xyXG5cdH0sXHJcblxyXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCB8fCBkb2NFbGVtO1xyXG5cclxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnQsIFwiaHRtbFwiICkgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApICkge1xyXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jRWxlbTtcclxuXHRcdH0pO1xyXG5cdH1cclxufSk7XHJcblxyXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcclxualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xyXG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XHJcblxyXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xyXG5cdFx0XHR2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7XHJcblxyXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIHdpbiApIHtcclxuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXHJcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luZG93LnBhZ2VYT2Zmc2V0LFxyXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luZG93LnBhZ2VZT2Zmc2V0XHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XHJcblx0XHRcdH1cclxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoLCBudWxsICk7XHJcblx0fTtcclxufSk7XHJcblxyXG4vLyBTdXBwb3J0OiBTYWZhcmk8NyssIENocm9tZTwzNytcclxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cclxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XHJcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTIyOTI4MFxyXG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xyXG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxyXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcclxuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxyXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xyXG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xyXG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XHJcblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XHJcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cclxuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XHJcblx0XHRcdFx0XHRjb21wdXRlZDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdCk7XHJcbn0pO1xyXG5cclxuXHJcbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xyXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XHJcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LCBmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcclxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxyXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XHJcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXHJcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xyXG5cclxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xyXG5cdFx0XHRcdHZhciBkb2M7XHJcblxyXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XHJcblx0XHRcdFx0XHQvLyBBcyBvZiA1LzgvMjAxMiB0aGlzIHdpbGwgeWllbGQgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIE1vYmlsZSBTYWZhcmksIGJ1dCB0aGVyZVxyXG5cdFx0XHRcdFx0Ly8gaXNuJ3QgYSB3aG9sZSBsb3Qgd2UgY2FuIGRvLiBTZWUgcHVsbCByZXF1ZXN0IGF0IHRoaXMgVVJMIGZvciBkaXNjdXNzaW9uOlxyXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC83NjRcclxuXHRcdFx0XHRcdHJldHVybiBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcclxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcclxuXHJcblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXHJcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3RcclxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcclxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXHJcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxyXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XHJcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcclxuXHJcblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XHJcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xyXG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSwgbnVsbCApO1xyXG5cdFx0fTtcclxuXHR9KTtcclxufSk7XHJcblxyXG5cclxuLy8gVGhlIG51bWJlciBvZiBlbGVtZW50cyBjb250YWluZWQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXRcclxualF1ZXJ5LmZuLnNpemUgPSBmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcy5sZW5ndGg7XHJcbn07XHJcblxyXG5qUXVlcnkuZm4uYW5kU2VsZiA9IGpRdWVyeS5mbi5hZGRCYWNrO1xyXG5cclxuXHJcblxyXG5cclxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXHJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcclxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XHJcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcclxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXHJcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xyXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXHJcblxyXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxyXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXHJcbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cclxuXHJcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XHJcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5O1xyXG5cdH0pO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG52YXJcclxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcclxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcclxuXHJcblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcclxuXHRfJCA9IHdpbmRvdy4kO1xyXG5cclxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcclxuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XHJcblx0XHR3aW5kb3cuJCA9IF8kO1xyXG5cdH1cclxuXHJcblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcclxuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGpRdWVyeTtcclxufTtcclxuXHJcbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXHJcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1NylcclxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxyXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gc3RydW5kZWZpbmVkICkge1xyXG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcclxufVxyXG5cclxuXHJcblxyXG5cclxucmV0dXJuIGpRdWVyeTtcclxuXHJcbn0pKTtcclxuKGZ1bmN0aW9uKHdpbmRvdywgJCwgdW5kZWZpbmVkKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgaWYgKCF3aW5kb3cpIHJldHVybjsgLy8gU2VydmVyIHNpZGVcclxuXHJcbiAgICB2YXIgX2Jhcm9uID0gYmFyb247IC8vIFN0b3JlZCBiYXJvbiB2YWx1ZSBmb3Igbm9Db25mbGljdCB1c2FnZVxyXG4gICAgdmFyIHBvcyA9IFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ3dpZHRoJywgJ2hlaWdodCddO1xyXG4gICAgLy8gR2xvYmFsIHN0b3JlIGZvciBhbGwgYmFyb24gaW5zdGFuY2VzICh0byBiZSBhYmxlIHRvIGRpc3Bvc2UgdGhlbSBvbiBodG1sLW5vZGVzKVxyXG4gICAgdmFyIGluc3RhbmNlcyA9IFtdO1xyXG4gICAgdmFyIG9yaWdpbiA9IHtcclxuICAgICAgICB2OiB7IC8vIFZlcnRpY2FsXHJcbiAgICAgICAgICAgIHg6ICdZJywgcG9zOiBwb3NbMV0sIG9wcG9zOiBwb3NbM10sIGNyb3NzUG9zOiBwb3NbMF0sIGNyb3NzT3BQb3M6IHBvc1syXSxcclxuICAgICAgICAgICAgc2l6ZTogcG9zWzVdLCBjcm9zc1NpemU6IHBvc1s0XSxcclxuICAgICAgICAgICAgY2xpZW50OiAnY2xpZW50SGVpZ2h0JywgY3Jvc3NDbGllbnQ6ICdjbGllbnRXaWR0aCcsXHJcbiAgICAgICAgICAgIGNyb3NzU2Nyb2xsOiAnc2Nyb2xsV2lkdGgnLFxyXG4gICAgICAgICAgICBvZmZzZXQ6ICdvZmZzZXRIZWlnaHQnLCBjcm9zc09mZnNldDogJ29mZnNldFdpZHRoJywgb2Zmc2V0UG9zOiAnb2Zmc2V0VG9wJyxcclxuICAgICAgICAgICAgc2Nyb2xsOiAnc2Nyb2xsVG9wJywgc2Nyb2xsU2l6ZTogJ3Njcm9sbEhlaWdodCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGg6IHsgLy8gSG9yaXpvbnRhbFxyXG4gICAgICAgICAgICB4OiAnWCcsIHBvczogcG9zWzBdLCBvcHBvczogcG9zWzJdLCBjcm9zc1BvczogcG9zWzFdLCBjcm9zc09wUG9zOiBwb3NbM10sXHJcbiAgICAgICAgICAgIHNpemU6IHBvc1s0XSwgY3Jvc3NTaXplOiBwb3NbNV0sXHJcbiAgICAgICAgICAgIGNsaWVudDogJ2NsaWVudFdpZHRoJywgY3Jvc3NDbGllbnQ6ICdjbGllbnRIZWlnaHQnLFxyXG4gICAgICAgICAgICBjcm9zc1Njcm9sbDogJ3Njcm9sbEhlaWdodCcsXHJcbiAgICAgICAgICAgIG9mZnNldDogJ29mZnNldFdpZHRoJywgY3Jvc3NPZmZzZXQ6ICdvZmZzZXRIZWlnaHQnLCBvZmZzZXRQb3M6ICdvZmZzZXRMZWZ0JyxcclxuICAgICAgICAgICAgc2Nyb2xsOiAnc2Nyb2xsTGVmdCcsIHNjcm9sbFNpemU6ICdzY3JvbGxXaWR0aCdcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGVhY2gob2JqLCBpdGVyYXRvcikge1xyXG4gICAgICAgIHZhciBpID0gMDtcclxuXHJcbiAgICAgICAgaWYgKG9iai5sZW5ndGggPT09IHVuZGVmaW5lZCB8fCBvYmogPT09IHdpbmRvdykgb2JqID0gW29ial07XHJcblxyXG4gICAgICAgIHdoaWxlIChvYmpbaV0pIHtcclxuICAgICAgICAgICAgaXRlcmF0b3IuY2FsbCh0aGlzLCBvYmpbaV0sIGkpO1xyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGJhcm9uKHBhcmFtcykge1xyXG4gICAgICAgIHZhciBqUXVlcnlNb2RlLFxyXG4gICAgICAgICAgICByb290cyxcclxuICAgICAgICAgICAgJDtcclxuXHJcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xyXG4gICAgICAgICQgPSBwYXJhbXMuJCB8fCAkIHx8IHdpbmRvdy5qUXVlcnk7XHJcbiAgICAgICAgalF1ZXJ5TW9kZSA9IHRoaXMgaW5zdGFuY2VvZiAkOyAgLy8gdGhpcyAtIHdpbmRvdyBvciBqUXVlcnkgaW5zdGFuY2VcclxuXHJcbiAgICAgICAgaWYgKGpRdWVyeU1vZGUpIHtcclxuICAgICAgICAgICAgcGFyYW1zLnJvb3QgPSByb290cyA9IHRoaXM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcm9vdHMgPSAkKHBhcmFtcy5yb290IHx8IHBhcmFtcy5zY3JvbGxlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgYmFyb24uZm4uY29uc3RydWN0b3Iocm9vdHMsIHBhcmFtcywgJCk7XHJcblxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5hdXRvVXBkYXRlKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmF1dG9VcGRhdGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzaG9ydGN1dCBmb3IgZ2V0VGltZVxyXG4gICAgZnVuY3Rpb24gZ2V0VGltZSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYmFyb24uX2luc3RhbmNlcyA9IGluc3RhbmNlczsgLy8gZm9yIGRlYnVnXHJcblxyXG4gICAgYmFyb24uZm4gPSB7XHJcbiAgICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uKHJvb3RzLCBpbnB1dCwgJCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gdmFsaWRhdGUoaW5wdXQpO1xyXG5cclxuICAgICAgICAgICAgcGFyYW1zLiQgPSAkO1xyXG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIGVhY2guY2FsbCh0aGlzLCByb290cywgZnVuY3Rpb24ocm9vdCwgaSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlkID0gK21hbmFnZUF0dHIocm9vdCwgcGFyYW1zLmRpcmVjdGlvbik7IC8vIENvdWxkIGJlIE5hTlxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGJhcm9uKCkgd2l0aG91dCBwYXJhbXMgY2FuIHJldHVybiBleGlzdGluZyBpbnN0YW5jZXMsXHJcbiAgICAgICAgICAgICAgICAvLyBidXQgYmFyb24ocGFyYW1zKSB3aWxsIHRocm93IGFuIEVycm9yIGFzIGEgc2Vjb25kIGluaXRpYWxpemF0aW9uXHJcbiAgICAgICAgICAgICAgICBpZiAoaWQgPT0gaWQgJiYgaW5zdGFuY2VzW2lkXSAmJiAhaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzW2ldID0gaW5zdGFuY2VzW2lkXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2FsUGFyYW1zID0gY2xvbmUocGFyYW1zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcm9vdCBhbmQgc2Nyb2xsZXIgY2FuIGJlIGRpZmZlcmVudCBub2Rlc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMucm9vdCAmJiBwYXJhbXMuc2Nyb2xsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxQYXJhbXMuc2Nyb2xsZXIgPSBwYXJhbXMuJChwYXJhbXMuc2Nyb2xsZXIsIHJvb3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvY2FsUGFyYW1zLnNjcm9sbGVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxQYXJhbXMuc2Nyb2xsZXIgPSByb290O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxQYXJhbXMuc2Nyb2xsZXIgPSByb290O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxQYXJhbXMucm9vdCA9IHJvb3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tpXSA9IGluaXQobG9jYWxQYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gaSArIDE7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSB0aGlzLnBhcmFtcztcclxuXHJcbiAgICAgICAgICAgIGVhY2godGhpcywgZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5kaXNwb3NlKHBhcmFtcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wYXJhbXMgPSBudWxsO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBpID0gMDtcclxuXHJcbiAgICAgICAgICAgIHdoaWxlICh0aGlzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzW2ldLnVwZGF0ZS5hcHBseSh0aGlzW2ldLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYmFyb246IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgICAgICBwYXJhbXMucm9vdCA9IFtdO1xyXG4gICAgICAgICAgICBwYXJhbXMuc2Nyb2xsZXIgPSB0aGlzLnBhcmFtcy5zY3JvbGxlcjtcclxuXHJcbiAgICAgICAgICAgIGVhY2guY2FsbCh0aGlzLCB0aGlzLCBmdW5jdGlvbihlbGVtKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMucm9vdC5wdXNoKGVsZW0ucm9vdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwYXJhbXMuZGlyZWN0aW9uID0gKHRoaXMucGFyYW1zLmRpcmVjdGlvbiA9PSAndicpID8gJ2gnIDogJ3YnO1xyXG4gICAgICAgICAgICBwYXJhbXMuX2NoYWluID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBiYXJvbihwYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gbWFuYWdlRXZlbnRzKGl0ZW0sIGV2ZW50TWFuYWdlciwgbW9kZSkge1xyXG4gICAgICAgIC8vIENyZWF0aW5nIG5ldyBmdW5jdGlvbnMgZm9yIG9uZSBiYXJvbiBpdGVtIG9ubHkgb25lIHRpbWVcclxuICAgICAgICBpdGVtLl9ldmVudEhhbmRsZXJzID0gaXRlbS5fZXZlbnRIYW5kbGVycyB8fCBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIG9uU2Nyb2xsOlxyXG4gICAgICAgICAgICAgICAgZWxlbWVudDogaXRlbS5zY3JvbGxlcixcclxuXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5zY3JvbGwoZSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHR5cGU6ICdzY3JvbGwnXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIC8vIGNzcyB0cmFuc2l0aW9ucyAmIGFuaW1hdGlvbnNcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGl0ZW0ucm9vdCxcclxuXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAndHJhbnNpdGlvbmVuZCBhbmltYXRpb25lbmQnXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIC8vIG9uS2V5dXAgKHRleHRhcmVhKTpcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGl0ZW0uc2Nyb2xsZXIsXHJcblxyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2tleXVwJ1xyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAvLyBvbk1vdXNlRG93bjpcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGl0ZW0uYmFyLFxyXG5cclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIFRleHQgc2VsZWN0aW9uIGRpc2FibGluZyBpbiBPcGVyYVxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uc2VsZWN0aW9uKCk7IC8vIERpc2FibGUgdGV4dCBzZWxlY3Rpb24gaW4gaWU4XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5kcmFnLm5vdyA9IDE7IC8vIFNhdmUgcHJpdmF0ZSBieXRlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uZHJhZ2dpbmdDbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChpdGVtLmJhcikuYWRkQ2xhc3MoaXRlbS5kcmFnZ2luZ0Nscyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAndG91Y2hzdGFydCBtb3VzZWRvd24nXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIC8vIG9uTW91c2VVcDpcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LFxyXG5cclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uc2VsZWN0aW9uKDEpOyAvLyBFbmFibGUgdGV4dCBzZWxlY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICBpdGVtLmRyYWcubm93ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5kcmFnZ2luZ0Nscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKGl0ZW0uYmFyKS5yZW1vdmVDbGFzcyhpdGVtLmRyYWdnaW5nQ2xzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHR5cGU6ICdtb3VzZXVwIGJsdXIgdG91Y2hlbmQnXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIC8vIG9uQ29vcmRpbmF0ZVJlc2V0OlxyXG4gICAgICAgICAgICAgICAgZWxlbWVudDogZG9jdW1lbnQsXHJcblxyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmJ1dHRvbiAhPSAyKSB7IC8vIE5vdCBSTVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLl9wb3MwKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3RvdWNoc3RhcnQgbW91c2Vkb3duJ1xyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAvLyBvbk1vdXNlTW92ZTpcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LFxyXG5cclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5kcmFnLm5vdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmRyYWcoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnbW91c2Vtb3ZlIHRvdWNobW92ZSdcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgLy8gb25SZXNpemU6XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50OiB3aW5kb3csXHJcblxyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3Jlc2l6ZSdcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgLy8gc2l6ZUNoYW5nZTpcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGl0ZW0ucm9vdCxcclxuXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2l6ZUNoYW5nZSdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGVhY2goaXRlbS5fZXZlbnRIYW5kbGVycywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LmVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50TWFuYWdlcihldmVudC5lbGVtZW50LCBldmVudC50eXBlLCBldmVudC5oYW5kbGVyLCBtb2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBpZiAoaXRlbS5zY3JvbGxlcikge1xyXG4gICAgICAgIC8vICAgICBldmVudChpdGVtLnNjcm9sbGVyLCAnc2Nyb2xsJywgaXRlbS5fZXZlbnRIYW5kbGVycy5vblNjcm9sbCwgbW9kZSk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIGlmIChpdGVtLmJhcikge1xyXG4gICAgICAgIC8vICAgICBldmVudChpdGVtLmJhciwgJ3RvdWNoc3RhcnQgbW91c2Vkb3duJywgaXRlbS5fZXZlbnRIYW5kbGVycy5vbk1vdXNlRG93biwgbW9kZSk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIGV2ZW50KGRvY3VtZW50LCAnbW91c2V1cCBibHVyIHRvdWNoZW5kJywgaXRlbS5fZXZlbnRIYW5kbGVycy5vbk1vdXNlVXAsIG1vZGUpO1xyXG4gICAgICAgIC8vIGV2ZW50KGRvY3VtZW50LCAndG91Y2hzdGFydCBtb3VzZWRvd24nLCBpdGVtLl9ldmVudEhhbmRsZXJzLm9uQ29vcmRpbmF0ZVJlc2V0LCBtb2RlKTtcclxuICAgICAgICAvLyBldmVudChkb2N1bWVudCwgJ21vdXNlbW92ZSB0b3VjaG1vdmUnLCBpdGVtLl9ldmVudEhhbmRsZXJzLm9uTW91c2VNb3ZlLCBtb2RlKTtcclxuICAgICAgICAvLyBldmVudCh3aW5kb3csICdyZXNpemUnLCBpdGVtLl9ldmVudEhhbmRsZXJzLm9uUmVzaXplLCBtb2RlKTtcclxuICAgICAgICAvLyBpZiAoaXRlbS5yb290KSB7XHJcbiAgICAgICAgLy8gICAgIGV2ZW50KGl0ZW0ucm9vdCwgJ3NpemVDaGFuZ2UnLCBpdGVtLl9ldmVudEhhbmRsZXJzLm9uUmVzaXplLCBtb2RlKTtcclxuICAgICAgICAvLyAgICAgLy8gQ3VzdG9uIGV2ZW50IGZvciBhbHRlcm5hdGUgYmFyb24gdXBkYXRlIG1lY2hhbmlzbVxyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBzZXQsIHJlbW92ZSBvciByZWFkIGJhcm9uLXNwZWNpZmljIGlkLWF0dHJpYnV0ZVxyXG4gICAgZnVuY3Rpb24gbWFuYWdlQXR0cihub2RlLCBkaXJlY3Rpb24sIG1vZGUsIGlkKSB7XHJcbiAgICAgICAgdmFyIGF0dHJOYW1lID0gJ2RhdGEtYmFyb24tJyArIGRpcmVjdGlvbiArICctaWQnO1xyXG5cclxuICAgICAgICBpZiAobW9kZSA9PSAnb24nKSB7XHJcbiAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBpZCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtb2RlID09ICdvZmYnKSB7XHJcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0KHBhcmFtcykge1xyXG4gICAgICAgIGlmIChtYW5hZ2VBdHRyKHBhcmFtcy5yb290LCBwYXJhbXMuZGlyZWN0aW9uKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IhIEJhcm9uIGZvciB0aGlzIG5vZGUgYWxyZWFkeSBpbml0aWFsaXplZCcsIHBhcmFtcy5yb290KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIF9fcHJvdG9fXyBvZiByZXR1cm5pbmcgb2JqZWN0IGlzIGJhcm9uLnByb3RvdHlwZVxyXG4gICAgICAgIHZhciBvdXQgPSBuZXcgaXRlbS5wcm90b3R5cGUuY29uc3RydWN0b3IocGFyYW1zKTtcclxuXHJcbiAgICAgICAgbWFuYWdlRXZlbnRzKG91dCwgcGFyYW1zLmV2ZW50LCAnb24nKTtcclxuXHJcbiAgICAgICAgbWFuYWdlQXR0cihvdXQucm9vdCwgcGFyYW1zLmRpcmVjdGlvbiwgJ29uJywgaW5zdGFuY2VzLmxlbmd0aCk7XHJcbiAgICAgICAgaW5zdGFuY2VzLnB1c2gob3V0KTtcclxuXHJcbiAgICAgICAgb3V0LnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNsb25lKGlucHV0KSB7XHJcbiAgICAgICAgdmFyIG91dHB1dCA9IHt9O1xyXG5cclxuICAgICAgICBpbnB1dCA9IGlucHV0IHx8IHt9O1xyXG5cclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gaW5wdXQpIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0Lmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIG91dHB1dFtrZXldID0gaW5wdXRba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShpbnB1dCkge1xyXG4gICAgICAgIHZhciBvdXRwdXQgPSBjbG9uZShpbnB1dCk7XHJcblxyXG4gICAgICAgIG91dHB1dC5kaXJlY3Rpb24gPSBvdXRwdXQuZGlyZWN0aW9uIHx8ICd2JztcclxuXHJcbiAgICAgICAgdmFyIGV2ZW50ID0gaW5wdXQuZXZlbnQgfHwgZnVuY3Rpb24oZWxlbSwgZXZlbnQsIGZ1bmMsIG1vZGUpIHtcclxuICAgICAgICAgICAgb3V0cHV0LiQoZWxlbSlbbW9kZSB8fCAnb24nXShldmVudCwgZnVuYyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgb3V0cHV0LmV2ZW50ID0gZnVuY3Rpb24oZWxlbXMsIGUsIGZ1bmMsIG1vZGUpIHtcclxuICAgICAgICAgICAgZWFjaChlbGVtcywgZnVuY3Rpb24oZWxlbSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQoZWxlbSwgZSwgZnVuYywgbW9kZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZmlyZShldmVudE5hbWUpIHtcclxuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cclxuICAgICAgICBpZiAodGhpcy5ldmVudHMgJiYgdGhpcy5ldmVudHNbZXZlbnROYW1lXSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCA7IGkgPCB0aGlzLmV2ZW50c1tldmVudE5hbWVdLmxlbmd0aCA7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXVtpXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgaXRlbSA9IHt9O1xyXG5cclxuICAgIGl0ZW0ucHJvdG90eXBlID0ge1xyXG4gICAgICAgIC8vIHVuZGVyc2NvcmUuanMgcmVhbGl6YXRpb25cclxuICAgICAgICBfZGVib3VuY2U6IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgdGltZW91dCxcclxuICAgICAgICAgICAgICAgIC8vIGFyZ3MsIC8vIHJpZ2h0IG5vdyB0aGVyZSBpcyBubyBuZWVkIGZvciBhcmd1bWVudHNcclxuICAgICAgICAgICAgICAgIC8vIGNvbnRleHQsIC8vIGFuZCBmb3IgY29udGV4dFxyXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgLy8gcmVzdWx0OyAvLyBhbmQgZm9yIHJlc3VsdFxyXG5cclxuICAgICAgICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5fZGlzcG9zZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IHNlbGYgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IGdldFRpbWUoKSAtIHRpbWVzdGFtcDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobGFzdCA8IHdhaXQgJiYgbGFzdCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29udGV4dCA9IGFyZ3MgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gY29udGV4dCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAvLyBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wID0gZ2V0VGltZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbihwYXJhbXMpIHtcclxuICAgICAgICAgICAgdmFyICQsXHJcbiAgICAgICAgICAgICAgICBiYXJQb3MsXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxlclBvczAsXHJcbiAgICAgICAgICAgICAgICB0cmFjayxcclxuICAgICAgICAgICAgICAgIHJlc2l6ZVBhdXNlVGltZXIsXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxQYXVzZVRpbWVyLFxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsaW5nVGltZXIsXHJcbiAgICAgICAgICAgICAgICBwYXVzZSxcclxuICAgICAgICAgICAgICAgIHNjcm9sbExhc3RGaXJlLFxyXG4gICAgICAgICAgICAgICAgcmVzaXplTGFzdEZpcmUsXHJcbiAgICAgICAgICAgICAgICBvbGRCYXJTaXplO1xyXG5cclxuICAgICAgICAgICAgcmVzaXplTGFzdEZpcmUgPSBzY3JvbGxMYXN0RmlyZSA9IGdldFRpbWUoKTtcclxuXHJcbiAgICAgICAgICAgICQgPSB0aGlzLiQgPSBwYXJhbXMuJDtcclxuICAgICAgICAgICAgdGhpcy5ldmVudCA9IHBhcmFtcy5ldmVudDtcclxuICAgICAgICAgICAgdGhpcy5ldmVudHMgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5vZGUoc2VsLCBjb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJChzZWwsIGNvbnRleHQpWzBdOyAvLyBDYW4gYmUgdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIERPTSBlbGVtZW50c1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QgPSBwYXJhbXMucm9vdDsgLy8gQWx3YXlzIGh0bWwgbm9kZSwgbm90IGp1c3Qgc2VsZWN0b3JcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGxlciA9IGdldE5vZGUocGFyYW1zLnNjcm9sbGVyKTtcclxuICAgICAgICAgICAgdGhpcy5iYXIgPSBnZXROb2RlKHBhcmFtcy5iYXIsIHRoaXMucm9vdCk7XHJcbiAgICAgICAgICAgIHRyYWNrID0gdGhpcy50cmFjayA9IGdldE5vZGUocGFyYW1zLnRyYWNrLCB0aGlzLnJvb3QpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudHJhY2sgJiYgdGhpcy5iYXIpIHtcclxuICAgICAgICAgICAgICAgIHRyYWNrID0gdGhpcy5iYXIucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNsaXBwZXIgPSB0aGlzLnNjcm9sbGVyLnBhcmVudE5vZGU7XHJcblxyXG4gICAgICAgICAgICAvLyBQYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gcGFyYW1zLmRpcmVjdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5vcmlnaW4gPSBvcmlnaW5bdGhpcy5kaXJlY3Rpb25dO1xyXG4gICAgICAgICAgICB0aGlzLmJhck9uQ2xzID0gcGFyYW1zLmJhck9uQ2xzIHx8ICdfYmFyb24nO1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbGluZ0NscyA9IHBhcmFtcy5zY3JvbGxpbmdDbHM7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhZ2dpbmdDbHMgPSBwYXJhbXMuZHJhZ2dpbmdDbHM7XHJcbiAgICAgICAgICAgIHRoaXMuYmFyVG9wTGltaXQgPSAwO1xyXG4gICAgICAgICAgICBwYXVzZSA9IHBhcmFtcy5wYXVzZSAqIDEwMDAgfHwgMDtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0aW5nIGhlaWdodCBvciB3aWR0aCBvZiBiYXJcclxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0QmFyU2l6ZShzaXplKSB7XHJcbiAgICAgICAgICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cclxuICAgICAgICAgICAgICAgIHZhciBiYXJNaW5TaXplID0gdGhpcy5iYXJNaW5TaXplIHx8IDIwO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzaXplID4gMCAmJiBzaXplIDwgYmFyTWluU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemUgPSBiYXJNaW5TaXplO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJhcikge1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcy5iYXIpLmNzcyh0aGlzLm9yaWdpbi5zaXplLCBwYXJzZUludChzaXplLCAxMCkgKyAncHgnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVXBkYXRpbmcgdG9wIG9yIGxlZnQgYmFyIHBvc2l0aW9uXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBvc0Jhcihwb3MpIHtcclxuICAgICAgICAgICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYmFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdhcyA9ICQodGhpcy5iYXIpLmNzcyh0aGlzLm9yaWdpbi5wb3MpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWxsID0gK3BvcyArICdweCc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aWxsICYmIHdpbGwgIT0gd2FzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcy5iYXIpLmNzcyh0aGlzLm9yaWdpbi5wb3MsIHdpbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gRnJlZSBwYXRoIGZvciBiYXJcclxuICAgICAgICAgICAgZnVuY3Rpb24gaygpIHtcclxuICAgICAgICAgICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrW3RoaXMub3JpZ2luLmNsaWVudF0gLSB0aGlzLmJhclRvcExpbWl0IC0gdGhpcy5iYXJbdGhpcy5vcmlnaW4ub2Zmc2V0XTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmVsYXRpdmUgY29udGVudCB0b3AgcG9zaXRpb24gdG8gYmFyIHRvcCBwb3NpdGlvblxyXG4gICAgICAgICAgICBmdW5jdGlvbiByZWxUb1BvcyhyKSB7XHJcbiAgICAgICAgICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cclxuICAgICAgICAgICAgICAgIHJldHVybiByICogay5jYWxsKHRoaXMpICsgdGhpcy5iYXJUb3BMaW1pdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQmFyIHBvc2l0aW9uIHRvIHJlbGF0aXZlIGNvbnRlbnQgcG9zaXRpb25cclxuICAgICAgICAgICAgZnVuY3Rpb24gcG9zVG9SZWwodCkge1xyXG4gICAgICAgICAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczp0cnVlICovXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHQgLSB0aGlzLmJhclRvcExpbWl0KSAvIGsuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQ3Vyc29yIHBvc2l0aW9uIGluIG1haW4gZGlyZWN0aW9uIGluIHB4IC8vIE5vdyB3aXRoIGlPcyBzdXBwb3J0XHJcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVbJ2NsaWVudCcgKyB0aGlzLm9yaWdpbi54XSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICgoKGUub3JpZ2luYWxFdmVudCB8fCBlKS50b3VjaGVzIHx8IHt9KVswXSB8fCB7fSlbJ3BhZ2UnICsgdGhpcy5vcmlnaW4ueF07XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBUZXh0IHNlbGVjdGlvbiBwb3MgcHJldmVudGluZ1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBkb250UG9zU2VsZWN0KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBvcyA9IGZ1bmN0aW9uKHgpIHsgLy8gQWJzb2x1dGUgc2Nyb2xsZXIgcG9zaXRpb24gaW4gcHhcclxuICAgICAgICAgICAgICAgIHZhciBpZSA9ICdwYWdlJyArIHRoaXMub3JpZ2luLnggKyAnT2Zmc2V0JyxcclxuICAgICAgICAgICAgICAgICAgICBrZXkgPSAodGhpcy5zY3JvbGxlcltpZV0pID8gaWUgOiB0aGlzLm9yaWdpbi5zY3JvbGw7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHggIT09IHVuZGVmaW5lZCkgdGhpcy5zY3JvbGxlcltrZXldID0geDtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxlcltrZXldO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5ycG9zID0gZnVuY3Rpb24ocikgeyAvLyBSZWxhdGl2ZSBzY3JvbGxlciBwb3NpdGlvbiAoMC4uMSlcclxuICAgICAgICAgICAgICAgIHZhciBmcmVlID0gdGhpcy5zY3JvbGxlclt0aGlzLm9yaWdpbi5zY3JvbGxTaXplXSAtIHRoaXMuc2Nyb2xsZXJbdGhpcy5vcmlnaW4uY2xpZW50XSxcclxuICAgICAgICAgICAgICAgICAgICB4O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IHRoaXMucG9zKHIgKiBmcmVlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IHRoaXMucG9zKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHggLyAoZnJlZSB8fCAxKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIFN3aXRjaCBvbiB0aGUgYmFyIGJ5IGFkZGluZyB1c2VyLWRlZmluZWQgQ1NTIGNsYXNzbmFtZSB0byBzY3JvbGxlclxyXG4gICAgICAgICAgICB0aGlzLmJhck9uID0gZnVuY3Rpb24oZGlzcG9zZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYmFyT25DbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlzcG9zZSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLmNsaWVudF0gPj0gdGhpcy5zY3JvbGxlclt0aGlzLm9yaWdpbi5zY3JvbGxTaXplXSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMucm9vdCkuaGFzQ2xhc3ModGhpcy5iYXJPbkNscykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcy5yb290KS5yZW1vdmVDbGFzcyh0aGlzLmJhck9uQ2xzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJCh0aGlzLnJvb3QpLmhhc0NsYXNzKHRoaXMuYmFyT25DbHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMucm9vdCkuYWRkQ2xhc3ModGhpcy5iYXJPbkNscyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wb3MwID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsZXJQb3MwID0gdGhpcy5jdXJzb3IoZSkgLSBiYXJQb3M7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRyYWcgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVsID0gcG9zVG9SZWwuY2FsbCh0aGlzLCB0aGlzLmN1cnNvcihlKSAtIHNjcm9sbGVyUG9zMCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgayA9ICh0aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLnNjcm9sbFNpemVdIC0gdGhpcy5zY3JvbGxlclt0aGlzLm9yaWdpbi5jbGllbnRdKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsZXJbdGhpcy5vcmlnaW4uc2Nyb2xsXSA9IHJlbCAqIGs7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBUZXh0IHNlbGVjdGlvbiBwcmV2ZW50aW5nIG9uIGRyYWdcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb24gPSBmdW5jdGlvbihlbmFibGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnQoZG9jdW1lbnQsICdzZWxlY3Rwb3Mgc2VsZWN0c3RhcnQnLCBkb250UG9zU2VsZWN0LCBlbmFibGUgPyAnb2ZmJyA6ICdvbicpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gb25SZXNpemUgJiBET00gbW9kaWZpZWQgaGFuZGxlclxyXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZ2V0VGltZSgpIC0gcmVzaXplTGFzdEZpcmUgPCBwYXVzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChyZXNpemVQYXVzZVRpbWVyKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWxheSA9IHBhdXNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZCgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2xpZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gc2VsZi5zY3JvbGxlcltzZWxmLm9yaWdpbi5jcm9zc09mZnNldF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQpIHsgLy8gaWYgdGhlcmUgaXMgbm8gc2l6ZSwgY3NzIHNob3VsZCBub3QgYmUgc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYmFyT24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50ID0gc2VsZi5zY3JvbGxlcltzZWxmLm9yaWdpbi5jcm9zc0NsaWVudF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUd28gZGlmZmVyZW50IGFwcHJvcGNoZXMgZm9yIGRpZmZlcmVudCBkaXJlY3Rpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmRpcmVjdGlvbiA9PSAndicpIHsgLy8gdmVydGljYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IG9mZnNldCAtIGNsaWVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXMgPSAkKHNlbGYuY2xpcHBlcikuY3NzKHNlbGYub3JpZ2luLmNyb3NzU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsID0gc2VsZi5jbGlwcGVyW3NlbGYub3JpZ2luLmNyb3NzQ2xpZW50XSArIGRlbHRhICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2FzICE9IHdpbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHNlbGYuc2Nyb2xsZXIpLmNzcyhzZWxmLm9yaWdpbi5jcm9zc1NpemUsIHdpbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBob3Jpem9udGFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXMgPSAkKHNlbGYuY2xpcHBlcikuY3NzKHNlbGYub3JpZ2luLmNyb3NzU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsID0gc2VsZi5zY3JvbGxlcltzZWxmLm9yaWdpbi5jcm9zc0NsaWVudF0gKyAncHgnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3YXMgIT0gd2lsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoc2VsZi5jbGlwcGVyKS5jc3Moc2VsZi5vcmlnaW4uY3Jvc3NTaXplLCB3aWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuY2FsbChhcmd1bWVudHMsICdyZXNpemUnKTtcclxuICAgICAgICAgICAgICAgICAgICBmaXJlLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZUxhc3RGaXJlID0gZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkZWxheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZVBhdXNlVGltZXIgPSBzZXRUaW1lb3V0KHVwZCwgZGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB1cGQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUG9zaXRpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3QmFyU2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5iYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdCYXJTaXplID0gKHRyYWNrW3NlbGYub3JpZ2luLmNsaWVudF0gLSBzZWxmLmJhclRvcExpbWl0KSAqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2Nyb2xsZXJbc2VsZi5vcmlnaW4uY2xpZW50XSAvIHNlbGYuc2Nyb2xsZXJbc2VsZi5vcmlnaW4uc2Nyb2xsU2l6ZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFBvc2l0aW9uaW5nIGJhclxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChvbGRCYXJTaXplLCAxMCkgIT0gcGFyc2VJbnQobmV3QmFyU2l6ZSwgMTApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEJhclNpemUuY2FsbChzZWxmLCBuZXdCYXJTaXplKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkQmFyU2l6ZSA9IG5ld0JhclNpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBiYXJQb3MgPSByZWxUb1Bvcy5jYWxsKHNlbGYsIHNlbGYucnBvcygpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zQmFyLmNhbGwoc2VsZiwgYmFyUG9zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5jYWxsKCBhcmd1bWVudHMsICdzY3JvbGwnICk7XHJcbiAgICAgICAgICAgICAgICBmaXJlLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsTGFzdEZpcmUgPSBnZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBvblNjcm9sbCBoYW5kbGVyXHJcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVsYXkgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChnZXRUaW1lKCkgLSBzY3JvbGxMYXN0RmlyZSA8IHBhdXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbFBhdXNlVGltZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gcGF1c2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRlbGF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUGF1c2VUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlUG9zaXRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZVBvc2l0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNjcm9sbGluZ0Nscykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2Nyb2xsaW5nVGltZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kKHRoaXMuc2Nyb2xsZXIpLmFkZENsYXNzKHRoaXMuc2Nyb2xsaW5nQ2xzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbGluZ1RpbWVyKTtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxpbmdUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJChzZWxmLnNjcm9sbGVyKS5yZW1vdmVDbGFzcyhzZWxmLnNjcm9sbGluZ0Nscyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGluZ1RpbWVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbihwYXJhbXMpIHtcclxuICAgICAgICAgICAgZmlyZS5jYWxsKHRoaXMsICd1cGQnLCBwYXJhbXMpOyAvLyBVcGRhdGUgYWxsIHBsdWdpbnMnIHBhcmFtc1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yZXNpemUoMSk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUG9zaXRpb25zKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBPbmUgaW5zdGFuY2VcclxuICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbihwYXJhbXMpIHtcclxuICAgICAgICAgICAgbWFuYWdlRXZlbnRzKHRoaXMsIHRoaXMuZXZlbnQsICdvZmYnKTtcclxuICAgICAgICAgICAgbWFuYWdlQXR0cih0aGlzLnJvb3QsIHBhcmFtcy5kaXJlY3Rpb24sICdvZmYnKTtcclxuICAgICAgICAgICAgdGhpcy4kKHRoaXMuc2Nyb2xsZXIpLmNzcyh0aGlzLm9yaWdpbi5jcm9zc1NpemUsICcnKTtcclxuICAgICAgICAgICAgdGhpcy5iYXJPbih0cnVlKTtcclxuICAgICAgICAgICAgZmlyZS5jYWxsKHRoaXMsICdkaXNwb3NlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2VkID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbjogZnVuY3Rpb24oZXZlbnROYW1lLCBmdW5jLCBhcmcpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWVzID0gZXZlbnROYW1lLnNwbGl0KCcgJyk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCA7IGkgPCBuYW1lcy5sZW5ndGggOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChuYW1lc1tpXSA9PSAnaW5pdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jLmNhbGwodGhpcywgYXJnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudHNbbmFtZXNbaV1dID0gdGhpcy5ldmVudHNbbmFtZXNbaV1dIHx8IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50c1tuYW1lc1tpXV0ucHVzaChmdW5jdGlvbih1c2VyQXJnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMuY2FsbCh0aGlzLCB1c2VyQXJnIHx8IGFyZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGJhcm9uLmZuLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGJhcm9uLmZuO1xyXG4gICAgaXRlbS5wcm90b3R5cGUuY29uc3RydWN0b3IucHJvdG90eXBlID0gaXRlbS5wcm90b3R5cGU7XHJcblxyXG4gICAgLy8gVXNlIHdoZW4geW91IG5lZWQgXCJiYXJvblwiIGdsb2JhbCB2YXIgZm9yIGFub3RoZXIgcHVycG9zZXNcclxuICAgIGJhcm9uLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB3aW5kb3cuYmFyb24gPSBfYmFyb247IC8vIFJlc3RvcmluZyBvcmlnaW5hbCB2YWx1ZSBvZiBcImJhcm9uXCIgZ2xvYmFsIHZhclxyXG5cclxuICAgICAgICByZXR1cm4gYmFyb247XHJcbiAgICB9O1xyXG5cclxuICAgIGJhcm9uLnZlcnNpb24gPSAnMC43LjEwJztcclxuXHJcbiAgICBpZiAoJCAmJiAkLmZuKSB7IC8vIEFkZGluZyBiYXJvbiB0byBqUXVlcnkgYXMgcGx1Z2luXHJcbiAgICAgICAgJC5mbi5iYXJvbiA9IGJhcm9uO1xyXG4gICAgfVxyXG5cclxuICAgIHdpbmRvdy5iYXJvbiA9IGJhcm9uOyAvLyBVc2Ugbm9Db25mbGljdCBtZXRob2QgaWYgeW91IG5lZWQgd2luZG93LmJhcm9uIHZhciBmb3IgYW5vdGhlciBwdXJwb3Nlc1xyXG4gICAgaWYgKHdpbmRvd1snbW9kdWxlJ10gJiYgbW9kdWxlLmV4cG9ydHMpIHtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGJhcm9uLm5vQ29uZmxpY3QoKTtcclxuICAgIH1cclxufSkod2luZG93LCB3aW5kb3cuJCk7XHJcblxyXG4vKiBGaXhhYmxlIGVsZW1lbnRzIHBsdWdpbiBmb3IgYmFyb24gMC42KyAqL1xyXG4oZnVuY3Rpb24od2luZG93LCB1bmRlZmluZWQpIHtcclxuICAgIHZhciBmaXggPSBmdW5jdGlvbih1c2VyUGFyYW1zKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnRzLCB2aWV3UG9ydFNpemUsXHJcbiAgICAgICAgICAgIHBhcmFtcyA9IHsgLy8gRGVmYXVsdCBwYXJhbXNcclxuICAgICAgICAgICAgICAgIG91dHNpZGU6ICcnLFxyXG4gICAgICAgICAgICAgICAgaW5zaWRlOiAnJyxcclxuICAgICAgICAgICAgICAgIGJlZm9yZTogJycsXHJcbiAgICAgICAgICAgICAgICBhZnRlcjogJycsXHJcbiAgICAgICAgICAgICAgICBwYXN0OiAnJyxcclxuICAgICAgICAgICAgICAgIGZ1dHVyZTogJycsXHJcbiAgICAgICAgICAgICAgICByYWRpdXM6IDAsXHJcbiAgICAgICAgICAgICAgICBtaW5WaWV3OiAwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvcEZpeEhlaWdodHMgPSBbXSwgLy8gaW5saW5lIHN0eWxlIGZvciBlbGVtZW50XHJcbiAgICAgICAgICAgIHRvcFJlYWxIZWlnaHRzID0gW10sIC8vID8gc29tZXRoaW5nIHJlbGF0ZWQgdG8gbmVnYXRpdmUgbWFyZ2lucyBmb3IgZml4YWJsZSBlbGVtZW50c1xyXG4gICAgICAgICAgICBoZWFkZXJUb3BzID0gW10sIC8vIG9mZnNldCBwb3NpdGlvbnMgd2hlbiBub3QgZml4ZWRcclxuICAgICAgICAgICAgc2Nyb2xsZXIgPSB0aGlzLnNjcm9sbGVyLFxyXG4gICAgICAgICAgICBldmVudE1hbmFnZXIgPSB0aGlzLmV2ZW50LFxyXG4gICAgICAgICAgICAkID0gdGhpcy4kLFxyXG4gICAgICAgICAgICBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgLy8gaSAtIG51bWJlciBvZiBmaXhpbmcgZWxlbWVudCwgcG9zIC0gZml4LXBvc2l0aW9uIGluIHB4LCBmbGFnIC0gMTogdG9wLCAyOiBib3R0b21cclxuICAgICAgICAvLyBJbnZvY2F0aW9uIG9ubHkgaW4gY2FzZSB3aGVuIGZpeC1zdGF0ZSBjaGFuZ2VkXHJcbiAgICAgICAgZnVuY3Rpb24gZml4RWxlbWVudChpLCBwb3MsIGZsYWcpIHtcclxuICAgICAgICAgICAgdmFyIG9yaSA9IGZsYWcgPT0gMSA/ICdwb3MnIDogJ29wcG9zJztcclxuXHJcbiAgICAgICAgICAgIGlmICh2aWV3UG9ydFNpemUgPCAocGFyYW1zLm1pblZpZXcgfHwgMCkpIHsgLy8gTm8gaGVhZGVycyBmaXhpbmcgd2hlbiBubyBlbm91Z2h0IHNwYWNlIGZvciB2aWV3cG9ydFxyXG4gICAgICAgICAgICAgICAgcG9zID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1vdmluZyBhbGwgZml4aW5nIHN0dWZmIC0gd2UgY2FuIGRvIHRoaXMgYmVjYXVzZSBmaXhFbGVtZW50IHRyaWdnZXJzIG9ubHkgd2hlbiBmaXhTdGF0ZSByZWFsbHkgY2hhbmdlZFxyXG4gICAgICAgICAgICB0aGlzLiQoZWxlbWVudHNbaV0pLmNzcyh0aGlzLm9yaWdpbi5wb3MsICcnKS5jc3ModGhpcy5vcmlnaW4ub3Bwb3MsICcnKS5yZW1vdmVDbGFzcyhwYXJhbXMub3V0c2lkZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBGaXhpbmcgaWYgbmVlZGVkXHJcbiAgICAgICAgICAgIGlmIChwb3MgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcG9zICs9ICdweCc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiQoZWxlbWVudHNbaV0pLmNzcyh0aGlzLm9yaWdpbltvcmldLCBwb3MpLmFkZENsYXNzKHBhcmFtcy5vdXRzaWRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYnViYmxlV2hlZWwoZSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdXaGVlbEV2ZW50Jyk7IC8vIGkgLSBmb3IgZXh0cmEgYnl0ZVxyXG4gICAgICAgICAgICAgICAgLy8gZXZ0LmluaXRXZWJLaXRXaGVlbEV2ZW50KGRlbHRhWCwgZGVsdGFZLCB3aW5kb3csIHNjcmVlblgsIHNjcmVlblksIGNsaWVudFgsIGNsaWVudFksIGN0cmxLZXksIGFsdEtleSwgc2hpZnRLZXksIG1ldGFLZXkpO1xyXG4gICAgICAgICAgICAgICAgaS5pbml0V2ViS2l0V2hlZWxFdmVudChlLm9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YVgsIGUub3JpZ2luYWxFdmVudC53aGVlbERlbHRhWSk7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGxlci5kaXNwYXRjaEV2ZW50KGkpO1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaW5pdChfcGFyYW1zKSB7XHJcbiAgICAgICAgICAgIHZhciBwb3M7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gX3BhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zW2tleV0gPSBfcGFyYW1zW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnRzID0gdGhpcy4kKHBhcmFtcy5lbGVtZW50cywgdGhpcy5zY3JvbGxlcik7XHJcblxyXG4gICAgICAgICAgICBpZiAoZWxlbWVudHMpIHtcclxuICAgICAgICAgICAgICAgIHZpZXdQb3J0U2l6ZSA9IHRoaXMuc2Nyb2xsZXJbdGhpcy5vcmlnaW4uY2xpZW50XTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwIDsgaSA8IGVsZW1lbnRzLmxlbmd0aCA7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFZhcmlhYmxlIGhlYWRlciBoZWlnaHRzXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zW3RoaXMub3JpZ2luLnNpemVdID0gZWxlbWVudHNbaV1bdGhpcy5vcmlnaW4ub2Zmc2V0XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudHNbaV0ucGFyZW50Tm9kZSAhPT0gdGhpcy5zY3JvbGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiQoZWxlbWVudHNbaV0ucGFyZW50Tm9kZSkuY3NzKHBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBvcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc1t0aGlzLm9yaWdpbi5jcm9zc1NpemVdID0gZWxlbWVudHNbaV0ucGFyZW50Tm9kZVt0aGlzLm9yaWdpbi5jcm9zc0NsaWVudF07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kKGVsZW1lbnRzW2ldKS5jc3MocG9zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQmV0d2VlbiBmaXhlZCBoZWFkZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgdmlld1BvcnRTaXplIC09IGVsZW1lbnRzW2ldW3RoaXMub3JpZ2luLm9mZnNldF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlclRvcHNbaV0gPSBlbGVtZW50c1tpXS5wYXJlbnROb2RlW3RoaXMub3JpZ2luLm9mZnNldFBvc107IC8vIE5vIHBhZGRpbmdzIGZvciBwYXJlbnROb2RlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFN1bW1hcnkgZWxlbWVudHMgaGVpZ2h0IGFib3ZlIGN1cnJlbnRcclxuICAgICAgICAgICAgICAgICAgICB0b3BGaXhIZWlnaHRzW2ldID0gKHRvcEZpeEhlaWdodHNbaSAtIDFdIHx8IDApOyAvLyBOb3QgemVybyBiZWNhdXNlIG9mIG5lZ2F0aXZlIG1hcmdpbnNcclxuICAgICAgICAgICAgICAgICAgICB0b3BSZWFsSGVpZ2h0c1tpXSA9ICh0b3BSZWFsSGVpZ2h0c1tpIC0gMV0gfHwgTWF0aC5taW4oaGVhZGVyVG9wc1tpXSwgMCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudHNbaSAtIDFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcEZpeEhlaWdodHNbaV0gKz0gZWxlbWVudHNbaSAtIDFdW3RoaXMub3JpZ2luLm9mZnNldF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcFJlYWxIZWlnaHRzW2ldICs9IGVsZW1lbnRzW2kgLSAxXVt0aGlzLm9yaWdpbi5vZmZzZXRdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhKGkgPT0gMCAmJiBoZWFkZXJUb3BzW2ldID09IDApLyogJiYgZm9yY2UgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudChlbGVtZW50c1tpXSwgJ21vdXNld2hlZWwnLCBidWJibGVXaGVlbCwgJ29mZicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50KGVsZW1lbnRzW2ldLCAnbW91c2V3aGVlbCcsIGJ1YmJsZVdoZWVsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5saW1pdGVyICYmIGVsZW1lbnRzWzBdKSB7IC8vIEJvdHRvbSBlZGdlIG9mIGZpcnN0IGhlYWRlciBhcyB0b3AgbGltaXQgZm9yIHRyYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhY2sgJiYgdGhpcy50cmFjayAhPSB0aGlzLnNjcm9sbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NbdGhpcy5vcmlnaW4ucG9zXSA9IGVsZW1lbnRzWzBdLnBhcmVudE5vZGVbdGhpcy5vcmlnaW4ub2Zmc2V0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kKHRoaXMudHJhY2spLmNzcyhwb3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmFyVG9wTGltaXQgPSBlbGVtZW50c1swXS5wYXJlbnROb2RlW3RoaXMub3JpZ2luLm9mZnNldF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuYmFyVG9wTGltaXQgPSBlbGVtZW50c1swXS5wYXJlbnROb2RlW3RoaXMub3JpZ2luLm9mZnNldF07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGwoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmxpbWl0ZXIgPT09IGZhbHNlKSB7IC8vIHVuZGVmaW5lZCAoaW4gc2Vjb25kIGZpeCBpbnN0YW5jZSkgc2hvdWxkIGhhdmUgbm8gaW5mbHVlbmNlIG9uIGJhciBsaW1pdFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFyVG9wTGltaXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgZXZlbnQgPSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50cyxcclxuXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gJCh0aGlzKVswXS5wYXJlbnROb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgPSBwYXJlbnQub2Zmc2V0VG9wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGZpbmRpbmcgbnVtIC0+IGVsZW1lbnRzW251bV0gPT09IHRoaXNcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCA7IGkgPCBlbGVtZW50cy5sZW5ndGggOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50c1tpXSA9PT0gdGhpcykgbnVtID0gaTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSB0b3AgLSB0b3BGaXhIZWlnaHRzW251bV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuc2Nyb2xsKSB7IC8vIFVzZXIgZGVmaW5lZCBjYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMuc2Nyb2xsKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxOiBzZWxmLnNjcm9sbGVyLnNjcm9sbFRvcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyOiBwb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zY3JvbGxlci5zY3JvbGxUb3AgPSBwb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2xpY2snXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVycy5wdXNoKGV2ZW50KTsgLy8gRm9yIGF1dG8tZGlzcG9zZVxyXG4gICAgICAgICAgICAgICAgLy8gZXZlbnRNYW5hZ2VyKGV2ZW50LmVsZW1lbnQsIGV2ZW50LnR5cGUsIGV2ZW50LmhhbmRsZXIsICdvZmYnKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50TWFuYWdlcihldmVudC5lbGVtZW50LCBldmVudC50eXBlLCBldmVudC5oYW5kbGVyLCAnb24nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vbignaW5pdCcsIGluaXQsIHVzZXJQYXJhbXMpO1xyXG5cclxuICAgICAgICB2YXIgZml4RmxhZyA9IFtdLCAvLyAxIC0gcGFzdCwgMiAtIGZ1dHVyZSwgMyAtIGN1cnJlbnQgKG5vdCBmaXhlZClcclxuICAgICAgICAgICAgZ3JhZEZsYWcgPSBbXTtcclxuICAgICAgICB0aGlzLm9uKCdpbml0IHNjcm9sbCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgZml4U3RhdGUsIGhUb3AsIGdyYWRTdGF0ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50cykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoYW5nZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBmaXhGbGFnIHVwZGF0ZVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAgOyBpIDwgZWxlbWVudHMubGVuZ3RoIDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZml4U3RhdGUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXJUb3BzW2ldIC0gdGhpcy5wb3MoKSA8IHRvcFJlYWxIZWlnaHRzW2ldICsgcGFyYW1zLnJhZGl1cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIZWFkZXIgdHJ5aW5nIHRvIGdvIHVwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpeFN0YXRlID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaFRvcCA9IHRvcEZpeEhlaWdodHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChoZWFkZXJUb3BzW2ldIC0gdGhpcy5wb3MoKSA+IHRvcFJlYWxIZWlnaHRzW2ldICsgdmlld1BvcnRTaXplIC0gcGFyYW1zLnJhZGl1cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIZWFkZXIgdHJ5aW5nIHRvIGdvIGRvd25cclxuICAgICAgICAgICAgICAgICAgICAgICAgZml4U3RhdGUgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygndG9wRml4SGVpZ2h0c1tpXSArIHZpZXdQb3J0U2l6ZSArIHRvcFJlYWxIZWlnaHRzW2ldJywgdG9wRml4SGVpZ2h0c1tpXSwgdGhpcy5zY3JvbGxlclt0aGlzLm9yaWdpbi5jbGllbnRdLCB0b3BSZWFsSGVpZ2h0c1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhUb3AgPSB0aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLmNsaWVudF0gLSBlbGVtZW50c1tpXVt0aGlzLm9yaWdpbi5vZmZzZXRdIC0gdG9wRml4SGVpZ2h0c1tpXSAtIHZpZXdQb3J0U2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2hUb3AnLCBoVG9wLCB2aWV3UG9ydFNpemUsIGVsZW1lbnRzW3RoaXMub3JpZ2luLm9mZnNldF0sIHRvcEZpeEhlaWdodHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyh0b3BGaXhIZWlnaHRzW2ldICsgdmlld1BvcnRTaXplICsgZWxlbWVudHNbdGhpcy5vcmlnaW4ub2Zmc2V0XSkgLSB0aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLmNsaWVudF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGVhZGVyIGluIHZpZXdwb3J0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpeFN0YXRlID0gMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaFRvcCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGdyYWRTdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXJUb3BzW2ldIC0gdGhpcy5wb3MoKSA8IHRvcFJlYWxIZWlnaHRzW2ldIHx8IGhlYWRlclRvcHNbaV0gLSB0aGlzLnBvcygpID4gdG9wUmVhbEhlaWdodHNbaV0gKyB2aWV3UG9ydFNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZFN0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaXhTdGF0ZSAhPSBmaXhGbGFnW2ldIHx8IGdyYWRTdGF0ZSAhPSBncmFkRmxhZ1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXhFbGVtZW50LmNhbGwodGhpcywgaSwgaFRvcCwgZml4U3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXhGbGFnW2ldID0gZml4U3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYWRGbGFnW2ldID0gZ3JhZFN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBZGRpbmcgcG9zaXRpb25pbmcgY2xhc3NlcyAob24gbGFzdCB0b3AgYW5kIGZpcnN0IGJvdHRvbSBoZWFkZXIpXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlKSB7IC8vIEF0IGxlYXRzIG9uZSBjaGFuZ2UgaW4gZWxlbWVudHMgZmxhZyBzdHJ1Y3R1cmUgb2NjdXJlZFxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAgOyBpIDwgZWxlbWVudHMubGVuZ3RoIDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXhGbGFnW2ldID09IDEgJiYgcGFyYW1zLnBhc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJChlbGVtZW50c1tpXSkuYWRkQ2xhc3MocGFyYW1zLnBhc3QpLnJlbW92ZUNsYXNzKHBhcmFtcy5mdXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZml4RmxhZ1tpXSA9PSAyICYmIHBhcmFtcy5mdXR1cmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJChlbGVtZW50c1tpXSkuYWRkQ2xhc3MocGFyYW1zLmZ1dHVyZSkucmVtb3ZlQ2xhc3MocGFyYW1zLnBhc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZml4RmxhZ1tpXSA9PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmZ1dHVyZSB8fCBwYXJhbXMucGFzdCkgdGhpcy4kKGVsZW1lbnRzW2ldKS5yZW1vdmVDbGFzcyhwYXJhbXMucGFzdCkucmVtb3ZlQ2xhc3MocGFyYW1zLmZ1dHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmluc2lkZSkgdGhpcy4kKGVsZW1lbnRzW2ldKS5hZGRDbGFzcyhwYXJhbXMuaW5zaWRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuaW5zaWRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiQoZWxlbWVudHNbaV0pLnJlbW92ZUNsYXNzKHBhcmFtcy5pbnNpZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZml4RmxhZ1tpXSAhPSBmaXhGbGFnW2kgKyAxXSAmJiBmaXhGbGFnW2ldID09IDEgJiYgcGFyYW1zLmJlZm9yZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kKGVsZW1lbnRzW2ldKS5hZGRDbGFzcyhwYXJhbXMuYmVmb3JlKS5yZW1vdmVDbGFzcyhwYXJhbXMuYWZ0ZXIpOyAvLyBMYXN0IHRvcCBmaXhlZCBoZWFkZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaXhGbGFnW2ldICE9IGZpeEZsYWdbaSAtIDFdICYmIGZpeEZsYWdbaV0gPT0gMiAmJiBwYXJhbXMuYWZ0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJChlbGVtZW50c1tpXSkuYWRkQ2xhc3MocGFyYW1zLmFmdGVyKS5yZW1vdmVDbGFzcyhwYXJhbXMuYmVmb3JlKTsgLy8gRmlyc3QgYm90dG9tIGZpeGVkIGhlYWRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kKGVsZW1lbnRzW2ldKS5yZW1vdmVDbGFzcyhwYXJhbXMuYmVmb3JlKS5yZW1vdmVDbGFzcyhwYXJhbXMuYWZ0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmdyYWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChncmFkRmxhZ1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJChlbGVtZW50c1tpXSkuYWRkQ2xhc3MocGFyYW1zLmdyYWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiQoZWxlbWVudHNbaV0pLnJlbW92ZUNsYXNzKHBhcmFtcy5ncmFkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLm9uKCdyZXNpemUgdXBkJywgZnVuY3Rpb24odXBkUGFyYW1zKSB7XHJcbiAgICAgICAgICAgIGluaXQuY2FsbCh0aGlzLCB1cGRQYXJhbXMgJiYgdXBkUGFyYW1zLmZpeCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGJhcm9uLmZuLmZpeCA9IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIHZhciBpID0gMDtcclxuXHJcbiAgICAgICAgd2hpbGUgKHRoaXNbaV0pIHtcclxuICAgICAgICAgICAgZml4LmNhbGwodGhpc1tpXSwgcGFyYW1zKTtcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG59KSh3aW5kb3cpO1xyXG4vKiBBdXRvdXBkYXRlIHBsdWdpbiBmb3IgYmFyb24gMC42KyAqL1xyXG4oZnVuY3Rpb24od2luZG93KSB7XHJcbiAgICB2YXIgTXV0YXRpb25PYnNlcnZlciA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5Nb3pNdXRhdGlvbk9ic2VydmVyIHx8IG51bGw7XHJcblxyXG4gICAgdmFyIGF1dG9VcGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHdhdGNoZXI7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFjdHVhbGl6ZVdhdGNoZXIoKSB7XHJcbiAgICAgICAgICAgIGlmICghc2VsZi5yb290W3NlbGYub3JpZ2luLm9mZnNldF0pIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0V2F0Y2goKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0b3BXYXRjaCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTZXQgaW50ZXJ2YWwgdGltZW91dCBmb3Igd2F0Y2hpbmcgd2hlbiByb290IG5vZGUgd2lsbCBiZSB2aXNpYmxlXHJcbiAgICAgICAgZnVuY3Rpb24gc3RhcnRXYXRjaCgpIHtcclxuICAgICAgICAgICAgaWYgKHdhdGNoZXIpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHdhdGNoZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnJvb3Rbc2VsZi5vcmlnaW4ub2Zmc2V0XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0b3BXYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDMwMCk7IC8vIGlzIGl0IGdvb2QgZW5vdWdodCBmb3IgeW91PylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHN0b3BXYXRjaCgpIHtcclxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh3YXRjaGVyKTtcclxuICAgICAgICAgICAgd2F0Y2hlciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZGVib3VuY2VkVXBkYXRlciA9IHNlbGYuX2RlYm91bmNlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xyXG4gICAgICAgIH0sIDMwMCk7XHJcblxyXG4gICAgICAgIHRoaXMuX29ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGFjdHVhbGl6ZVdhdGNoZXIoKTtcclxuICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcclxuICAgICAgICAgICAgZGVib3VuY2VkVXBkYXRlcigpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLm9uKCdpbml0JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNlbGYuX29ic2VydmVyLm9ic2VydmUoc2VsZi5yb290LCB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBzdWJ0cmVlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlczogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgLy8gTm8gcmVhc29ucyB0byBzZXQgYXR0cmlidXRlcyB0byB0cnVlXHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgY2FzZSB3aGVuIHJvb3QvY2hpbGQgbm9kZSB3aXRoIGFscmVhZHkgcHJvcGVybHkgaW5pdGVkIGJhcm9uIHRvZ2dsZWQgdG8gaGlkZGVuIGFuZCB0aGVuIGJhY2sgdG8gdmlzaWJsZSxcclxuICAgICAgICAgICAgICAgIC8vIGFuZCB0aGUgc2l6ZSBvZiBwYXJlbnQgd2FzIGNoYW5nZWQgZHVyaW5nIHRoYXQgaGlkZGVuIHN0YXRlLCBpcyB2ZXJ5IHJhcmVcclxuICAgICAgICAgICAgICAgIC8vIE90aGVyIGNhc2VzIGFyZSBjb3ZlcmVkIGJ5IHdhdGNoZXIsIGFuZCB5b3Ugc3RpbGwgY2FuIGRvIC51cGRhdGUgYnkgeW91cnNlbGZcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBhY3R1YWxpemVXYXRjaGVyKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMub24oJ2Rpc3Bvc2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2VsZi5fb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgICAgICBzdG9wV2F0Y2goKTtcclxuICAgICAgICAgICAgZGVsZXRlIHNlbGYuX29ic2VydmVyO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBiYXJvbi5mbi5hdXRvVXBkYXRlID0gZnVuY3Rpb24ocGFyYW1zKSB7XHJcbiAgICAgICAgaWYgKCFNdXRhdGlvbk9ic2VydmVyKSByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgdmFyIGkgPSAwO1xyXG5cclxuICAgICAgICB3aGlsZSAodGhpc1tpXSkge1xyXG4gICAgICAgICAgICBhdXRvVXBkYXRlLmNhbGwodGhpc1tpXSwgcGFyYW1zKTtcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG59KSh3aW5kb3cpO1xyXG5cclxuLyogQ29udHJvbHMgcGx1Z2luIGZvciBiYXJvbiAwLjYrICovXHJcbihmdW5jdGlvbih3aW5kb3csIHVuZGVmaW5lZCkge1xyXG4gICAgdmFyIGNvbnRyb2xzID0gZnVuY3Rpb24ocGFyYW1zKSB7XHJcbiAgICAgICAgdmFyIGZvcndhcmQsIGJhY2t3YXJkLCB0cmFjaywgc2NyZWVuLFxyXG4gICAgICAgICAgICBzZWxmID0gdGhpcywgLy8gQUFBQUFBISEhISExMVxyXG4gICAgICAgICAgICBldmVudDtcclxuXHJcbiAgICAgICAgc2NyZWVuID0gcGFyYW1zLnNjcmVlbiB8fCAwLjk7XHJcblxyXG4gICAgICAgIGlmIChwYXJhbXMuZm9yd2FyZCkge1xyXG4gICAgICAgICAgICBmb3J3YXJkID0gdGhpcy4kKHBhcmFtcy5mb3J3YXJkLCB0aGlzLmNsaXBwZXIpO1xyXG5cclxuICAgICAgICAgICAgZXZlbnQgPSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBmb3J3YXJkLFxyXG5cclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB5ID0gc2VsZi5wb3MoKSAtIHBhcmFtcy5kZWx0YSB8fCAzMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wb3MoeSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHR5cGU6ICdjbGljaydcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50SGFuZGxlcnMucHVzaChldmVudCk7IC8vIEZvciBhdXRvLWRpc3Bvc2VcclxuICAgICAgICAgICAgdGhpcy5ldmVudChldmVudC5lbGVtZW50LCBldmVudC50eXBlLCBldmVudC5oYW5kbGVyLCAnb24nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXJhbXMuYmFja3dhcmQpIHtcclxuICAgICAgICAgICAgYmFja3dhcmQgPSB0aGlzLiQocGFyYW1zLmJhY2t3YXJkLCB0aGlzLmNsaXBwZXIpO1xyXG5cclxuICAgICAgICAgICAgZXZlbnQgPSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBiYWNrd2FyZCxcclxuXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHNlbGYucG9zKCkgKyBwYXJhbXMuZGVsdGEgfHwgMzA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucG9zKHkpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2xpY2snXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9ldmVudEhhbmRsZXJzLnB1c2goZXZlbnQpOyAvLyBGb3IgYXV0by1kaXNwb3NlXHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnQoZXZlbnQuZWxlbWVudCwgZXZlbnQudHlwZSwgZXZlbnQuaGFuZGxlciwgJ29uJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFyYW1zLnRyYWNrKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJhbXMudHJhY2sgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHRyYWNrID0gdGhpcy50cmFjaztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRyYWNrID0gdGhpcy4kKHBhcmFtcy50cmFjaywgdGhpcy5jbGlwcGVyKVswXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRyYWNrKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0cmFjayxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IGVbJ29mZnNldCcgKyBzZWxmLm9yaWdpbi54XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhCYXIgPSBzZWxmLmJhcltzZWxmLm9yaWdpbi5vZmZzZXRQb3NdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbiA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeCA8IHhCYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ24gPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4ID4geEJhciArIHNlbGYuYmFyW3NlbGYub3JpZ2luLm9mZnNldF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ24gPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHNlbGYucG9zKCkgKyBzaWduICogc2NyZWVuICogc2VsZi5zY3JvbGxlcltzZWxmLm9yaWdpbi5jbGllbnRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnBvcyh5KTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbW91c2Vkb3duJ1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudEhhbmRsZXJzLnB1c2goZXZlbnQpOyAvLyBGb3IgYXV0by1kaXNwb3NlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50KGV2ZW50LmVsZW1lbnQsIGV2ZW50LnR5cGUsIGV2ZW50LmhhbmRsZXIsICdvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBiYXJvbi5mbi5jb250cm9scyA9IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIHZhciBpID0gMDtcclxuXHJcbiAgICAgICAgd2hpbGUgKHRoaXNbaV0pIHtcclxuICAgICAgICAgICAgY29udHJvbHMuY2FsbCh0aGlzW2ldLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbn0pKHdpbmRvdyk7XHJcbi8qIFB1bGwgdG8gbG9hZCBwbHVnaW4gZm9yIGJhcm9uIDAuNisgKi9cclxuKGZ1bmN0aW9uKHdpbmRvdywgdW5kZWZpbmVkKSB7XHJcbiAgICB2YXIgcHVsbCA9IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIHZhciBibG9jayA9IHRoaXMuJChwYXJhbXMuYmxvY2spLFxyXG4gICAgICAgICAgICBzaXplID0gcGFyYW1zLnNpemUgfHwgdGhpcy5vcmlnaW4uc2l6ZSxcclxuICAgICAgICAgICAgbGltaXQgPSBwYXJhbXMubGltaXQgfHwgODAsXHJcbiAgICAgICAgICAgIG9uRXhwYW5kID0gcGFyYW1zLm9uRXhwYW5kLFxyXG4gICAgICAgICAgICBlbGVtZW50cyA9IHBhcmFtcy5lbGVtZW50cyB8fCBbXSxcclxuICAgICAgICAgICAgaW5Qcm9ncmVzcyA9IHBhcmFtcy5pblByb2dyZXNzIHx8ICcnLFxyXG4gICAgICAgICAgICBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX2luc2lzdGVuY2UgPSAwLFxyXG4gICAgICAgICAgICBfemVyb1hDb3VudCA9IDAsXHJcbiAgICAgICAgICAgIF9pbnRlcnZhbCxcclxuICAgICAgICAgICAgX3RpbWVyLFxyXG4gICAgICAgICAgICBfeCA9IDAsXHJcbiAgICAgICAgICAgIF9vbkV4cGFuZENhbGxlZCxcclxuICAgICAgICAgICAgX3dhaXRpbmcgPSBwYXJhbXMud2FpdGluZyB8fCA1MDAsXHJcbiAgICAgICAgICAgIF9vbjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0U2l6ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuc2Nyb2xsZXJbc2VsZi5vcmlnaW4uc2Nyb2xsXSArIHNlbGYuc2Nyb2xsZXJbc2VsZi5vcmlnaW4ub2Zmc2V0XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNjcm9sbGVyIGNvbnRlbnQgaGVpZ2h0XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q29udGVudFNpemUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxmLnNjcm9sbGVyW3NlbGYub3JpZ2luLnNjcm9sbFNpemVdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2Nyb2xsZXIgaGVpZ2h0XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0U2Nyb2xsZXJTaXplKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5zY3JvbGxlcltzZWxmLm9yaWdpbi5jbGllbnRdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcCh4LCBmb3JjZSkge1xyXG4gICAgICAgICAgICB2YXIgayA9IHggKiAwLjAwMDU7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihmb3JjZSAtIGsgKiAoeCArIDU1MCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdG9nZ2xlKG9uKSB7XHJcbiAgICAgICAgICAgIF9vbiA9IG9uO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9uKSB7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGUoKTsgLy8gRmlyc3QgdGltZSB3aXRoIG5vIGRlbGF5XHJcbiAgICAgICAgICAgICAgICBfaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh1cGRhdGUsIDIwMCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKF9pbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcclxuICAgICAgICAgICAgdmFyIHBvcyA9IHt9LFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gZ2V0U2l6ZSgpLFxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gZ2V0Q29udGVudFNpemUoKSxcclxuICAgICAgICAgICAgICAgIGR4LFxyXG4gICAgICAgICAgICAgICAgb3A0LFxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsSW5Qcm9ncmVzcyA9IF9pbnNpc3RlbmNlID09IDE7XHJcblxyXG4gICAgICAgICAgICBvcDQgPSAwOyAvLyDQktC+0LfQstGA0LDRidCw0Y7RidCw0Y8g0YHQuNC70LBcclxuICAgICAgICAgICAgaWYgKF9pbnNpc3RlbmNlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgb3A0ID0gNDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9pZiAoX2luc2lzdGVuY2UgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgZHggPSBzdGVwKF94LCBvcDQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGhlaWdodCA+PSBzY3JvbGxIZWlnaHQgLSBfeCAmJiBfaW5zaXN0ZW5jZSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbEluUHJvZ3Jlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3ggKz0gZHg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBfeCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF94IDwgMCkgX3ggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIHBvc1tzaXplXSA9IF94ICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGlmIChnZXRTY3JvbGxlclNpemUoKSA8PSBnZXRDb250ZW50U2l6ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kKGJsb2NrKS5jc3MocG9zKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCA7IGkgPCBlbGVtZW50cy5sZW5ndGggOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kKGVsZW1lbnRzW2ldLnNlbGYpLmNzcyhlbGVtZW50c1tpXS5wcm9wZXJ0eSwgTWF0aC5taW4oX3ggLyBsaW1pdCAqIDEwMCwgMTAwKSArICclJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpblByb2dyZXNzICYmIF94KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kKHNlbGYucm9vdCkuYWRkQ2xhc3MoaW5Qcm9ncmVzcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF94ID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLm9uQ29sbGFwc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLm9uQ29sbGFwc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX2luc2lzdGVuY2UgPSAwO1xyXG4gICAgICAgICAgICAgICAgX3RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBfaW5zaXN0ZW5jZSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgfSwgX3dhaXRpbmcpO1xyXG4gICAgICAgICAgICAvL31cclxuXHJcbiAgICAgICAgICAgIGlmIChvbkV4cGFuZCAmJiBfeCA+IGxpbWl0ICYmICFfb25FeHBhbmRDYWxsZWQpIHtcclxuICAgICAgICAgICAgICAgIG9uRXhwYW5kKCk7XHJcbiAgICAgICAgICAgICAgICBfb25FeHBhbmRDYWxsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoX3ggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgX3plcm9YQ291bnQrKztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF96ZXJvWENvdW50ID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoX3plcm9YQ291bnQgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICB0b2dnbGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgX29uRXhwYW5kQ2FsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5Qcm9ncmVzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuJChzZWxmLnJvb3QpLnJlbW92ZUNsYXNzKGluUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm9uKCdpbml0JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRvZ2dsZSh0cnVlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5vbignZGlzcG9zZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0b2dnbGUoZmFsc2UpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmV2ZW50KHRoaXMuc2Nyb2xsZXIsICdtb3VzZXdoZWVsIERPTU1vdXNlU2Nyb2xsJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB2YXIgZG93biA9IGUud2hlZWxEZWx0YSA8IDAgfHwgKGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YSA8IDApIHx8IGUuZGV0YWlsID4gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChkb3duKSB7XHJcbiAgICAgICAgICAgICAgICBfaW5zaXN0ZW5jZSA9IDE7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RpbWVyKTtcclxuICAgICAgICAgICAgICAgIGlmICghX29uICYmIGdldFNpemUoKSA+PSBnZXRDb250ZW50U2l6ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gICAgIHRvZ2dsZShmYWxzZSk7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgYmFyb24uZm4ucHVsbCA9IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIHZhciBpID0gMDtcclxuXHJcbiAgICAgICAgd2hpbGUgKHRoaXNbaV0pIHtcclxuICAgICAgICAgICAgcHVsbC5jYWxsKHRoaXNbaV0sIHBhcmFtcyk7XHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxufSkod2luZG93KTtcclxuXHJcbiQoZnVuY3Rpb24oKSB7XHJcbiAgICAkKCcuanMtbWFpbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAkKHRoaXMpLmVtcHR5KCkuYWRkQ2xhc3MoJ2J0bl9jaXJjbGUnKTtcclxuICAgICAgICAkKCcubWFpbicpLnRvZ2dsZUNsYXNzKCdwcm9jZXNzaW5nJyk7XHJcbiAgICAgICAgJCgnLm1haW5fX2luZm8nKS5odG1sKCdQcm9jZXNzaW5nPHNwYW4+VGhpcyBtYXkgdGFrZSBmZXcgbWludXRlcy4gUGxlYXNlIHdhaXQuPC9zcGFuPicpXHJcbiAgICB9KTtcclxuXHJcbiAgICAkKCcuanMtc2Nyb2xsZXInKS5iYXJvbih7XHJcbiAgICAgICAgc2Nyb2xsZXI6ICcuc2Nyb2xsZXInLFxyXG4gICAgICAgIGJhck9uQ2xzOiAnYmFyb24tc2hvdy1zY3JvbGwnLFxyXG4gICAgICAgIGJhcjogJy5zY3JvbGxlcl9fYmFyJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnLmpzLWRlc2NyaXB0aW9uLXBvcHVwJykuZWFjaChmdW5jdGlvbiAoaSwgZWwpIHtcclxuICAgICAgICBuZXcgRGVzY3JpcHRpb25Qb3B1cChlbCk7XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBEZXNjcmlwdGlvblBvcHVwKGVsZW1lbnQpIHtcclxuICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudCk7XHJcbiAgICB0aGlzLmNvbnRlbnQgPSB0aGlzLmVsZW1lbnQuZmluZCgnLmpzLWRlc2NyaXB0aW9uLXNjcm9sbGVyJyk7XHJcblxyXG4gICAgdGhpcy5pbml0Q29udGVudEhlaWdodCgpO1xyXG4gICAgdGhpcy5pbml0QmluZGluZ3MoKTtcclxufVxyXG5cclxuRGVzY3JpcHRpb25Qb3B1cC5wcm90b3R5cGUucHJveHkgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgY2FsbGJhY2sgPSB0aGlzW2NhbGxiYWNrXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gJC5wcm94eShjYWxsYmFjaywgdGhpcyk7XHJcbn07XHJcblxyXG5EZXNjcmlwdGlvblBvcHVwLnByb3RvdHlwZS5pbml0Q29udGVudEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuY29udGVudC5oZWlnaHQodGhpcy5lbGVtZW50LmhlaWdodCgpIC0gdGhpcy5jb250ZW50LnBvc2l0aW9uKCkudG9wICsgcGFyc2VJbnQodGhpcy5lbGVtZW50LmNzcygncGFkZGluZy10b3AnKSkpO1xyXG4gICAgc2V0VGltZW91dCh0aGlzLnByb3h5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnQudHJpZ2dlcignc2l6ZUNoYW5nZScpO1xyXG4gICAgfSksIDEpO1xyXG59O1xyXG5cclxuRGVzY3JpcHRpb25Qb3B1cC5wcm90b3R5cGUuaW5pdEJpbmRpbmdzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCB0aGlzLnByb3h5KCdpbml0Q29udGVudEhlaWdodCcpKTtcclxuXHJcbiAgICAkKCcuanMtZGVzY3JpcHRpb24tY2FsbGVyJykub2ZmKCdkZXNjcmlwdGlvblBvcHVwLmNsaWNrJykub24oJ2NsaWNrJywgdGhpcy5wcm94eShmdW5jdGlvbihldmVudCl7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQudG9nZ2xlQ2xhc3MoJ3Nob3cnKTtcclxuICAgIH0pKTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ2NsaWNrJywgJy5qcy1kZXNjcmlwdGlvbi1jbG9zZScsIHRoaXMucHJveHkoZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoJ3Nob3cnKTtcclxuICAgIH0pKTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKHdpbmRvdykub24oJ2NsaWNrJywgdGhpcy5wcm94eShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKCdzaG93Jyk7XHJcbiAgICB9KSk7XHJcbn07Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
